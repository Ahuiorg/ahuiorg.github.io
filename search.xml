<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020健身记录</title>
    <url>//10086/</url>
    <content><![CDATA[<h3 id="加油，-2020，要么健身，要么读书"><a href="#加油，-2020，要么健身，要么读书" class="headerlink" title="加油， 2020，要么健身，要么读书"></a>加油， 2020，要么健身，要么读书</h3><p>陪自己一辈子的，是自己的身体，今年目标增重 10 斤，目前 73.5 公斤</p>
<span id="more"></span>

<h4 id="1-月，-目标-增重-1-斤"><a href="#1-月，-目标-增重-1-斤" class="headerlink" title="1 月， 目标: 增重 1 斤"></a>1 月， 目标: 增重 1 斤</h4><h5 id="1-20（周一）练胸-1-小时-20-分钟"><a href="#1-20（周一）练胸-1-小时-20-分钟" class="headerlink" title="1.20（周一）练胸 1 小时 20 分钟"></a>1.20（周一）练胸 1 小时 20 分钟</h5><blockquote>
<p>上斜卧推（哑铃）左右各 15 公斤 10RM * 6 组</p>
<p>双杠臂屈伸 自重减 40 斤 10RM * 5 组</p>
<p>卧推（杠铃） 15 公斤 10RM * 3~4 组</p>
<p>绳索夹胸 左右各 15 公斤 10RM * 3 组</p>
</blockquote>
<h5 id="1-19（周日）起很早去儿童医院，开车在等红绿灯的时候都睡着了，太虚了今天休息一天"><a href="#1-19（周日）起很早去儿童医院，开车在等红绿灯的时候都睡着了，太虚了今天休息一天" class="headerlink" title="1.19（周日）起很早去儿童医院，开车在等红绿灯的时候都睡着了，太虚了今天休息一天"></a>1.19（周日）起很早去儿童医院，开车在等红绿灯的时候都睡着了，太虚了今天休息一天</h5><blockquote>
<p>中午午睡睡了 2 小时，起来的时候特别渴，喝了 1.5L 水。。。。</p>
<p>想了想，好像又是 3 天没抽烟了，有<a href="https://zhuanlan.zhihu.com/p/39408838">戒烟症状</a>了</p>
</blockquote>
<h5 id="1-18（周六）话说我感冒好了，牛牛又感冒了，还是流感，感觉是我我传染给他的"><a href="#1-18（周六）话说我感冒好了，牛牛又感冒了，还是流感，感觉是我我传染给他的" class="headerlink" title="1.18（周六）话说我感冒好了，牛牛又感冒了，还是流感，感觉是我我传染给他的"></a>1.18（周六）话说我感冒好了，牛牛又感冒了，还是流感，感觉是我我传染给他的</h5><blockquote>
<p>想各种办法希望小孩不要感冒，最后还是感冒了，原本今天的票回家过年的，都退票了。感觉今年不能回家过年了</p>
</blockquote>
<h5 id="1-17（周五）今天真的很虚"><a href="#1-17（周五）今天真的很虚" class="headerlink" title="1.17（周五）今天真的很虚"></a>1.17（周五）今天真的很虚</h5><h5 id="1-16（周四）部门运动分"><a href="#1-16（周四）部门运动分" class="headerlink" title="1.16（周四）部门运动分"></a>1.16（周四）部门运动分</h5><blockquote>
<p>拔河居然把腰拉伤了</p>
<p>平板坚持了 3 分 30 秒</p>
</blockquote>
<h5 id="1-15（周三）明天部门运动分，今天休息"><a href="#1-15（周三）明天部门运动分，今天休息" class="headerlink" title="1.15（周三）明天部门运动分，今天休息"></a>1.15（周三）明天部门运动分，今天休息</h5><h5 id="1-14（周二）练胸-1-小时-20-分钟"><a href="#1-14（周二）练胸-1-小时-20-分钟" class="headerlink" title="1.14（周二）练胸 1 小时 20 分钟"></a>1.14（周二）练胸 1 小时 20 分钟</h5><blockquote>
<p>上斜卧推（哑铃）左右各 12.5 公斤 10RM * 6 组</p>
<p>双杠臂屈伸 自重减 40 斤 10RM * 5 组</p>
<p>平板飞鸟加哑铃卧推 7.5 公斤 12RM * 3 组</p>
<p>绳索夹胸 左右各 15 公斤 10RM * 3 组</p>
</blockquote>
<p>这两天居然感冒了。。。。。。尴尬</p>
<h5 id="1-13（周一）-练腿-1-小时"><a href="#1-13（周一）-练腿-1-小时" class="headerlink" title="1.13（周一） 练腿 1 小时"></a>1.13（周一） 练腿 1 小时</h5><blockquote>
<p>颈后杠铃深蹲 左右各 15 公斤 20RM * 10 组</p>
<p>硬拉 左右各 15 公斤 10RM * 3 组</p>
<p>平板支撑 120S * 1 组 60S * 2 组； 为了后天的平板支撑比赛</p>
</blockquote>
<p>今天试了一下左右 35 公斤的硬拉，没想到居然能拉 3 个， 哈哈</p>
<p>第一次玩深蹲，重量上得很轻，就是杠放肩上的时候有点不习惯</p>
<h5 id="1-12（周日）今天没健身，处理-1-6-号下雪的时候车被别人撞了的事故去了"><a href="#1-12（周日）今天没健身，处理-1-6-号下雪的时候车被别人撞了的事故去了" class="headerlink" title="1.12（周日）今天没健身，处理 1.6 号下雪的时候车被别人撞了的事故去了"></a>1.12（周日）今天没健身，处理 1.6 号下雪的时候车被别人撞了的事故去了</h5><blockquote>
<p>先在定损中心定损，再到 4S 店报价，然后保险公司给 4S 店钱， 然后定货，等货到了之后再修</p>
</blockquote>
<p>一出事故很麻烦，就算是别人全责，也很麻烦，希望大家 2020 年一路顺风</p>
<h5 id="1-11（周六）-崇礼太舞滑雪一天"><a href="#1-11（周六）-崇礼太舞滑雪一天" class="headerlink" title="1.11（周六） 崇礼太舞滑雪一天"></a>1.11（周六） <a href="/thaiwooski.html">崇礼太舞滑雪一天</a></h5><blockquote>
<p>学习了平行转大弯，体验到了走刃的快感，感受到了从黑道上滑下去的刺激</p>
<p>车费：￥ 162；雪票：￥ 308；吃饭：￥ 90；总费用：￥ 560</p>
</blockquote>
<h5 id="1-10（周五）划水-1-小时"><a href="#1-10（周五）划水-1-小时" class="headerlink" title="1.10（周五）划水 1 小时"></a>1.10（周五）划水 1 小时</h5><blockquote>
<p>今天练了 5 组平板， 一组 120S， 四组 60S</p>
</blockquote>
<h5 id="1-9（周四）练背-1-小时-10-分钟"><a href="#1-9（周四）练背-1-小时-10-分钟" class="headerlink" title="1.9（周四）练背 1 小时 10 分钟"></a>1.9（周四）练背 1 小时 10 分钟</h5><blockquote>
<p>引体向上 自重 3RM * 2 组， 减重 61 斤 10RM * 5 组</p>
<p>俯身杠铃划船 左右各 10 公斤 10RM * 5 组</p>
<p>高位下拉 130 斤 10RM * 5 组</p>
<p>绳索划船 50 斤 12RM * 5 组</p>
</blockquote>
<h5 id="1-8（周三）休息一天"><a href="#1-8（周三）休息一天" class="headerlink" title="1.8（周三）休息一天"></a>1.8（周三）休息一天</h5><blockquote>
<p>今天感觉胸很酸痛，昨天的练胸感觉是健身以来练胸练得最到位的一次</p>
</blockquote>
<h5 id="1-7（周二）-练胸-1-小时-20-分钟-推胸-夹胸"><a href="#1-7（周二）-练胸-1-小时-20-分钟-推胸-夹胸" class="headerlink" title="1.7（周二） 练胸 1 小时 20 分钟 推胸 夹胸"></a>1.7（周二） 练胸 1 小时 20 分钟 推胸 夹胸</h5><blockquote>
<p>平板卧推（杠铃）左右各 15 公斤 10RM * 10 组</p>
<p>上斜卧推（哑铃）左右各 7.5 公斤 10RM * 5 组</p>
<p>蝴蝶机夹胸 左右各 15 公斤 8RM * 5 组</p>
<p>绳索夹胸 左右各 15 公斤 10RM * 5 组</p>
</blockquote>
<p>放一个练胸的<a href="https://zhuanlan.zhihu.com/p/38583580">练胸教程</a>，没事的时候可以多看看</p>
<p>看了教程之后发现自己下胸练得还是没到位，因为练下胸的动作对我来讲太难了，下胸没一点力量，完全上不去</p>
<h5 id="1-6（周一）练腿-1-小时-硬拉"><a href="#1-6（周一）练腿-1-小时-硬拉" class="headerlink" title="1.6（周一）练腿 1 小时 硬拉"></a>1.6（周一）练腿 1 小时 硬拉</h5><blockquote>
<p>40 公斤 10RM * 10 组 50 公斤 8RM*5 组</p>
</blockquote>
<p>放一个练腿的<a href="https://www.zhihu.com/question/54873522">练腿教程</a> ， 说实话， 感觉自己是在划水，而且动作及其不标准，我练完之后居然腰痛，想特别感谢每次都一块健身的小伙伴家琦同学，不厌其烦，一遍又一遍的帮我指正错误</p>
<h5 id="1-1-1-5-雪乡旅游"><a href="#1-1-1-5-雪乡旅游" class="headerlink" title="1.1 ~ 1.5 雪乡旅游"></a>1.1 ~ 1.5 雪乡旅游</h5><blockquote>
<p>体验很不错，用我老婆的话来讲就是比较值，记录一下费用</p>
<p>准备衣服： 1045，车费： 1385 （1254+131），门票： 580，跟团： 3648（ 2368 + 1280），吃的： 400，住： 371（ 128 + 143 ）</p>
<p>共计：7429</p>
</blockquote>
]]></content>
      <categories>
        <category>fit</category>
      </categories>
      <tags>
        <tag>健身</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 执行过程题</title>
    <url>//1491244432/</url>
    <content><![CDATA[<p>执行过程，就是要理解js的执行上下文</p>
<span id="more"></span>

<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person1</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person2</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person3</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="title class_">Person2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="title class_">Person3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person1</span>().<span class="property">name</span>, <span class="keyword">new</span> <span class="title class_">Person2</span>().<span class="property">name</span>, <span class="keyword">new</span> <span class="title class_">Person3</span>().<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一个：当构造函数里边有 name 属性的时候， 就不会去原型上找了<br>第二个：当构造函数里边没有 name 属性的时候，就会去原型上找<br>第三个：当构造函数有返回值的时候，new 操作的时候就会返回 return 里边的内容</p>
</blockquote>
<h3 id="执行上下文，this"><a href="#执行上下文，this" class="headerlink" title="执行上下文，this"></a>执行上下文，this</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, name); <span class="comment">// outer12121</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg1&#x27;</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>]); <span class="comment">// outer12121</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;outer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg2&#x27;</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>]); <span class="comment">// outer</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>, name); <span class="comment">// outer</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">inner</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>, <span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">//  global</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>, name); <span class="comment">// error</span></span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">&#x27;if-name&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>, name); <span class="comment">// glboal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">outer</span>(<span class="string">&#x27;outer12121&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里注意一个 log(4)那里， 会报错， 因为在 if{}这个上下文中提前使用了 let 定义的 name，let 定义的变量是没有变量提升的<br>当函数里边有跟参数同名的变量时， 会改变原来参数的值，同时也会改变 arguments, 因为 arguments 其实就是一个引用</p>
</blockquote>
<h3 id="this-指向的问题"><a href="#this-指向的问题" class="headerlink" title="this 指向的问题"></a>this 指向的问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">        fn &amp;&amp; <span class="title function_">fn</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">sayName</span>(sayName); <span class="comment">// global</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">getA</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getA</span>()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>箭头函数不会改变环境的 this， 所以这里的 this 不是 obj 对象里边的， 这个 obj.getA()就是一个方法，在全局下执行的一个方法，所以这里是 1</p>
</blockquote>
<h3 id="JS-执行机制的问题"><a href="#JS-执行机制的问题" class="headerlink" title="JS 执行机制的问题"></a>JS 执行机制的问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line"><span class="comment">// 1 7 3 4 2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一个很有意思的题目考了 js 事件轮循， js 执行机制，promise<br>log(5) 跟 log(6) 的时候， 这里因为上 log(4)那个 promise 并没有完成(resolve 跟 reject 都没有被调用)， 所以 5， 6 是不会打印出来的<br>js 执行的时候，是单线程的，通过事件轮循实现异步，每一次轮循都会把异步事件添加到队列中，这里的事件分为微任务(promise)跟宏任务(script, setTimeout, setInterval)，一个轮循结束之后，先执行微任务，再执行宏任务</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title function_">reject</span>()</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>


<h3 id="异步任务分析"><a href="#异步任务分析" class="headerlink" title="异步任务分析"></a>异步任务分析</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 1 4 3 2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>异步任务，当读取到异步任务的时候，将异步任务放置到Event table（事件表格）中，当满足某种条件或者说指定事情完成了（这里的是时间分别是达到了0ms和1000ms）当指定事件完成了才从Event table中注册到Event Queue（事件队列），当同步事件完成了，便从Event Queue中读取事件执。（因为3的事情先完成了，所以先从Event table中注册到Event Queue中，所以先执行的是3而不是在前面的2）</p>
</blockquote>
<h3 id="forEach-VS-for-amp-for-of"><a href="#forEach-VS-for-amp-for-of" class="headerlink" title="forEach VS for &amp; for of"></a><code>forEach</code> VS <code>for</code> &amp; <code>for of</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">square</span> = num =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num * num)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="keyword">async</span> x=&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">square</span>(x)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一秒后一次打印出 1， 4， 9</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>forEach</code> 是不能阻塞的，默认是请求并行发起</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">square</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num * num)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//   for (let i = 0; i &lt; list.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//     const res = await square(list[i])</span></span><br><span class="line"><span class="comment">//     console.log(res)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">square</span>(i)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res: &quot;</span>, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"><span class="comment">// 一秒之后打印1， 再过一秒打印4， 再过一秒打印9</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>for</code> 跟 <code>for of</code> 是会阻塞的</p>
</blockquote>
<h3 id="普通函数跟箭头函数的区别"><a href="#普通函数跟箭头函数的区别" class="headerlink" title="普通函数跟箭头函数的区别"></a>普通函数跟箭头函数的区别</h3><p>定义好的obj， 分别执行 obj.f1() obj.f2() new obj.f1() new obj.f2() 会发生什么</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">f1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">f2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">f1</span>()</span><br><span class="line">obj.<span class="title function_">f2</span>()</span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">f1</span>()</span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">f2</span>()</span><br></pre></td></tr></table></figure>
<p><strong>这是一个很能考察基本功的题目</strong></p>
<p>分析一下， 这里f1跟f2的区别就是，一个普通函数跟一个箭头函数的区别， 如果<strong>真的很</strong>了解<a href="/3671102502.html">头函数跟普通函数的区别</a>， 这里还是很简单的 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj.f1() 这个简单， 就是打印 obj</span><br><span class="line">obj.f2() 这里，this 肯定不是打印 obj， 但是也不是 window ！！！ 而是一个空对象</span><br><span class="line">new obj.f1() 这里 . 的执行优先级高于 new , 所以就是把 f1 这个函数当作一个构造函数， 去实例化了 f1, 所以， 这里的 this， 就是实例化之后的 f1 这个实例</span><br><span class="line">从上边就知道了，</span><br><span class="line">new obj.f2() 这个操作同样是去实例 f2 ，你是 f2 是一个箭头函数，他是不能当做构造函数的，所以这里就会报错</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>js算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS dom元素位置相关的内容</title>
    <url>//880232555/</url>
    <content><![CDATA[<p>offsetWidth: 返回元素的宽度（包括元素宽度 + 内边距 + 边框，不包括外边距）</p>
<span id="more"></span>

<p>offsetHeight: 返回元素的高度（包括元素高度 + 内边距 + 边框，不包括外边距）</p>
<p>clientWidth: 返回元素的宽度（包括元素宽度 + 内边距，不包括边框和外边距）</p>
<p>clientHeight: 返回元素的高度（包括元素高度 + 内边距，不包括边框和外边距）</p>
<p>style.width: 返回元素的宽度（包括元素宽度，不包括内边距、边框和外边距）</p>
<p>style.height: 返回元素的高度（包括元素高度，不包括内边距、边框和外边距）</p>
<p>scrollWidth: 返回元素的宽度（包括元素宽度 + 内边距 + 溢出尺寸，不包括边框和外边距），无溢出的情况，与clientWidth相同</p>
<p>scrollHeigh: 返回元素的高度（包括元素高度 + 内边距 + 溢出尺寸，不包括边框和外边距），无溢出的情况，与clientHeight相同</p>
<blockquote>
<ol>
<li>style.width 返回的是字符串，如28px，offsetWidth返回的是数值28；</li>
<li>style.width&#x2F;style.height与scrollWidth&#x2F;scrollHeight是可读写的属性，clientWidth&#x2F;clientHeight与offsetWidth&#x2F;offsetHeight是只读属性</li>
<li>style.width的值需要事先定义，否则取到的值为空。而且必须要定义在html里(内联样式)，如果定义在css里，style.height的值仍然为空，但元素偏移有效；而offsetWidth则仍能取到。</li>
</ol>
</blockquote>
<p>offsetTop: 返回元素的上外缘距离最近采用定位父元素内壁的距离，如果父元素中没有采用定位的，则是获取上外边缘距离文档内壁的距离。<br>offsetLeft: 此属性和offsetTop的原理是一样的，只不过方位不同，这里就不多介绍了。</p>
<blockquote>
<p>所谓的定位就是position属性值为relative、absolute或者fixed。返回值是一个整数，单位是像素。此属性是只读的。</p>
</blockquote>
<p>scrollLeft: 此属性可以获取或者设置对象的最左边到对象在当前窗口显示的范围内的左边的距离，也就是元素被滚动条向左拉动的距离。<br>scrollTop: 此属性可以获取或者设置对象的最顶部到对象在当前窗口显示的范围内的顶边的距离，也就是元素滚动条被向下拉动的距离。</p>
<blockquote>
<p>返回值是一个整数，单位是像素。此属性是可读写的。</p>
</blockquote>
<p>当鼠标事件发生时（不管是onclick，还是omousemove，onmouseover等）</p>
<p>clientX: 鼠标相对于浏览器（这里说的是浏览器的有效区域）左上角x轴的坐标；  不随滚动条滚动而改变</p>
<p>clientY: 鼠标相对于浏览器（这里说的是浏览器的有效区域）左上角y轴的坐标；  不随滚动条滚动而改变</p>
<p>pageX: 鼠标相对于浏览器（这里说的是浏览器的有效区域）左上角x轴的坐标；  随滚动条滚动而改变</p>
<p>pageY: 鼠标相对于浏览器（这里说的是浏览器的有效区域）左上角y轴的坐标；  随滚动条滚动而改变</p>
<p>screenX: 鼠标相对于显示器屏幕左上角x轴的坐标</p>
<p>screenY: 鼠标相对于显示器屏幕左上角y轴的坐标</p>
<p>offsetX: 鼠标相对于事件源左上角X轴的坐标</p>
<p>offsetY: 鼠标相对于事件源左上角Y轴的坐标</p>
<h3 id="相对于窗口的位置"><a href="#相对于窗口的位置" class="headerlink" title="相对于窗口的位置"></a>相对于窗口的位置</h3><p>很多时候， 我们都要去获取一个元素相对于窗口的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素的纵坐标（相对于窗口）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTop</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> offset = e.<span class="property">offsetTop</span>;</span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">offsetParent</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    offset += <span class="title function_">getTop</span>(e.<span class="property">offsetParent</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取元素的横坐标（相对于窗口）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLeft</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> offset = e.<span class="property">offsetLeft</span>;</span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">offsetParent</span> != <span class="literal">null</span>)&#123;</span><br><span class="line">    offset += <span class="title function_">getLeft</span>(e.<span class="property">offsetParent</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>JS new 一个对象的过程</title>
    <url>//3315289936/</url>
    <content><![CDATA[<p>首先让我回忆一下创建对象的三种方法</p>
<span id="more"></span>

<ol>
<li><p>单休模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span>  = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;angelee&quot;</span>,</span><br><span class="line">  <span class="attr">sayname</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ahui = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>);</span><br><span class="line">ahui.<span class="property">name</span> = <span class="string">&quot;ahui&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">sayname</span>()) <span class="comment">// ahui</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayname</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ahui&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">sayname</span>()); <span class="comment">// ahui</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6 class</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (name) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  sayname () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ahui&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">sayname</span>()); <span class="comment">// ahui</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里再回忆一下 class 的继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (name, age) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> angelee = <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&#x27;angelee&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angelee.<span class="title function_">sayname</span>()); <span class="comment">// angelee</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angelee.<span class="title function_">sayage</span>()); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>我们发现， 创建对象的时候，除了单例是通过 <code>Object.create()</code>创建对象，其它都是通过 <code>new</code> 操作实现的。</p>
<p>那<code>new</code> 到底做了什么呢 ？ </p>
<p>让我们以下边这个为例详细分析一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ahui&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="property">name</span>); <span class="comment">// ahui</span></span><br></pre></td></tr></table></figure>

<p>让我们试一下其它方法实现 <code>console.log(ahui.name)</code>也能正常输出 <code>ahui</code></p>
<ol>
<li><p>先创建一个空对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ahui = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置原型链，把 ahui 的<code>__proto__</code>成员指向 Person 函数对象的<code>prototype</code>成员对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ahui.<span class="property">__proto__</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把Person中的<code>this</code>指向ahui</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title class_">Person</span>.<span class="title function_">call</span>(ahui)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将初始化完毕的新对象地址，保存到等号左边的变量中。判断Person的返回值类型，如果是值类型，返回obj。如果是引用类型，就返回这个引用类型的对象</p>
</li>
</ol>
<h3 id="自己实现一个-new-方法"><a href="#自己实现一个-new-方法" class="headerlink" title="自己实现一个 new 方法"></a>自己实现一个 new 方法</h3><p>第一种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自己实现一个 new 方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 新建一个空对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// shift() 方法从数组中删除第一个元素，并返回该元素的值</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Constructor</span> = [].<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 建立继承关系(二者之间的关系)也就是把新对象的__proto__指向构造函数的 prototype</span></span><br><span class="line">  obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 改变 this 指向，并开始执行这个构造函数的内容</span></span><br><span class="line">  <span class="keyword">var</span> ret = <span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 返回创建的对象： 看一下构造函数的返回值，是对象还是一个基本数据类型?</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">&#x27;object&#x27;</span> ? ret : obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ahui&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="property">name</span>); <span class="comment">// ahui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> angeli = <span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&#x27;angeli&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli); <span class="comment">// angeli</span></span><br><span class="line"></span><br><span class="line">angeli.<span class="property">name</span> = <span class="string">&#x27;angeli new&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="property">name</span>); <span class="comment">// angeli new</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过分析原生的new方法可以看出，在new一个函数的时候，</span></span><br><span class="line"><span class="comment">// 会返回一个func同时在这个func里面会返回一个对象Object，</span></span><br><span class="line"><span class="comment">// 这个对象包含父类func的属性以及隐藏的__proto__</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">New</span>(<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="comment">//返回一个func</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新建一个对象， 并且把新对象的 __proto__ 指向构造函数的 prototype 属性</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;<span class="string">&quot;__proto__&quot;</span>: f.<span class="property"><span class="keyword">prototype</span></span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变 this 指向, 并执行原来构造函数里边的内容</span></span><br><span class="line">    f.<span class="title function_">apply</span>(o, <span class="variable language_">arguments</span>); <span class="comment">// 继承父类的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> o; <span class="comment">//返回一个Object</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ahui = <span class="title class_">New</span>(<span class="title class_">Person</span>)(<span class="string">&#x27;ahui&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="property">name</span>) <span class="comment">// ahui</span></span><br></pre></td></tr></table></figure>

<p>自测一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">New</span>(<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> o = &#123; <span class="string">&quot;__proto__&quot;</span>: f.<span class="property"><span class="keyword">prototype</span></span> &#125;</span><br><span class="line"></span><br><span class="line">    f.<span class="title function_">apply</span>(o, <span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">&quot;object&quot;</span> ? o : f</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayname</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ahui = <span class="title class_">New</span>(<span class="title class_">Person</span>)(<span class="string">&#x27;ahui&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="property">name</span>) <span class="comment">// ahui</span></span><br><span class="line">ahui.<span class="title function_">sayname</span>() <span class="comment">// ahui</span></span><br></pre></td></tr></table></figure>

<p>关于 <code>arguments</code> 可以参考这篇文章： <a href="/1882318475.html">JS 函数实参转换为数组</a></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JS prototype</title>
    <url>//prototype/</url>
    <content><![CDATA[<p>在典型的面向对象的语言中，如java，都存在类（class）的概念，类就是对象的模板，对象就是类的实例。但是在Javascript语言体系中，是不存在类（Class）的概念的，javascript中不是基于‘类的’，而是通过构造函数（constructor）和原型链（prototype chains）实现的。</p>
<span id="more"></span>

<p>在ES6中提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让原型对象的写法更加清晰、更像面向对象编程的语法而已。</p>
<h3 id="构造函数-constructor-的简单介绍"><a href="#构造函数-constructor-的简单介绍" class="headerlink" title="构造函数(constructor)的简单介绍"></a>构造函数(constructor)的简单介绍</h3><p>　　所谓构造函数，就是提供了一个生成对象的模板并描述对象的基本结构的函数。一个构造函数，可以生成多个对象，每个对象都有相同的结构。总的来说，构造函数就是对象的模板，对象就是构造函数的实例。<br>构造函数的特点有：<br>　　a：构造函数的函数名首字母必须大写。<br>　　b：内部使用this对象，来指向将要生成的对象实例。<br>　　c：使用new操作符来调用构造函数，并返回对象实例。</p>
<p>看一个最简单的一个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> =  name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boy = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Ahui&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">name</span>); <span class="comment">// Ahui</span></span><br></pre></td></tr></table></figure>

<h3 id="构造函数的缺点"><a href="#构造函数的缺点" class="headerlink" title="构造函数的缺点"></a>构造函数的缺点</h3><p>　　所有的实例对象都可以继承构造函数中的属性和方法。但是，同一个对象实例之间，无法共享属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, height</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hobby</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;watching movies&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boy = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;keith&#x27;</span>,<span class="number">180</span>);</span><br><span class="line"><span class="keyword">var</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;rascal&#x27;</span>,<span class="number">168</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">name</span>); <span class="comment">//&#x27;keith&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="property">name</span>); <span class="comment">//&#x27;rascal&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">hobby</span> === girl.<span class="property">hobby</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>　　上面代码中，一个构造函数Person生成了两个对象实例boy和girl，并且有两个属性和一个方法。但是，它们的hobby方法是不一样的。也就是说，每当你使用new来调用构造函数放回一个对象实例的时候，都会创建一个hobby方法。这既没有必要，又浪费资源，因为所有hobby方法都是统一的行为，完全可以被两个对象实例共享。</p>
<p>　　所以，构造函数的缺点就是： <strong>同一个构造函数的对象实例之间无法共享属性或方法</strong></p>
<h3 id="prototype属性的作用"><a href="#prototype属性的作用" class="headerlink" title="prototype属性的作用"></a>prototype属性的作用</h3><p>　　为了解决构造函数的对象实例之间无法共享属性的缺点，js提供了prototype属性。</p>
<p>　　js中每个数据类型都是对象（除了null和undefined），而每个对象都继承自另外一个对象，后者称为“原型”（prototype）对象，只有null除外，它没有自己的原型对象。</p>
<p>　　<strong>原型对象上的所有属性和方法，都会被对象实例所共享。</strong></p>
<p>　　通过构造函数生成对象实例时，会将对象实例的原型指向构造函数的prototype属性。每一个构造函数都有一个prototype属性，这个属性就是对象实例的原型对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, height</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayname</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boy = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Ahui&#x27;</span>, <span class="number">183</span>);</span><br><span class="line"><span class="keyword">var</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Ajiao&#x27;</span>, <span class="number">168</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="title function_">sayname</span>()); <span class="comment">// Ahui</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="title function_">sayname</span>()); <span class="comment">// Ajiao</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">sayname</span> === girl.<span class="property">sayname</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>　　上面代码中，如果将hobby方法放在原型对象上，那么两个实例对象都共享着同一个方法。我希望大家都能理解的是，对于构造函数来说，prototype是作为构造函数的属性；对于对象实例来说，prototype是对象实例的原型对象。所以prototype即是属性，又是对象。</p>
<p>　　原型对象的属性不是对象实例的属性。对象实例的属性是继承自构造函数定义的属性，因为构造函数内部有一个this关键字来指向将要生成的对象实例。对象实例的属性，其实就是构造函数内部定义的属性。只要修改原型对象上的属性和方法，变动就会立刻体现在所有对象实例上。</p>
<p>　　上面代码中，当修改了原型对象的hobby方法之后，两个对象实例都发生了变化。这是因为对象实例其实是没有hobby方法，都是读取原型对象的hobby方法。也就是说，当某个对象实例没有该属性和方法时，就会到原型对象上去查找。如果实例对象自身有某个属性或方法，就不会去原型对象上查找。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, height</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hobby</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;swimming&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Ahui&#x27;</span>, <span class="number">183</span>);</span><br><span class="line"><span class="keyword">var</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Ajiao&#x27;</span>, <span class="number">168</span>);</span><br><span class="line">boy.<span class="property">hobby</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;play basketball&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="title function_">hobby</span>()); <span class="comment">//&#x27;play basketball&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="title function_">hobby</span>()); <span class="comment">//&#x27;swimming&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">hobby</span> === girl.<span class="property">hobby</span>); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>　　上面代码中，boy对象实例的hobby方法修改时，就不会在继承原型对象上的hobby方法了。不过girl仍然会继承原型对象的方法。这个时候boy.hobby与girl.hobby就不相等了</p>
<p>　　总结一下：<br>　　a：原型对象的作用，就是定义所有对象实例所共享的属性和方法。<br>　　b：prototype，对于构造函数来说，它是一个属性；对于对象实例来说，它是一个原型对象。</p>
<h3 id="原型链（prototype-chains）"><a href="#原型链（prototype-chains）" class="headerlink" title="原型链（prototype chains）"></a>原型链（prototype chains）</h3><p>　　对象的属性和方法，有可能是定义在自身，也有可能是定义在它的原型对象。由于原型对象本身对于对象实例来说也是对象，它也有自己的原型，所以形成了一条原型链（prototype chain）。比如，a对象是b对象的原型，b对象是c对象的原型，以此类推。所有一切的对象的原型顶端，都是Object.prototype，即Object构造函数的prototype属性指向的那个对象。</p>
<p>　　当然，Object.prototype对象也有自己的原型对象，那就是没有任何属性和方法的null对象，而null对象没有自己的原型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(boy)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>　　原型链（prototype chain）的特点有：<br>　　　　a：读取对象的某个属性时，JavaScript引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。如果直到最顶层的Object.prototype还是找不到，则返回undefined。<br>　　　　b：如果对象自身和它的原型，都定义了一个同名属性，那么优先读取对象自身的属性，这叫做“覆盖”（overiding）。<br>　　　　c：一级级向上在原型链寻找某个属性，对性能是有影响的。所寻找的属性在越上层的原型对象，对性能的影响越大。如果寻找某个不存在的属性，将会遍历整个原型链。</p>
<p>　　看概念可能比较晦涩，我们来看一个例子。但是理解了概念真的很重要。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>()); <span class="comment">//</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">valueOf</span>()); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，定了一个数组arr，数组里面有三个元素。我们并没有给数组添加任何属性和方法，可是却在调用length，join()，valueOf()时，却不会报错。</p>
<p>　　length属性是继承自Array.prototype的，属于原型对象上的一个属性。join方法也是继承自Array.prototype的，属于原型对象上的一个方法。这两个方法是所有数组所共享的。当实例对象上没有这个length属性时，就会去原型对象查找。</p>
<p>　　valueOf方法是继承自Object.prototype的。首先，arr数组是没有valueOf方法的，所以就到原型对象Array.prototype查找。然后，发现Array.prototype对象上没有valueOf方法。最后，再到它的原型对象Object.prototype查找。</p>
<p>　　来看看Array.prototype对象和Object.prototype对象分别有什么属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>))</span><br><span class="line"><span class="comment">//[&quot;length&quot;, &quot;toSource&quot;, &quot;toString&quot;, &quot;toLocaleString&quot;, &quot;join&quot;, &quot;reverse&quot;, &quot;sort&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;shift&quot;, &quot;unshift&quot;, &quot;splice&quot;, &quot;concat&quot;, &quot;slice&quot;, &quot;lastIndexOf&quot;, &quot;indexOf&quot;, &quot;forEach&quot;, &quot;map&quot;, &quot;filter&quot;, &quot;reduce&quot;, &quot;reduceRight&quot;, &quot;some&quot;, &quot;every&quot;, &quot;find&quot;, &quot;findIndex&quot;, &quot;copyWithin&quot;, &quot;fill&quot;, &quot;entries&quot;, &quot;keys&quot;, &quot;values&quot;, &quot;includes&quot;, &quot;constructor&quot;, &quot;$set&quot;, &quot;$remove&quot;]</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>))</span><br><span class="line"> <span class="comment">// [&quot;toSource&quot;, &quot;toString&quot;, &quot;toLocaleString&quot;, &quot;valueOf&quot;, &quot;watch&quot;, &quot;unwatch&quot;, &quot;hasOwnProperty&quot;, &quot;isPrototypeOf&quot;, &quot;propertyIsEnumerable&quot;, &quot;__defineGetter__&quot;, &quot;__defineSetter__&quot;, &quot;__lookupGetter__&quot;, &quot;__lookupSetter__&quot;, &quot;__proto__&quot;, &quot;constructor&quot;]</span></span><br></pre></td></tr></table></figure>
<p>　　我相信，大家看到这里，对prototype还是似懂非懂的。这很正常，毕竟是js中比较重要又比较抽象的概念,不可能那么快就掌握，再啃多几篇，说不定掌握其精髓。在某乎上，有一个活生生的实例，可能也是大家会遇到的问题。可以看看 js构造函数和原型对象。</p>
<h3 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h3><p>　　prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数。</p>
<p>　　要注意的是，prototype是构造函数的属性，而constructor则是构造函数的prototype属性所指向的那个对象，也就是原型对象的属性。注意不要混淆。</p>
<p>　　由于constructor属性是定义在原型（prototype）对象上面，意味着可以被所有实例对象继承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span>); <span class="comment">//A()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span> === A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，a是构造函数A的实例对象，但是a自身没有contructor属性，该属性其实是读取原型链上面的A.prototype.constructor属性。</p>
<h4 id="constructor属性的作用"><a href="#constructor属性的作用" class="headerlink" title="constructor属性的作用"></a>constructor属性的作用</h4><p>　　　a：分辨原型对象到底属于哪个构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span> === A) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span> === <span class="title class_">Array</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>上面代码表示，使用constructor属性，确定实例对象a的构造函数是A，而不是Array。</p>
<p>　　　　b：从实例新建另一个实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> a.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> A); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，a是构造函数A的实例对象，可以从a.constructor间接调用构造函数。</p>
<p>　　　　c：调用自身的构造函数成为可能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">this</span>.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　　　d：提供了一种从构造函数继承另外一种构造函数的模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Son</span>.<span class="property">height</span>.<span class="property">constructor</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property">height</span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br></pre></td></tr></table></figure>
<p>上面代码中，Father和Son都是构造函数，在Son内部的this上调用Father，就会形成Son继承Father的效果。</p>
<p>　　　　e：由于constructor属性是一种原型对象和构造函数的关系，所以在修改原型对象的时候，一定要注意constructor的指向问题。</p>
<p>　　　　解决方法有两种，要么将constructor属性指向原来的构造函数，要么只在原型对象上添加属性和方法，避免instanceof失真。</p>
<h3 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h3><p>　　instanceof运算符返回一个布尔值，表示指定对象是否为某个构造函数的实例。</p>
<p>　　因为instanceof对整个原型链上的对象都有效，所以同一个实例对象，可能会对多个构造函数都返回true。</p>
<p>　注意，instanceof对象只能用于复杂数据类型（数组，对象等），不能用于简单数据类型（布尔值，数字，字符串等）。</p>
<p>　　此外，null和undefined都不是对象，所以instanceof 总是返回false。</p>
<p>　　利用instanceof运算符，还可以巧妙地解决，调用构造函数时，忘了加new命令的问题。</p>
<p>　　上面代码中，使用了instanceof运算符来判断函数体内的this关键字是否指向构造函数Keith的实例，如果不是，就表明忘记加new命令，此时构造函数会返回一个对象实例，避免出现意想不到的结果。</p>
<p><a href="https://www.cnblogs.com/douyage/p/8630529.html">原文出处&gt;&gt;&gt;</a></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 函数实参转换为数组</title>
    <url>//1882318475/</url>
    <content><![CDATA[<p>实际参数在函数中我们可以使用 arguments 对象获得 （注：形参可通过 arguments.callee 获得），虽然 arguments 对象与数组形似，但仍不是真正意义上的数组。</p>
<span id="more"></span>

<h3 id="0-…arguments"><a href="#0-…arguments" class="headerlink" title="0: […arguments]"></a>0: […arguments]</h3><p>这个方法其实是用来代替下边方法一的</p>
<h3 id="一：通过-Array-prototype属性调用-slice-方法"><a href="#一：通过-Array-prototype属性调用-slice-方法" class="headerlink" title="一：通过 Array.prototype属性调用 slice 方法"></a>一：通过 <code>Array.prototype</code>属性调用 slice 方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br></pre></td></tr></table></figure>

<p>Array 本身是没有 slice 方法，它的方法在 Array.prototype中，而我们在调用 slice 方法的时候，如果在 Array 本身没有找到 slice 方法的话，会通过它的原型链往上查找。</p>
<h3 id="二-通过调用-的slice方法"><a href="#二-通过调用-的slice方法" class="headerlink" title="二. 通过调用[]的slice方法"></a>二. 通过调用[]的slice方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> args = [].<span class="property">sclice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>注意这里是[]， 不是 Array,为什么呢？ 先看下边</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [];  <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Array</span>;   <span class="comment">// Funcion</span></span><br><span class="line"></span><br><span class="line">[].<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>从上面很清楚的知识 <code>Array</code> 是一个构造函数，而 [] 是 Array 的实例， 等价于 <code>new Array()</code>,<strong>因为实例的<code>__proto__</code> 指向该实例的构造函数的<code>prototype</code></strong>;</p>
<p>但是这里 <code>[] === new Array // false</code> 是 <code>false</code>， 因为对象是不能直接比较的</p>
<h3 id="三-通过遍历arguments-返回数组"><a href="#三-通过遍历arguments-返回数组" class="headerlink" title="三. 通过遍历arguments,返回数组"></a>三. 通过遍历arguments,返回数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toArray</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> args = []; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123; </span><br><span class="line">    args.<span class="title function_">push</span>(<span class="variable language_">arguments</span>[i]); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 常见手撕代码题</title>
    <url>//979881800/</url>
    <content><![CDATA[<p>这种题目，除了多练，没别的方法</p>
<span id="more"></span>

<h3 id="1-实现一个类似-emiter-的类"><a href="#1-实现一个类似-emiter-的类" class="headerlink" title="1. 实现一个类似 emiter 的类"></a>1. 实现一个类似 emiter 的类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmiter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emiterMap</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">emiterMap</span>[event]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">emiterMap</span>[event].<span class="title function_">push</span>(callback)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">emiterMap</span>[event] = [callback]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [event, ...args] = [...<span class="variable language_">arguments</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emiterMap</span>[event] &amp;&amp; <span class="variable language_">this</span>.<span class="property">emiterMap</span>[event].<span class="title function_">forEach</span>(<span class="function">(<span class="params">callback</span>) =&gt;</span> <span class="title function_">callback</span>(...args))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emiterMap</span>[event] = <span class="variable language_">this</span>.<span class="property">emiterMap</span>[event].<span class="title function_">filter</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> cb != callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">once</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">callback</span>(args)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(event, fn)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(event, fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> em = <span class="keyword">new</span> <span class="title class_">EventEmiter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> work1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;work1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> work2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;work2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> once1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;once1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">em.<span class="title function_">on</span>(<span class="string">&#x27;work1&#x27;</span>, work1)</span><br><span class="line">em.<span class="title function_">on</span>(<span class="string">&#x27;work2&#x27;</span>, work2)</span><br><span class="line"></span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;work1&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;work1&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;work2&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;work2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">em.<span class="title function_">once</span>(<span class="string">&#x27;once&#x27;</span>, once1)</span><br><span class="line"></span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;once&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;once&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;once&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;once&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;once&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;once&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> day = <span class="number">18</span></span><br><span class="line">em.<span class="title function_">on</span>(<span class="string">&#x27;addday&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> [...args] = [...<span class="variable language_">arguments</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in add arg: &#x27;</span>, args[<span class="number">0</span>], args[<span class="number">1</span>])</span><br><span class="line">  day = day + <span class="title class_">Number</span>(args[<span class="number">0</span>]) + <span class="title class_">Number</span>(args[<span class="number">1</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add day: &#x27;</span>, day)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">em.<span class="title function_">on</span>(<span class="string">&#x27;subday&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  day = day - <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">em.<span class="title function_">on</span>(<span class="string">&#x27;logday&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(day)</span><br><span class="line">&#125;)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;addday&#x27;</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;subday&#x27;</span>)</span><br><span class="line">em.<span class="title function_">emit</span>(<span class="string">&#x27;logday&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-函数柯里化"><a href="#2-函数柯里化" class="headerlink" title="2. 函数柯里化"></a>2. 函数柯里化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用闭包不会释放函数里边的变量特性，把新的参数再push到原来的参数里边</span></span><br><span class="line">  <span class="keyword">var</span> _addr = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _args.<span class="title function_">push</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> _addr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用每次输出值的时候， 会自动调toString的方法， 在这里重写一下toString</span></span><br><span class="line">  _addr.<span class="property">toString</span> = <span class="function">() =&gt;</span> _args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _addr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3. 快速排序"></a>3. 快速排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pivotIdx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> pivot = arr.<span class="title function_">splice</span>(pivotIdx, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> left = []</span><br><span class="line">  <span class="keyword">var</span> right = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr[index]</span><br><span class="line">    <span class="keyword">if</span> (element &lt; pivot) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([pivot], <span class="title function_">quickSort</span>(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>]))</span><br></pre></td></tr></table></figure>

<h3 id="4-实现一个-calc-方法"><a href="#4-实现一个-calc-方法" class="headerlink" title="4. 实现一个 calc 方法"></a>4. 实现一个 calc 方法</h3><p>可以将输入的数拆解为尽可能多的乘数，所有数相乘等于输入数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; num 乘积</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Array</span>&#125; 拆解后的乘数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function calc(num) &#123;</span></span><br><span class="line"><span class="comment">//     function calc(num) &#123;</span></span><br><span class="line"><span class="comment">//         const arr = [];</span></span><br><span class="line"><span class="comment">//         var i = 2;</span></span><br><span class="line"><span class="comment">//         while (i &lt;= num) &#123;</span></span><br><span class="line"><span class="comment">//             if (num % i === 0) &#123;</span></span><br><span class="line"><span class="comment">//                 arr.push(i);</span></span><br><span class="line"><span class="comment">//                 num = num / i;</span></span><br><span class="line"><span class="comment">//             &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                 i++;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return arr;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(num); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calc</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> list = []</span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i) &amp;&amp; n % i === <span class="number">0</span>) &#123;</span><br><span class="line">        list.<span class="title function_">push</span>(i)</span><br><span class="line">        n /= i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">2</span>))</span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">8</span>))</span><br><span class="line"><span class="comment">// [2, 2, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">24</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 2, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calc</span>(<span class="number">30</span>))</span><br><span class="line"><span class="comment">// [2, 3, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="5-多维数组扁平化"><a href="#5-多维数组扁平化" class="headerlink" title="5. 多维数组扁平化"></a>5. 多维数组扁平化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatDeep</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">acc, curr</span>) =&gt;</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(curr) ? acc.<span class="title function_">concat</span>(<span class="title function_">flatDeep</span>(curr)) : acc.<span class="title function_">concat</span>(curr)),</span><br><span class="line">    []</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>], <span class="number">9</span>], <span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatDeep</span>(a))</span><br></pre></td></tr></table></figure>

<h3 id="6-击鼓传花"><a href="#6-击鼓传花" class="headerlink" title="6. 击鼓传花"></a>6. 击鼓传花</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> players = [</span><br><span class="line">  <span class="string">&#x27;n1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n3&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n4&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n5&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n6&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n7&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n8&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n9&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n10&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n11&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n12&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n13&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n14&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;n15&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queueList</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addItem</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queueList</span>.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">delItem</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queueList</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queueList</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findPepole</span>(<span class="params">arr, num</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> myQueue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr[i]</span><br><span class="line">    myQueue.<span class="title function_">addItem</span>(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> eliminated = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">while</span> (myQueue.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里相当于把你设定的长度减去一个放到了这个队列的后边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      myQueue.<span class="title function_">addItem</span>(myQueue.<span class="title function_">delItem</span>()) <span class="comment">//数组出队然后入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里就是把设定长度的那个位置的那一个删除了</span></span><br><span class="line">    eliminated = myQueue.<span class="title function_">delItem</span>()</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(eliminated + <span class="string">&#x27; 在击鼓传花游戏中被淘汰。&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> myQueue.<span class="property">queueList</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> victor = <span class="title function_">findPepole</span>(players, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`胜利者是： <span class="subst">$&#123;victor&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要思路就是， 一个一个删，如果删除的那一个不是指定位置的那一个，就放到最后边，如果是， 就直接删除，直到数组只有一个了</p>
</blockquote>
<h3 id="7-两个数组求交集"><a href="#7-两个数组求交集" class="headerlink" title="7. 两个数组求交集"></a>7. 两个数组求交集</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> list2 = [<span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">intersection</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tempList = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr1[i]</span><br><span class="line">    <span class="keyword">if</span> (arr2.<span class="title function_">includes</span>(element)) &#123;</span><br><span class="line">      tempList.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return arr1.filter(item =&gt; arr2.includes(item));</span></span><br><span class="line">  <span class="comment">// return arr1.filter(item =&gt; new Set(arr2).has(item));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">intersection</span>(list1, list2))</span><br></pre></td></tr></table></figure>

<h3 id="8-求字符串数组的最长公共前缀"><a href="#8-求字符串数组的最长公共前缀" class="headerlink" title="8. 求字符串数组的最长公共前缀"></a>8. 求字符串数组的最长公共前缀</h3><p>比如输入: [“flower”,”flow”,”flight”]，输出: “fl”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> longestCommonPrefix = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (strs.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (strs.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> tempStr = strs[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (; j &lt; strs.<span class="property">length</span> &amp;&amp; j &lt; tempStr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tempStr.<span class="title function_">charAt</span>(j) !== strs[i].<span class="title function_">charAt</span>(j)) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tempStr = tempStr.<span class="title function_">substring</span>(<span class="number">0</span>, j)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tempStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> commonStr = <span class="title function_">longestCommonPrefix</span>([<span class="string">&#x27;flower&#x27;</span>, <span class="string">&#x27;flow&#x27;</span>, <span class="string">&#x27;flight&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(commonStr)</span><br></pre></td></tr></table></figure>

<h3 id="9-合并两个数组"><a href="#9-合并两个数组" class="headerlink" title="9. 合并两个数组"></a>9. 合并两个数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 合并两个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// concat</span></span><br><span class="line"><span class="keyword">let</span> c = a.<span class="title function_">concat</span>(b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c, a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// // apply</span></span><br><span class="line"><span class="comment">// Array.prototype.push.apply(a, b)</span></span><br><span class="line"><span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; b.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//     a.push(b[i])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // ...</span></span><br><span class="line"><span class="comment">// c =[...a, ...b]</span></span><br><span class="line"><span class="comment">// console.log(c);</span></span><br></pre></td></tr></table></figure>

<h3 id="10-实现一个-PromiseLinit"><a href="#10-实现一个-PromiseLinit" class="headerlink" title="10. 实现一个 PromiseLinit"></a>10. 实现一个 PromiseLinit</h3><p>根据 urls 数组内的 url 地址进行并发网络请求，最大并发数 maxNumber,当所有请求完毕后调用 callback 函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;ok &#x27;</span> + url)</span><br><span class="line">    &#125;, <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>) + <span class="number">600</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PromiseLinit</span>(<span class="params">urls, limit, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">let</span> urlsLen = urls.<span class="property">length</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; limit) &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = i++</span><br><span class="line">    <span class="keyword">if</span> (current &gt;= urlsLen) &#123;</span><br><span class="line">      result.<span class="property">length</span> === urlsLen &amp;&amp; <span class="title function_">callback</span>(result)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;current + <span class="number">1</span>&#125;</span>开始`</span>)</span><br><span class="line">    <span class="title function_">fetch</span>(urls[current])</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;current + <span class="number">1</span>&#125;</span>成功结束`</span>)</span><br><span class="line">        result.<span class="title function_">push</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (current &lt; urlsLen) &#123;</span><br><span class="line">          <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;current + <span class="number">1</span>&#125;</span>失败结束`</span>)</span><br><span class="line">        result.<span class="title function_">push</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (current &lt; urlsLen) &#123;</span><br><span class="line">          <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="title class_">PromiseLinit</span>(urls, <span class="number">4</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success: &#x27;</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="11-求-left，-right-最终宽度"><a href="#11-求-left，-right-最终宽度" class="headerlink" title="11. 求 left， right 最终宽度"></a>11. 求 left， right 最终宽度</h3><h4 id="11-1-算收缩"><a href="#11-1-算收缩" class="headerlink" title="11.1 算收缩"></a>11.1 算收缩</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">2</span> <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>子项的收缩宽度 &#x3D; 子项收缩比例 X 溢出宽度<br>子项收缩比例 &#x3D; 子项宽度 X 子项收缩系数 &#x2F; 所有子项的(宽度 X 系数)之和</p>
</blockquote>
<p>对应题目：</p>
<p>子项溢出空间的宽度为 $500 + 400 - 600 &#x3D; 300$<br>left 收缩比例：$(500 × 2) ÷ (500 × 2 + 400 × 1) ≈ 0.7143$<br>right 收缩比例：$(400 × 1) ÷ (500 × 2 + 400 × 1) ≈ 0.2857$<br>对应的：</p>
<p>left 收缩宽度：$0.7143 × 300 &#x3D; 214.29$<br>right 收缩宽度：$0.2857 × 300 &#x3D; 85.71$<br>所以：</p>
<p>left 最终宽度：$500 - 214.29 &#x3D; 285.71$<br>right 最终宽度：$400 - 85.71 &#x3D; 314.29$</p>
<h4 id="11-2-算扩展"><a href="#11-2-算扩展" class="headerlink" title="11.2 算扩展"></a>11.2 算扩展</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">2</span> <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">1</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>left 最终宽度：300 + (1&#x2F;3) _ (600 - (300 + 200)) &#x3D; 333.33<br>right 最终宽度：200 + (2&#x2F;3) _ (600 - (300 + 200)) &#x3D; 266.66</p>
<h3 id="12-实现一个-promise-all"><a href="#12-实现一个-promise-all" class="headerlink" title="12. 实现一个 promise.all"></a>12. 实现一个 promise.all</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 参数： 数组， 数项是promise返回执行结果， 如果不是， 直接返回</span></span><br><span class="line"><span class="comment">// 2. 返回值： Promise 对象</span></span><br><span class="line"><span class="comment">// 3. 如果数组里边有一个 Promise rejected 了， 直接返回 rejected</span></span><br><span class="line"><span class="comment">// 4. 当全部执行成功后， 返回一个有所有执行结果的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPromise</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    obj &amp;&amp; (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> obj === <span class="string">&#x27;function&#x27;</span>) &amp;&amp; <span class="keyword">typeof</span> obj.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myPromiseAll</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> requests = []</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isPromise</span>(item)) &#123;</span><br><span class="line">        item</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            requests[idx] = result</span><br><span class="line">            <span class="keyword">if</span> (requests.<span class="property">length</span> === arr.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(requests)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requests[idx] = item</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="number">1337</span></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">myPromiseAll</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values) <span class="comment">// [3, 1337, &quot;foo&quot;]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="13-字符串排序"><a href="#13-字符串排序" class="headerlink" title="13. 字符串排序"></a>13. 字符串排序</h3><p>在一个字符串数组中有红、黄、蓝三种颜色的球，且个数不相等、顺序不一致，请为该数组排序。使得排序后数组中球的顺序为:黄、红、蓝。</p>
<p>例如：红蓝蓝黄红黄蓝红红黄红，排序后为：黄黄黄红红红红红蓝蓝蓝。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;红蓝蓝黄红黄蓝红红黄红&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;红: <span class="number">1</span>, 蓝: <span class="number">2</span>, 黄: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = st1</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[a] - obj[b]</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)</span><br></pre></td></tr></table></figure>

<h3 id="14-数组转树，并去重"><a href="#14-数组转树，并去重" class="headerlink" title="14. 数组转树，并去重"></a>14. 数组转树，并去重</h3><p>如何将 [{id: 1}, {id: 2, pId: 1}, …] 的重复数组（有重复数据）转成树形结构的数组 [{id: 1, child: [{id: 2, pId: 1}]}, …] （需要去重）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">pId</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">pId</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">4</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">pId</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">pId</span>: <span class="number">4</span>&#125;]</span><br><span class="line"><span class="keyword">const</span> map = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, item, curIdx</span>) =&gt;</span> ((res[item.<span class="property">id</span>] = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, item)), res), &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(map)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">pId</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = map[item.<span class="property">pId</span>]</span><br><span class="line">    parent.<span class="property">child</span> = parent.<span class="property">child</span> || []</span><br><span class="line">    parent.<span class="property">child</span>.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res: &#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res))</span><br><span class="line"><span class="comment">// [&#123;&quot;id&quot;:1,&quot;child&quot;:[&#123;&quot;id&quot;:2,&quot;pId&quot;:1,&quot;child&quot;:[&#123;&quot;id&quot;:3,&quot;pId&quot;:2&#125;]&#125;]&#125;,&#123;&quot;id&quot;:4,&quot;child&quot;:[&#123;&quot;id&quot;:5,&quot;pId&quot;:4&#125;]&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function arrayToTree(tree, pid = 0) &#123;</span></span><br><span class="line"><span class="comment">//   return tree.filter(item =&gt; item.pid === pid).map(listItem =&gt; (&#123;</span></span><br><span class="line"><span class="comment">//     ...listItem,</span></span><br><span class="line"><span class="comment">//     child: arrayToTree(tree, listItem.id)</span></span><br><span class="line"><span class="comment">//   &#125;))</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(arrayToTree(data));</span></span><br></pre></td></tr></table></figure>

<h3 id="15-树转数组"><a href="#15-树转数组" class="headerlink" title="15. 树转数组"></a>15. 树转数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pid</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;no.1&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;no.2&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">pid</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;no.6&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="number">7</span>, <span class="attr">pid</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;no.7&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="number">8</span>, <span class="attr">pid</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;no.8&#x27;</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;no.3&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="number">9</span>, <span class="attr">pid</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;no.9&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="number">10</span>, <span class="attr">pid</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;no.10&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="number">11</span>, <span class="attr">pid</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;no.11&#x27;</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">pid</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;no.4&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="number">12</span>, <span class="attr">pid</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;no.12&#x27;</span>&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">13</span>,</span><br><span class="line">            <span class="attr">pid</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;no.13&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;<span class="attr">id</span>: <span class="number">14</span>, <span class="attr">pid</span>: <span class="number">13</span>, <span class="attr">name</span>: <span class="string">&#x27;no.14&#x27;</span>&#125;],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">pid</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;no.5&#x27;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">treeToArray</span>(<span class="params">list, newArray = []</span>) &#123;</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tempItem = item.<span class="property">children</span></span><br><span class="line">      <span class="keyword">delete</span> item.<span class="property">children</span></span><br><span class="line">      newArray.<span class="title function_">push</span>(item)</span><br><span class="line">      <span class="keyword">if</span> (tempItem.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">treeToArray</span>(tempItem, newArray)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    newArray.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newArray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;newArray: &#x27;</span>, <span class="title function_">treeToArray</span>(data))</span><br></pre></td></tr></table></figure>

<h3 id="16-斐波那契数列"><a href="#16-斐波那契数列" class="headerlink" title="16. 斐波那契数列"></a>16. 斐波那契数列</h3><p>给一个 n 得到一个斐波那契数列数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci = (<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (cache[n]) <span class="keyword">return</span> cache[n]</span><br><span class="line">    <span class="keyword">return</span> (cache[n] = <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFibArray</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(<span class="title function_">fibonacci</span>(i))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t1 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFibArray</span>(<span class="number">33</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t2 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t2 - t1)</span><br><span class="line"><span class="comment">// 这里的时间是方便对比加上cache跟没加cache里的区别</span></span><br><span class="line"><span class="comment">// 加 catch 1</span></span><br><span class="line"><span class="comment">// 不加catch 2048</span></span><br></pre></td></tr></table></figure>

<h3 id="17-深拷贝"><a href="#17-深拷贝" class="headerlink" title="17. 深拷贝"></a>17. 深拷贝</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          temp[key] = <span class="title function_">deepClone</span>(obj[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          temp[key] = obj[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ahui = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ahui&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">  <span class="attr">city</span>: [<span class="string">&#x27;泰国&#x27;</span>, <span class="string">&#x27;新加坡&#x27;</span>, <span class="string">&#x27;印度尼西亚&#x27;</span>],</span><br><span class="line">  <span class="attr">sayname</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">saycity</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">city</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> angeli = <span class="title function_">deepClone</span>(ahui)</span><br><span class="line"></span><br><span class="line">angeli.<span class="property">name</span> = <span class="string">&#x27;angeli&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">sayname</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="title function_">sayname</span>())</span><br><span class="line"></span><br><span class="line">angeli.<span class="property">city</span> = [<span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;娄底&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">saycity</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="title function_">saycity</span>())</span><br></pre></td></tr></table></figure>

<h3 id="数组求子集"><a href="#数组求子集" class="headerlink" title="数组求子集"></a>数组求子集</h3><p><code>[1, 2, 3]</code> 的所有子集是： <code>[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">allSubsets</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [[]]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> tempRes = res.<span class="title function_">map</span>(<span class="function"><span class="params">subset</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> item = subset.<span class="title function_">concat</span>([])</span><br><span class="line">      item.<span class="title function_">push</span>(a[i])</span><br><span class="line">      <span class="keyword">return</span> item</span><br><span class="line">    &#125;)</span><br><span class="line">    res = res.<span class="title function_">concat</span>(tempRes)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">allSubsets</span>(arr));</span><br></pre></td></tr></table></figure>

<h3 id="二分法查数"><a href="#二分法查数" class="headerlink" title="二分法查数"></a>二分法查数</h3>]]></content>
      <tags>
        <tag>js</tag>
        <tag>js 算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS typeof instanceof 你应该知道这么多</title>
    <url>//3369490582/</url>
    <content><![CDATA[<h3 id="typeof主要是用来判断一个变量的类型"><a href="#typeof主要是用来判断一个变量的类型" class="headerlink" title="typeof主要是用来判断一个变量的类型"></a><code>typeof</code>主要是用来判断一个变量的类型</h3><span id="more"></span>

<p>几个特殊的情况记一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Object</span> <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Function</span> <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>看到上边  <code>typeof Object</code> 的结果是 <code>function</code> 这里其实因为 Object 是一个构造函数， 而不是一个真正的对象， 只有实例化之后才会给出 <code>object</code>的结果</p>
<p>可以看一下下边代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Object</span>); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ahui = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> ahui); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<p>再看到上边： <code>typeof null</code> <code>typeof &#123;&#125;</code> <code>typeof []</code> 结果都是 object， 很显然， 我们是不能通过 typeof 来判断一个对象的具体类型的，通常我们会通过 <code>Object.prototype.toString</code>的方法来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>) <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;hi&#x27;</span>) <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;hi&#x27;</span>&#125;) <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>]) <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>) <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>(<span class="number">1</span>)) <span class="comment">// &quot;[object Symbol]&quot;</span></span><br></pre></td></tr></table></figure>

<p>到这里， 好像还没说到 typeof 的实现原理，其实很简单，通常情况下，我们只需要知道他的用法以及一些注意点就行：</p>
<p><strong>JS 要底层存储变量的时候， 会在变量的机器码的低位 1 ~ 3 位存储其类型信息</strong></p>
<h3 id="instanceof表示指定对象是否为某个构造函数的实例。"><a href="#instanceof表示指定对象是否为某个构造函数的实例。" class="headerlink" title="instanceof表示指定对象是否为某个构造函数的实例。"></a>instanceof表示指定对象是否为某个构造函数的实例。</h3><p>比如下边代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ahui&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> angeli = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;angele&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ahui 是通过 Person 实例出来的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个时候突然想起， 一个对象的__proto__ 指向该对象的构造函数的原型，如下：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>当然，instanceof 也可以判断一个实例是否是其父类型或者祖先类型的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Programmer</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Programmer</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">const</span> ahui = <span class="keyword">new</span> <span class="title class_">Programmer</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui <span class="keyword">instanceof</span> <span class="title class_">Programmer</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>再看几个有意思的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>); <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Foo</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>看到上边的 <code>instanceof</code> 有没有感觉很有意思，下边让我们来讲一下为什么会这样：</p>
<p>先看一张图片 </p>
<img src="/images/web/js/proto.jpg" align="center" style="margin: 0 auto;">
<pr />

<p>如果看这个图片表示看不懂的， 可以先看一下这篇文章： <a href="/proto.html">js 中<code>__proto__</code>和 <code>prototype</code> 的区别和关系</a></p>
<p>如果有同学对这张图表示怀疑的，就像我，可以先在控制台试一下下边的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p>下边我们再来理解 <code>Object instanceof Object</code> 为 <code>true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了方便表述， 首先区分左侧表达式跟右侧表达式</span></span><br><span class="line"><span class="title class_">ObjectL</span> = <span class="title class_">Object</span>, <span class="title class_">ObjectR</span> = <span class="title class_">Object</span>; </span><br><span class="line"><span class="comment">// 下面根据规范逐步推演</span></span><br><span class="line">O = <span class="title class_">ObjectR</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br><span class="line">L = <span class="title class_">ObjectL</span>.<span class="property">__proto__</span> = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br><span class="line"><span class="comment">// 第一次判断</span></span><br><span class="line">O != L </span><br><span class="line"><span class="comment">// 循环查找 L 是否还有 __proto__ </span></span><br><span class="line">L = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br><span class="line"><span class="comment">// 第二次判断</span></span><br><span class="line">O == L </span><br><span class="line"><span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure>
<p>同理， 我们可以通过上边那张 js 原型的关系图推算出 其它所有的 <code>instanceof</code> </p>
<h3 id="自己手动实现-instanceof"><a href="#自己手动实现-instanceof" class="headerlink" title="自己手动实现 instanceof"></a>自己手动实现 <code>instanceof</code></h3><p>现在， 我们知道 instanceof 的原理了， 那么，自己手动去实现一个 instanceof 是很简单的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instanceof_myself</span>(<span class="params">L, R</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> O = R.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  L = L.<span class="property">__proto__</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L === O) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L = L.<span class="property">__proto__</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instanceof_myself</span>(ahui, <span class="title class_">Person</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>参考地址：<br><a href="https://blog.csdn.net/qq_38722097/article/details/80717240">浅谈 instanceof 和 typeof 的实现原理</a><br><a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/">JavaScript instanceof 运算符深入剖析</a></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JS this</title>
    <url>//3915840815/</url>
    <content><![CDATA[<p>有关于<code>this</code> ，我们说得最多的一句话就是<strong>谁调用，指向谁</strong>；也就是</p>
<blockquote>
<p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</p>
</blockquote>
<span id="more"></span>

<p>其实， 在我们 JS 里边，要想真的理解 <code>this</code> ，只知道上边这一句话是完全不行的，我们可以从以下几个方面学习跟理解 <code>this</code> ：</p>
<p>从 <code>this</code> 绑定层面去理解：默认绑定，隐式绑定，显式绑定，<code>new</code> 绑定</p>
<p>从函数的运行环境层面去理解: <code>this</code>， 内存， 函数，环境变量</p>
<p>能过实际代码的上下文去理解</p>
<h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><p>先看一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;foo&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();  <span class="comment">// global</span></span><br></pre></td></tr></table></figure>

<p>很显然， <code>foo</code> 函数执行的时候，所在的环境是 <code>window</code>, 所以 <code>this.name</code> 就是 <code>window</code> 的 <code>name</code> 属性</p>
<p>再看一个稍微复杂点的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// global</span></span><br><span class="line">  foo.<span class="property">name</span> = <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sayname</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// global</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayname</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>上边第一个 <code>this</code> 很好理解，是 <code>foo</code> 在全局环境下被调用，所以是 <code>global</code></p>
<p>而第二个 <code>this</code>，表面上看上去是在 <code>foo</code> 函数内部被执行，而且 <code>foo.name</code> 赋了新值 <code>&#39;foo&#39;</code>, 所以很容易就会认为第二个 <code>this</code> 会打印 <code>foo</code>， 其实不然；</p>
<p><code>sayname</code> 虽是在 <code>foo</code> 函数里边被执行，但并非是被 <code>foo</code> 函数调用，所以，调用 <code>sayname</code> 的还是 <code>window</code>; </p>
<p>可以参考下边代码进行理解:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// global</span></span><br><span class="line">  foo.<span class="property">name</span> = <span class="string">&quot;foo&quot;</span></span><br><span class="line">  foo.<span class="property">sayname</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// foo</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  foo.<span class="title function_">sayname</span>(); <span class="comment">// 这里的 sayname 函数才是被 foo 调用的，所以才会打印 foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>这就是默认绑定规则,它是 javascript 中最常见的一种函数调用模式，this 的绑定规则也是四种绑定规则中最简单的一种，就是绑定在全局作用域上。</p>
<h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>先看例子： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayname</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ahui = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">sayname</span>: sayname,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> angeli = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;angeli&quot;</span>,</span><br><span class="line">  <span class="attr">sayname</span>: sayname,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ahui.<span class="title function_">sayname</span>(); <span class="comment">// ahui</span></span><br><span class="line">angeli.<span class="title function_">sayname</span>(); <span class="comment">// angeli</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这就是隐式绑定，不难理解; 回到我们文章的第一句话，<strong>谁调用，指向谁</strong>，这里就分别是 <code>ahui</code> <code>angeli</code> 调用了 <code>sayname</code></p>
<p>专业一点的说法就是上下文对象，当给函数指定了这个上下文对象时，函数内部的 <code>this</code> 自然指向了这个上下文对象</p>
<p>在上边例子的基础上，我们再看一个稍微复杂点的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayname</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ahui = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">sayname</span>: sayname,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ahui.<span class="title function_">sayname</span>(); <span class="comment">// ahui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ahuisayname = ahui.<span class="property">sayname</span>;</span><br><span class="line"><span class="title function_">ahuisayname</span>(); <span class="comment">// global</span></span><br></pre></td></tr></table></figure>

<p>这里的 ahui.sayname() 很好理解，肯定会打印 ahui ， 但是，当我们把 ahui.sayname 赋给一个新的变量之后， 为啥就变了呢 ？</p>
<p>这就是常见的<strong>隐式绑定时丢失上下文</strong></p>
<p>让我们来分析一下上边这个赋值语句：<strong>由于在 javascript 中，函数是对象，对象之间是引用传递，而不是值传递。</strong>  所以这个赋值语句可以理解为 <code>ahuisayname = ahui.sayname = sayname</code>, 也就是 <code>ahuisayname = sayname</code> ,  <code>ahui.sayname</code> 只起了一个桥梁的作用, <code>ahuisayname</code> 最终引用的就是 <code>sayname</code> 函数的地址，而与 <code>ahui</code> 这个对象没有关系了。最终执行 <code>ahuisayname</code> 这个函数，中不过是简单的执行 <code>sayname</code> 这个函数，输出 <code>&#39;global&#39;</code>。</p>
<p>这里的详细分析，可以看一下这篇文章： <a href="http://www.ruanyifeng.com/blog/2018/06/javascript-this.html">JavaScript 的 this 原理</a></p>
<h3 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h3><p>js中提示显示绑定的方法有3个 <code>call</code> <code>apply</code> <code>bind</code></p>
<p><code>call</code> <code>apply</code> 用法基本相似，就是给函数绑定一个执行上下文，且是显式绑定的。因此，函数内的this自然而然的绑定在了 <code>call</code> 或者 <code>apply</code> 所调用的对象上面。</p>
<blockquote>
<p><code>apply(obj,[arg1,arg2,arg3,...]</code> 被调用函数的参数以数组的形式给出<br><code>call(obj,arg1,arg2,arg3,...)</code> 被调用函数的参数依次给出</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span> * num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count.<span class="title function_">call</span>(obj1, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 4</span></span><br><span class="line">count.<span class="title function_">apply</span>(obj1, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">count.<span class="title function_">call</span>(obj2, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 5</span></span><br><span class="line">count.<span class="title function_">apply</span>(obj2, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p><code>bind</code> 方法只是返回了一个新的函数，这个函数内的 <code>this</code> 指定了执行上下文，而返回这个新函数可以接受参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span> * num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bound1 = count.<span class="title function_">bind</span>(obj1) <span class="comment">// 未指定参数</span></span><br><span class="line"><span class="title function_">bound1</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bound2 = count.<span class="title function_">bind</span>(obj1, <span class="number">1</span>) <span class="comment">// 指定了一个参数</span></span><br><span class="line"><span class="title function_">bound2</span>(<span class="number">2</span>) <span class="comment">// 4 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bound3 = count.<span class="title function_">bind</span>(obj1, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 指定了两个参数</span></span><br><span class="line"><span class="title function_">bound3</span>() <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bound4 = count.<span class="title function_">bind</span>(obj1, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 指定了多余的参数,多余的参数会被忽略</span></span><br><span class="line"><span class="title function_">bound4</span>() <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h3><p>最后要讲的一种 <code>this</code> 绑定规则，是指通过 <code>new</code> 操作符调用构造函数时发生的 <code>this</code> 绑定。首先要明确一点的是，在 javascript 中并没有其他语言那样的类的概念。构造函数也仅仅是普通的函数而已，只不过构造函数的函数名以大写字母开头，也只不过它可以通过 <code>new</code> 操作符调用而已.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我也只不过是个普通函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>(<span class="string">&quot;ahui&quot;</span>,<span class="number">18</span>) <span class="comment">// &quot;我也只不过是个普通函数&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// &quot;ahui&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zxt = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;angeli&quot;</span>,<span class="number">22</span>) <span class="comment">// &quot;我也只不过是个普通函数&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxt.<span class="property">name</span>) <span class="comment">// &quot;angeli&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxt.<span class="property">age</span>) <span class="comment">// 22</span></span><br></pre></td></tr></table></figure>

<p>上面这个例子中，首先定义了一个 <code>Person</code> 函数，既可以普通调用，也可以以构造函数的形式的调用。</p>
<p>当普通调用时，则按照正常的函数执行，输出一个字符串。 </p>
<p>如果是通过一个 <code>new</code> 操作符,则构造了一个新的对象。</p>
<p>那么，接下来我们再看看两种调用方式， <code>this</code> 分别绑定在了何处首先普通调用时，前面已经介绍过，此时应用默认绑定规则，<code>this</code> 绑定在了全局对象上，此时全局对象上会分别增加 name 和 age 两个属性。当通过 <code>new</code> 操作符调用时，函数会返回一个对象，从输出结果上来看 <code>this</code> 对象绑定在了这个返回的对象上。</p>
<p>因此，所谓的 <code>new</code> 绑定是指通过 <code>new</code> 操作符来调用函数时，会产生一个新对象，并且会把构造函数内的 <code>this</code> 绑定到这个对象上。</p>
<p>事实上，在javascript中，使用 <code>new</code> 来调用函数，会自动执行下面的操作。详情可看这里： <a href="/3315289936.html">new 一个对象的过程</a></p>
<blockquote>
<ol>
<li>创建一个全新的对象</li>
<li>这个新对象会被执行原型连接</li>
<li>这个新对象会绑定到函数调用的this</li>
<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象</li>
</ol>
</blockquote>
<h3 id="四种绑定的优先级"><a href="#四种绑定的优先级" class="headerlink" title="四种绑定的优先级"></a>四种绑定的优先级</h3><p>上面讲述了javascript中四种this绑定规则，这四种绑定规则基本上涵盖了所有函数调用情况。但是如果同时应用了这四种规则中的两种甚至更多，又该是怎么样的一个情况，或者说这四种绑定的优先级顺序又是怎么样的。</p>
<p>首先，很容易理解，默认绑定的优先级是最低的。这是因为只有在无法应用其他this绑定规则的情况下，才会调用默认绑定。那隐式绑定和显式绑定呢？还是上代码吧，代码可从来不会说谎。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">    <span class="attr">speak</span>: speak</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">speak</span>() <span class="comment">// obj1 (1)</span></span><br><span class="line">obj1.<span class="property">speak</span>.<span class="title function_">call</span>(obj2) <span class="comment">// obj2 (2)</span></span><br></pre></td></tr></table></figure>
<p>所以在上面代码中，执行了obj1.speak(),speak函数内部的this指向了obj1，因此(1)处代码输出的当然就是obj1，但是当显式绑定了speak函数内的this到obj2上，输出结果就变成了obj2，所有从这个结果可以看出显式绑定的优先级是要高于隐式绑定的。</p>
<p>事实上我们可以这么理解obj1.speak.call(obj2)这行代码，obj1.speak只是间接获得了speak函数的引用，这就有点像前面所说的隐式绑定丢失了上下文。</p>
<p>好，既然显式绑定的优先级要高于隐式绑定，那么接下来再来比较一下new 绑定和显式绑定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj1)  <span class="comment">// 返回一个新函数bar，这个新函数内的this指向了obj1  (1)</span></span><br><span class="line"><span class="title function_">bar</span>(<span class="number">2</span>) <span class="comment">// this绑定在了Obj1上，所以obj1.a === 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="title function_">bar</span>(<span class="number">3</span>)  <span class="comment">// 调用new 操作符后，bar函数的this指向了返回的新实例baz  (2)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz.<span class="property">a</span>) </span><br></pre></td></tr></table></figure>

<p>我们可以看到，在(1)处，bar函数内部的this原本指向的是obj1，但是在(2)处，由于经过了new操作符调用，bar函数内部的this却重新指向了返回的实例，这就可以说明new 绑定的优先级是要高于显式绑定的。</p>
<p>至此，四种绑定规则的优先级排序就已经得出了,分别是</p>
<blockquote>
<p>new 绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</p>
</blockquote>
<h3 id="箭头函数中的this绑定"><a href="#箭头函数中的this绑定" class="headerlink" title="箭头函数中的this绑定"></a>箭头函数中的this绑定</h3><p>箭头函数是ES6里一个重要的特性。</p>
<p>箭头函数的 <code>this</code> 是根据外层的（函数或者全局）作用域来决定的。函数体内的 <code>this</code> 对象指的是定义时所在的对象，而不是之前介绍的调用时绑定的对象。举一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// 定义在全局对象中，因此this绑定在全局作用域</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 1 ,在全局对象中调用</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj) <span class="comment">// 1,显示绑定，由obj对象来调用，但根本不影响结果</span></span><br></pre></td></tr></table></figure>

<p>从上面这个例子看出，箭头函数的 <code>this</code> 强制性的绑定在了箭头函数定义时所在的作用域，而且无法通过显示绑定，如 <code>apply,call</code> 方法来修改。</p>
<p>再来看下面这个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speak</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        <span class="comment">// 普通函数（非箭头函数),this绑定在调用时的作用域</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bornYear</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 本文写于2020年，因此new Date().getFullYear()得到的是2020</span></span><br><span class="line">        <span class="comment">// 箭头函数，this绑定在实例内部</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>() - <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ahui&quot;</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">ahui.<span class="title function_">speak</span>() <span class="comment">// &quot;ahui&quot;</span></span><br><span class="line">ahui.<span class="title function_">bornYear</span>() <span class="comment">// 1992</span></span><br><span class="line"><span class="comment">// 到这里应该大家应该都没什么问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> angeli = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;angeli&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>  <span class="comment">// 永远18岁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ahui.<span class="property">speak</span>.<span class="title function_">call</span>(angeli)</span><br><span class="line"><span class="comment">// &quot;angeli&quot; this绑定的是angeli这个对象</span></span><br><span class="line"></span><br><span class="line">ahui.<span class="property">bornYear</span>.<span class="title function_">call</span>(angeli)</span><br><span class="line"><span class="comment">// 1992 而不是 2002,这是因为this永远绑定的是ahui这个实例</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因此 ES6 的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 <code>this</code> ，具体来说就是，箭头函数会继承 外层函数调用的 <code>this</code> 绑定 ，而无论外层函数的 <code>this</code> 绑定到哪里。</p>
<p>小结<br>以上就是javascript中所有this绑定的情况，在es6之前，前面所说的四种绑定规则可以涵盖任何的函数调用情况，es6标准实施以后，对于函数的扩展新增了箭头函数，与之前不同的是，箭头函数的作用域位于箭头函数定义时所在的作用域。</p>
<p>而对于之前的四种绑定规则来说，掌握每种规则的调用条件就能很好的理解this到底是绑定在了哪个作用域。</p>
<p>原文地址： <a href="https://segmentfault.com/a/1190000007101339">JavaScript中this绑定详解</a></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 原型链继承问题拓展</title>
    <url>//3012898819/</url>
    <content><![CDATA[<p><strong>原型链继承存在的问题</strong>：</p>
<ol>
<li><p>包含引用类型的原型属性会被所有实例共享，这会导致对一个实例的修改会影响到另一个实例。在通过原型来实现继承时，原型实际上会变成另一个类型的实例。原先的实例属性就变成了现在的原型属性</p>
</li>
<li><p>在创建了类型的实例时，不能向超类型的构造函数中传递参数</p>
</li>
</ol>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">citys</span> = [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;sub&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line">instance1.<span class="property">citys</span>.<span class="title function_">push</span>(<span class="string">&#x27;阿斯加德&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;, &quot;阿斯加德&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;, &quot;阿斯加德&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面的代码完美的解释了原型链继承的时候<strong>包含引用类型的原型属性会被所有实例共享，这会导致对一个实例的修改会影响到另一个实例</strong></p>
<p>把代码稍微改一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">citys</span> = [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;sub&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line">instance1.<span class="property">citys</span> = [<span class="string">&#x27;阿斯加德&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">citys</span>) <span class="comment">// [&quot;阿斯加德&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;]</span></span><br></pre></td></tr></table></figure>

<p>这里会的发现 <code>instance1.citys</code> 是 [“阿斯加德”]， 这个完全没毛病，但是 <code>instance2.citys</code>为啥是 [“北京”, “上海”, “深圳”] 呢？ 而不是 [“阿斯加德”] ？</p>
<p>难道是我们上边说的 <strong>包含引用类型的原型属性会被所有实例共享，这会导致对一个实例的修改会影响到另一个实例</strong>  有问题 ？</p>
<p>如果你也像我这样， 对这个不清楚， 那么下边跟我一起分析一下吧。</p>
<p>不管怎样， 碰到这种问题， 我们先去看一下 instance1 跟 instance2 到底是个啥。。。。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">citys</span> = [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;sub&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line">instance1.<span class="property">citys</span> = [<span class="string">&#x27;阿斯加德&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2)</span><br></pre></td></tr></table></figure>
<p>于是我们就会看到如下结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1); <span class="comment">// SubType &#123;name: &quot;sub&quot;, citys: Array(1)&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2); <span class="comment">// SubType &#123;name: &quot;sub&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>很明显的发现，只有<code>instance1</code>才有 <code>citys</code> 这个属性， 而 <code>instance2</code> 是没有 <code>citys</code> 这个属性的。这是为啥呢？ </p>
<p>在原型链里有一句我们经常说到的话：<strong>当自身没有这个属性的时候，就会去它的原型链上找</strong>。 这里很明显，我们给 <code>instance1</code> 添加了一个 <code>citys</code> 的属性，所以能够找到 <code>citys</code> ， 而 <code>instance2</code> 的话， 自身没有 <code>citys</code> 但是在它的原型链上， <code>SuperType</code> 是有 <code>citys</code> 属性的， 所以也能访问得到。也可以通过下边的结果看出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;citys&#x27;</span>)) <span class="comment">// true   说明这个citys属性是自身的属性，而不是继承而来的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;citys&#x27;</span>)) <span class="comment">// false  说明这个citys属性是通过继承得到的</span></span><br></pre></td></tr></table></figure>

<p>通过上边的分析， 我们不难理解为何当 <code>instance1.citys = [&#39;阿斯加德&#39;]</code> 的时候， <code>instance2.citys</code>输出的是 [“北京”, “上海”, “深圳”] 了</p>
<p>原因就是 <code>instace1</code> 上的 <code>citys</code> 是赋值操作的时候给这个实例新增的一个属性，而 <code>instance2</code> 上的 <code>citys</code> 属性是从 <code>SuperType</code> 上继承过来的，所以对 <code>instance1</code> 进行赋值时，对 <code>instance2</code> 没有影响。</p>
<p>这里不要跟 <code>instance1.citys.push([&#39;阿斯加德&#39;])</code> 这个操作混淆了，很明显， 这里 <code>instance1.citys.push()</code> 的操作， 是对 <code>instance1</code> 从 <code>SuperType</code> 里边继承过来的 <code>citys</code> 属性进行的操作，这个属性是共享的，在一个实例里修改过会影响其它实例，所以会对 <code>instance2.citys</code> 有影响。</p>
<p>如果还没有理解，那就再看一下下边代码，加深一下理解</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">citys</span> = [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;sub&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line">instance1.<span class="property">citys</span> = [<span class="string">&#x27;阿斯加德&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">citys</span>) <span class="comment">// [&quot;阿斯加德&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> instance1.<span class="property">citys</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;]</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JS 数据类型你应该知道的可不止这些</title>
    <url>//1405041715/</url>
    <content><![CDATA[<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><code>string, number, boolean, null, undefined</code></p>
<span id="more"></span>

<p>  基本数据类型的变量是保存在栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在的，修改一个变量不会影响其他的变量</p>
<p>  当比较两个基本数据类型的值时，本质上是比较值</p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p><code>object</code></p>
<p>  对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而变量保存的是对象的内存地址(对象的引用)，如果两个变量保存的是同一个对象引用，当修改其中一个变量修改属性时，另一个也会受到影响</p>
<p>  当比较两个引用数据类型时，本质上是比较的对象的内存地址，如果两个对象的属性是一模一样的，但是地址不同，也会返回false。</p>
<h3 id="数据结构中的栈和堆"><a href="#数据结构中的栈和堆" class="headerlink" title="数据结构中的栈和堆"></a>数据结构中的栈和堆</h3><p>  栈 ：这是一种连续存储的数据结构，具有先进后出的性质。通常具有的操作有出栈、入栈（压栈）和取栈顶元素。想要读取栈中的某个元素，就必须将其之前所有的元素出栈才能完成。</p>
<p>  堆：这是一种非连续的树形存储数据结构，每个节点都有一个值，整棵树是经过排序的。特点是根节点的值最小（或最大），且根节点的两个子树也是一个堆。常用来实现优先队列，存取随意。</p>
<h3 id="内存中的栈区和堆区"><a href="#内存中的栈区和堆区" class="headerlink" title="内存中的栈区和堆区"></a>内存中的栈区和堆区</h3><p>  栈内存：由程序自动向操作系统申请分配以及回收，速度快，使用方便，但程序员无法控制。若分配失败，则提示栈溢出错误。注意，const局部变量也储存在栈区内，栈区向地址减小的方向增长。</p>
<p>  堆内存：程序员向操作系统申请一块内存，当系统收到程序的申请时，会遍历一个记录空闲内存地址的链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。分配的速度较慢，地址不连续，容易碎片化。此外，由程序员申请，同时也必须由程序员负责销毁，否则则导致内存泄露。</p>
<h3 id="关于栈和堆的比喻"><a href="#关于栈和堆的比喻" class="headerlink" title="关于栈和堆的比喻"></a>关于栈和堆的比喻</h3><p>  使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。<br>使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。</p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JS判断一个变量是否是数组</title>
    <url>//isArray/</url>
    <content><![CDATA[<h3 id="1-isArray"><a href="#1-isArray" class="headerlink" title="1. isArray()"></a>1. isArray()</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">isArray</a> 是 Array 的一个方法， 如果是数组返回 true, 否则返回 false</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); <span class="comment">//返回“object”</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(a)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2. instanceof"></a>2. instanceof</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof 运算符</a>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> constructor</span><br><span class="line">object <span class="comment">// 实例</span></span><br><span class="line">constructor <span class="comment">// 构造函数</span></span><br></pre></td></tr></table></figure>
<p>用来检测 <code>constructor.prototype</code> 是否存在于参数 object 的原型链上 (<code>object.__proto__/object.__proto__.__proto__.......__proto__</code>)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&quot;a&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;b&quot;</span>, <span class="attr">c</span>: <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>arr 的原型链上存在 Array.prototype 和 Object.prototype<br>只有 Array 类型的变量才会满足 arr instanceof Array 和 arr instanceof Object 都返回 true<br>也只有 Object 类型变量才满足 obj instanceof Array 返回 false，obj instanceof Object 返回 true</p>
</blockquote>
<h3 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h3><p><a href="https://www.w3school.com.cn/jsref/jsref_constructor_array.asp">constructor</a> 是 <a href="https://www.w3school.com.cn/jsref/jsref_obj_array.asp">Array 对象</a>的一个属性，该属性返回对创建此对象的数组函数的引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&quot;a&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;b&quot;</span>, <span class="attr">c</span>: <span class="string">&quot;c&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Object-prototype-toString-call"><a href="#4-Object-prototype-toString-call" class="headerlink" title="4. Object.prototype.toString.call()"></a>4. Object.prototype.toString.call()</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">toString()</a>表示返回该对象的字符串</p>
<blockquote>
<p>每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString() 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 “[object type]”，其中 type 是对象的类型。</p>
</blockquote>
<p><a href="https://www.w3school.com.cn/js/js_function_call.asp">call()</a>用来改变 this 指向，能够使用属于另一个对象的方法。</p>
<blockquote>
<p>比如对象 b 没有方法 f(), 但是对象 a 有， 就可以直接 a.f.call(b), 这样 b 就使用了 a 里边的一个方法</p>
</blockquote>
<p>更多关于 call() 的用法可以看<a href="https://segmentfault.com/a/1190000018270750">这里&gt;&gt;&gt;</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;222&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&quot;aa&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bb&quot;</span>, <span class="attr">c</span>: <span class="string">&quot;cc&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> res = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//[object Array]</span></span><br><span class="line"><span class="keyword">var</span> res2 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">//[object Object]</span></span><br><span class="line"><span class="keyword">var</span> res3 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="keyword">var</span> res4 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4); <span class="comment">//[object String]</span></span><br><span class="line"><span class="keyword">var</span> res4 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res4); <span class="comment">//[object Null]</span></span><br><span class="line"><span class="keyword">var</span> res5 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(d);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res5); <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="keyword">var</span> res6 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(e);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res6); <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="keyword">var</span> res7 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res7); <span class="comment">//[object Symbol]</span></span><br></pre></td></tr></table></figure>

<p>我们可以使用<code>Object.prototype.toString.call(arr) === &#39;[object Array]&#39;</code>来判断变量是否是数组</p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>Lightroom 学习笔记</title>
    <url>//3725880038/</url>
    <content><![CDATA[<p>课程资源: <a href="http://qiuliang.com/lightroom4/index.html">秋凉 LightRoom4 教学视频</a><br>课程来源: <a href="https://tuchong.com/15913996/">华摄影师</a> 2020 年元宵节送</p>
<span id="more"></span>

<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><blockquote>
<p>commnd + shift + i: 导入</p>
</blockquote>
<p>视图：</p>
<blockquote>
<dl><dt>E：放大<br>G：网格<br>F：全屏<br>L：高亮<br>C：比较<br>Com + L： 打开&#x2F;关闭过滤器</dt><dd>过滤器栏</dd></dl></blockquote>
<p>面板</p>
<blockquote>
<p>F5：上面板<br>F6：下面板<br>F7：左面板<br>F8：右面板<br>Tab： 两侧<br>shit + Tab: 全部面板<br>Command + 0 ~ 8 打开&#x2F;关闭面板</p>
</blockquote>
<p>修图</p>
<blockquote>
<p>\: 调整前后的照片<br>Y： 比较窗口<br>Shift + Y:<br>Q：污点去除工具<br>R:：裁剪&#x2F;拉直<br>V：黑白切换<br>M：渐变滤镜<br>K：调整画笔<br>Command + N 新建快照<br>Command + Z 复位<br>Command + Shift + Z 重做</p>
</blockquote>
<h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>美白牙齿：</p>
<blockquote>
<p>用画笔工具提高亮度 降低饱和度<br>多打开蒙版图层查看所画的区域，是否画到了多余的地方，及时擦除</p>
</blockquote>
<p>磨皮：</p>
<blockquote>
<p>用画笔工具降低清晰度跟锐化程度<br>多打开蒙版图层查看所画的区域，是否画到了多余的地方，及时擦除</p>
</blockquote>
<p>同步：</p>
<blockquote>
<p>修改完一张照片，选中其它想要同步的照片，点击同步。（主要，局部高速，剪切，污点，变换等局部的调整不要同步）<br>也可以先选择照片，再打开自动同步，这个时候在照片上做的每一个修改都会自动同步到其它照片上<br>这里选其它照片是通过按下 shift 去选要同步的照片</p>
</blockquote>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>lightroom</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 普通函数跟箭头函数的区别</title>
    <url>//3671102502/</url>
    <content><![CDATA[<ol>
<li><p>箭头函数不会产生this, 会捕捉当前的执行上下文中的this当做自己的this</p>
</li>
<li><p>箭头函数不能做为构造函数</p>
</li>
<li><p>箭头函数不能绑定 arguments </p>
</li>
<li><p>call&#x2F;apply&#x2F;bind 对箭头函数不起作用</p>
</li>
<li><p>箭头函数没有原型属性</p>
</li>
<li><p>箭头函数不能当作 Generator 函数，不能使用 yield 关键字</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>js 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>bodybuilding notes</title>
    <url>//3947484483/</url>
    <content><![CDATA[<h3 id="2019-已经结束，-不忘初心，-坚持就是胜利"><a href="#2019-已经结束，-不忘初心，-坚持就是胜利" class="headerlink" title="2019 已经结束， 不忘初心， 坚持就是胜利"></a>2019 已经结束， 不忘初心， 坚持就是胜利</h3><p>从跟家琦健身以来，来健身房也不下30次了，虽然说自己很多动作还是不标准，但是学到了很多，算是个对健身入门了，2020年好好加油，不忘初心。</p>
<h5 id="一点小感悟："><a href="#一点小感悟：" class="headerlink" title="一点小感悟："></a>一点小感悟：</h5><p>中午健身牺牲了原来的午睡时间，但是，这也许是一个上班族无法避免的问题吧，这也让我晚上睡得更早了</p>
<p>健身之后的那种快感，是很难得的，很舒服的，是打心底发出的一种自信，因为自己心底会说，今天我健身了，就是牛逼，再看到什么程序员猝死这类的新闻，心底会想，这一看就是个平时不健身的人</p>
<span id="more"></span>

<h3 id="记录一下中午健身的内容"><a href="#记录一下中午健身的内容" class="headerlink" title="记录一下中午健身的内容"></a>记录一下中午健身的内容</h3><p>【时间】【时长】【锻炼肌肉】【地点：滴滴湾流】【教练：家琦】</p>
<h4 id="【2019年12月30日-周一】【-中午】【胸，腹，-跑步】"><a href="#【2019年12月30日-周一】【-中午】【胸，腹，-跑步】" class="headerlink" title="【2019年12月30日 周一】【 中午】【胸，腹， 跑步】"></a>【2019年12月30日 周一】【 中午】【胸，腹， 跑步】</h4><h4 id="【2019年12月27日-周五】【-中午-】【胸，腹，-跑步】"><a href="#【2019年12月27日-周五】【-中午-】【胸，腹，-跑步】" class="headerlink" title="【2019年12月27日 周五】【 中午 】【胸，腹， 跑步】"></a>【2019年12月27日 周五】【 中午 】【胸，腹， 跑步】</h4><h4 id="【2019年12月25日-周三】【-中午】【腿，-跑步】"><a href="#【2019年12月25日-周三】【-中午】【腿，-跑步】" class="headerlink" title="【2019年12月25日 周三】【 中午】【腿， 跑步】"></a>【2019年12月25日 周三】【 中午】【腿， 跑步】</h4><h4 id="【2019年12月23日-周一】【-中午-】【背-跑步】"><a href="#【2019年12月23日-周一】【-中午-】【背-跑步】" class="headerlink" title="【2019年12月23日 周一】【 中午 】【背 跑步】"></a>【2019年12月23日 周一】【 中午 】【背 跑步】</h4><h4 id="【2019年12月20日-周五】【-中午-】【背-跑步】"><a href="#【2019年12月20日-周五】【-中午-】【背-跑步】" class="headerlink" title="【2019年12月20日 周五】【 中午 】【背 跑步】"></a>【2019年12月20日 周五】【 中午 】【背 跑步】</h4><h4 id="【2019年12月23日-周二】【-中午-】【胸-跑步】"><a href="#【2019年12月23日-周二】【-中午-】【胸-跑步】" class="headerlink" title="【2019年12月23日 周二】【 中午 】【胸 跑步】"></a>【2019年12月23日 周二】【 中午 】【胸 跑步】</h4><h4 id="【2019年12月16日-周一】【-中午-】【背-跑步】"><a href="#【2019年12月16日-周一】【-中午-】【背-跑步】" class="headerlink" title="【2019年12月16日 周一】【 中午 】【背 跑步】"></a>【2019年12月16日 周一】【 中午 】【背 跑步】</h4><h4 id="【2019年12月4日-周三】【-中午-11-40-12-50-】【背】"><a href="#【2019年12月4日-周三】【-中午-11-40-12-50-】【背】" class="headerlink" title="【2019年12月4日 周三】【 中午 11:40 ~ 12:50 】【背】"></a>【2019年12月4日 周三】【 中午 11:40 ~ 12:50 】【背】</h4><p>一公里热身跑</p>
<p><strong>背</strong></p>
<ol>
<li>高位下拉： 5组&#x2F;12次 160Kg</li>
<li>划船：5组&#x2F;15次  40Kg</li>
<li>引体向上：5组&#x2F;10次 自重 - 48Kg</li>
<li>单臂俯身划船：3组&#x2F;15次 12.5Kg</li>
</ol>
<h4 id="【2019年12月3日-周二】【-中午-11-40-13-30-】【胸】"><a href="#【2019年12月3日-周二】【-中午-11-40-13-30-】【胸】" class="headerlink" title="【2019年12月3日 周二】【 中午 11:40 ~ 13:30 】【胸】"></a>【2019年12月3日 周二】【 中午 11:40 ~ 13:30 】【胸】</h4><p>一公里热身跑</p>
<p><strong>胸</strong></p>
<ol>
<li>向前推胸： 5组&#x2F;12次 20Kg</li>
<li>向前上推胸： 5组&#x2F;12次 20Kg</li>
<li>引体向上：5组&#x2F;10次 自重 - 48Kg</li>
<li>夹胸机器：5组</li>
</ol>
<h4 id="【2019年11月28日-周四】【-中午-12-00-13-30-】【背】"><a href="#【2019年11月28日-周四】【-中午-12-00-13-30-】【背】" class="headerlink" title="【2019年11月28日 周四】【 中午 12:00 ~ 13:30 】【背】"></a>【2019年11月28日 周四】【 中午 12:00 ~ 13:30 】【背】</h4><p>一公里热身跑</p>
<p><strong>背</strong></p>
<ol>
<li>高位下拉： 5组&#x2F;12次 175Kg</li>
<li>划船：5组&#x2F;15次  15Kg</li>
<li>引体向上：5组&#x2F;10次 自重 - 61</li>
<li>单臂俯身划船：4组&#x2F;15次 12.5Kg</li>
</ol>
<p><strong>总结</strong></p>
<p>这次高位下拉的时候， 我戴了教练的助力带，效果很明显，跟以前比起来感觉不要用力去抓住杆子，力量可以更好的从背部发出来，拉的重量更高，达到更好的训练效果</p>
<p>划船的时候，又很明显的感觉自己肱三真的很差，几下就酸了</p>
<blockquote>
<p>练背的时候，一定要很明显的感觉到自己的力量是从背部肌肉发出来的， 最好还是要有人带着玩，要不然很容易搞错，今天我做单臂俯身划船的时候，就搞错了2组，一开始教练练腹去了，他过来的时候， 发现我只有大圆肌在发力，而背阔肌没有发力， 这样是很不好的</p>
</blockquote>
<h4 id="【2019年11月27日-周三】【-中午-12-00-13-30-】【腿】"><a href="#【2019年11月27日-周三】【-中午-12-00-13-30-】【腿】" class="headerlink" title="【2019年11月27日 周三】【 中午 12:00 ~ 13:30 】【腿】"></a>【2019年11月27日 周三】【 中午 12:00 ~ 13:30 】【腿】</h4><p>一公里热身跑</p>
<p><strong>腿</strong></p>
<ol>
<li>硬拉： 5组&#x2F;10个  40Kg </li>
<li>深蹲：5组&#x2F;15个  12.5Kg</li>
<li>健步蹲：5组&#x2F;10个 5kg&#x2F;2  空手&#x2F;2</li>
</ol>
<p><strong>总结</strong></p>
<p>硬拉的时候，如果脚张得比较开， 练的是大腿内则(股内肌)， 如果保持与肩同宽， 练的主要是股直肌跟股外肌；硬拉的时候腰一定要打直，脚张天比脚笥肩同宽要轻松点， 但是建议先练与肩同宽；</p>
<blockquote>
<p>其实刚开始练硬拉就想要拉的时候腰打直是很难的，对新手来说，前期一定要练一下深蹲，练习方法是找一面墙，面向墙体，脚尖抵墙，双脚平行，与肩同宽，这个时候脸尽量帖着墙，然后往下坐，能坐多深就坐多深，到最底点坚持2到3秒，一组可以做十到二十次，平时没事的时候就可以练，对后期练力量很有好处</p>
</blockquote>
<h4 id="【2019年11月26日-周二】【-中午-13-10-14-00-】【腹、核心】"><a href="#【2019年11月26日-周二】【-中午-13-10-14-00-】【腹、核心】" class="headerlink" title="【2019年11月26日 周二】【 中午 13:10 ~ 14:00 】【腹、核心】"></a>【2019年11月26日 周二】【 中午 13:10 ~ 14:00 】【腹、核心】</h4><p>一公里热身跑</p>
<p><strong>核心、腹</strong></p>
<ol>
<li>平板支撑：5组&#x2F;60S</li>
<li>卷腹：4组&#x2F;10个</li>
</ol>
<p><strong>肱三</strong></p>
<ol>
<li>三头俯身哑铃屈伸：4组  2.5Kg&#x2F;2&#x2F;30  5Kg &#x2F; 2 &#x2F;15</li>
</ol>
<p><strong>总结</strong></p>
<p>今天教练休息一天，自己就不知道怎么玩了，做了两个教练之前要我加强的动作；</p>
<p>平板到第五组的时候完全只能坚持50S 了，这个动作以后每周一定要做两次以上， 教练说这个是练基本功跟核心的， 没事的时候可以多做。</p>
<h4 id="【2019年11月25日-周一】【-中午-12-00-13-40-】【肩、肱三】"><a href="#【2019年11月25日-周一】【-中午-12-00-13-40-】【肩、肱三】" class="headerlink" title="【2019年11月25日 周一】【 中午 12:00 ~ 13:40 】【肩、肱三】"></a>【2019年11月25日 周一】【 中午 12:00 ~ 13:40 】【肩、肱三】</h4><p>一公里热身跑<br><strong>肩：</strong></p>
<ol>
<li>肩上举：5组&#x2F;8次  哑铃 7.5KG</li>
<li>直臂前平举：5组&#x2F;10+5次  杠铃片 10Kg + 5Kg</li>
<li>面拉：5组&#x2F;12次 2片</li>
<li>哑铃俯身飞鸟：5组&#x2F;20次 哑铃 2.5Kg</li>
</ol>
<p><strong>肱三：</strong></p>
<ol>
<li>绳索三头下拉：5组&#x2F;14次 3片</li>
<li>三头俯身哑铃屈伸：4组&#x2F;30次 2.5Kg</li>
</ol>
<p><strong>总结：</strong></p>
<p>现在是感觉每块肌肉都很弱，重量上的特别小，教练说我驼背太严重，一定要把肩打开，比起第一次教练让我练背的时候，一站直，拉紧后背就会头晕两眼发黑的状态要好</p>
]]></content>
      <categories>
        <category>fit</category>
      </categories>
      <tags>
        <tag>健身</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint 常用配置中文注释</title>
    <url>//4069831407/</url>
    <content><![CDATA[<h4 id="注意这里的数字：0表示不不处理，1表示警告，2表示错误并退出"><a href="#注意这里的数字：0表示不不处理，1表示警告，2表示错误并退出" class="headerlink" title="注意这里的数字：0表示不不处理，1表示警告，2表示错误并退出"></a>注意这里的数字：0表示不不处理，1表示警告，2表示错误并退出</h4><p>这里的 0，1，2 也可以用 off, warn, error, 表示:</p>
<blockquote>
<p>“off”或者0    &#x2F;&#x2F;关闭规则关闭<br>“warn”或者1    &#x2F;&#x2F;在打开的规则作为警告（不影响退出代码）<br>“error”或者2    &#x2F;&#x2F;把规则作为一个错误（退出代码触发时为1）</p>
</blockquote>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;rules&quot;</span> : &#123;</span><br><span class="line">  <span class="comment">// 定义对象的set存取器属性时，强制定义get</span></span><br><span class="line">  <span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></span><br><span class="line">  <span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],</span><br><span class="line">  <span class="comment">// 在块级作用域外访问块内定义的变量是否报错提示</span></span><br><span class="line">  <span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></span><br><span class="line">  <span class="string">&quot;brace-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;1tbs&quot;</span>, &#123; <span class="string">&quot;allowSingleLine&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">  <span class="comment">// 双峰驼命名格式</span></span><br><span class="line">  <span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，</span></span><br><span class="line">  <span class="comment">// always-multiline：多行模式必须带逗号，单行模式不能带逗号</span></span><br><span class="line">  <span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],</span><br><span class="line">  <span class="comment">// 控制逗号前后的空格</span></span><br><span class="line">  <span class="string">&quot;comma-spacing&quot;</span>: [<span class="number">2</span>, &#123; <span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">  <span class="comment">// 控制逗号在行尾出现还是在行首出现</span></span><br><span class="line">  <span class="comment">// http://eslint.org/docs/rules/comma-style</span></span><br><span class="line">  <span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>],</span><br><span class="line">  <span class="comment">// 圈复杂度</span></span><br><span class="line">  <span class="string">&quot;complexity&quot;</span>: [<span class="number">2</span>,<span class="number">9</span>],</span><br><span class="line">  <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></span><br><span class="line">  <span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">2</span>,<span class="string">&quot;never&quot;</span>],</span><br><span class="line">  <span class="comment">// 强制方法必须返回值，TypeScript强类型，不配置</span></span><br><span class="line">  <span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了</span></span><br><span class="line">  <span class="comment">// e.g [0,&quot;that&quot;] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值</span></span><br><span class="line">  <span class="string">&quot;consistent-this&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示</span></span><br><span class="line">  <span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// if else while for do后面的代码块是否需要&#123; &#125;包围，参数：</span></span><br><span class="line">  <span class="comment">//    multi  只有块中有多行语句时才需要&#123; &#125;包围</span></span><br><span class="line">  <span class="comment">//    multi-line  只有块中有多行语句时才需要&#123; &#125;包围, 但是块中的执行语句只有一行时，</span></span><br><span class="line">  <span class="comment">//                   块中的语句只能跟和if语句在同一行。if (foo) foo++; else doSomething();</span></span><br><span class="line">  <span class="comment">//    multi-or-nest 只有块中有多行语句时才需要&#123; &#125;包围, 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面</span></span><br><span class="line">  <span class="comment">//    [2, &quot;multi&quot;, &quot;consistent&quot;] 保持前后语句的&#123; &#125;一致</span></span><br><span class="line">  <span class="comment">//    default: [2, &quot;all&quot;] 全都需要&#123; &#125;包围</span></span><br><span class="line">  <span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>],</span><br><span class="line">  <span class="comment">// switch语句强制default分支，也可添加 // no default 注释取消此次警告</span></span><br><span class="line">  <span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 强制object.key 中 . 的位置，参数:</span></span><br><span class="line">  <span class="comment">//      property，&#x27;.&#x27;号应与属性在同一行</span></span><br><span class="line">  <span class="comment">//      object, &#x27;.&#x27; 号应与对象名在同一行</span></span><br><span class="line">  <span class="string">&quot;dot-location&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;property&quot;</span>],</span><br><span class="line">  <span class="comment">// 强制使用.号取属性</span></span><br><span class="line">  <span class="comment">//    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性</span></span><br><span class="line">  <span class="comment">//                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;&quot;allowKeywords&quot;: false&#125;]</span></span><br><span class="line">  <span class="comment">//           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;&quot;allowPattern&quot;: &quot;^[a-z]+(_[a-z]+)+$&quot;&#125;]</span></span><br><span class="line">  <span class="string">&quot;dot-notation&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">  <span class="comment">// 文件末尾强制换行</span></span><br><span class="line">  <span class="string">&quot;eol-last&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 使用 === 替代 ==</span></span><br><span class="line">  <span class="string">&quot;eqeqeq&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;allow-null&quot;</span>],</span><br><span class="line">  <span class="comment">// 方法表达式是否需要命名</span></span><br><span class="line">  <span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 方法定义风格，参数：</span></span><br><span class="line">  <span class="comment">//    declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, &quot;declaration&quot;]</span></span><br><span class="line">  <span class="comment">//    expression：强制使用方法表达式的方式，var f = function() &#123;&#125;  e.g [2, &quot;expression&quot;]</span></span><br><span class="line">  <span class="comment">//    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, &quot;declaration&quot;, &#123; &quot;allowArrowFunctions&quot;: true &#125;]</span></span><br><span class="line">  <span class="string">&quot;func-style&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line">  <span class="string">&quot;no-array-constructor&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line">  <span class="string">&quot;no-bitwise&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line">  <span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line">  <span class="string">&quot;no-catch-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line">  <span class="string">&quot;no-class-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line">  <span class="string">&quot;no-cond-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line">  <span class="string">&quot;no-console&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line">  <span class="string">&quot;no-const-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line">  <span class="string">&quot;no-constant-condition&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line">  <span class="string">&quot;no-continue&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line">  <span class="string">&quot;no-control-regex&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line">  <span class="string">&quot;no-debugger&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line">  <span class="string">&quot;no-delete-var&quot;</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line">  <span class="string">&quot;no-div-regex&quot;</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line">  <span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line">  <span class="string">&quot;no-dupe-args&quot;</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line">  <span class="string">&quot;no-duplicate-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line">  <span class="string">&quot;no-else-return&quot;</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line">  <span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line">  <span class="string">&quot;no-empty-character-class&quot;</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line">  <span class="string">&quot;no-empty-label&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line">  <span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line">  <span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line">  <span class="string">&quot;no-ex-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line">  <span class="string">&quot;no-extend-native&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line">  <span class="string">&quot;no-extra-bind&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line">  <span class="string">&quot;no-extra-boolean-cast&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line">  <span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line">  <span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line">  <span class="string">&quot;no-fallthrough&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line">  <span class="string">&quot;no-floating-decimal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line">  <span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line">  <span class="string">&quot;no-implicit-coercion&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line">  <span class="string">&quot;no-implied-eval&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line">  <span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line">  <span class="string">&quot;no-inner-declarations&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;functions&quot;</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line">  <span class="string">&quot;no-invalid-regexp&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line">  <span class="string">&quot;no-invalid-this&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line">  <span class="string">&quot;no-irregular-whitespace&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line">  <span class="string">&quot;no-iterator&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line">  <span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line">  <span class="string">&quot;no-labels&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line">  <span class="string">&quot;no-lone-blocks&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line">  <span class="string">&quot;no-lonely-if&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line">  <span class="string">&quot;no-loop-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line">  <span class="string">&quot;no-mixed-requires&quot;</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line">  <span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line">  <span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>],<span class="comment">//换行风格</span></span><br><span class="line">  <span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line">  <span class="string">&quot;no-multi-str&quot;</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line">  <span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line">  <span class="string">&quot;no-native-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line">  <span class="string">&quot;no-negated-in-lhs&quot;</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line">  <span class="string">&quot;no-nested-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line">  <span class="string">&quot;no-new&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line">  <span class="string">&quot;no-new-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line">  <span class="string">&quot;no-new-object&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line">  <span class="string">&quot;no-new-require&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line">  <span class="string">&quot;no-new-wrappers&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line">  <span class="string">&quot;no-obj-calls&quot;</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line">  <span class="string">&quot;no-octal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line">  <span class="string">&quot;no-octal-escape&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line">  <span class="string">&quot;no-param-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line">  <span class="string">&quot;no-path-concat&quot;</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line">  <span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line">  <span class="string">&quot;no-process-env&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line">  <span class="string">&quot;no-process-exit&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line">  <span class="string">&quot;no-proto&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line">  <span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line">  <span class="string">&quot;no-regex-spaces&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line">  <span class="string">&quot;no-restricted-modules&quot;</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line">  <span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line">  <span class="string">&quot;no-script-url&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line">  <span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line">  <span class="string">&quot;no-sequences&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line">  <span class="string">&quot;no-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line">  <span class="string">&quot;no-shadow-restricted-names&quot;</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line">  <span class="string">&quot;no-spaced-func&quot;</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line">  <span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line">  <span class="string">&quot;no-sync&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line">  <span class="string">&quot;no-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line">  <span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line">  <span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line">  <span class="string">&quot;no-throw-literal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line">  <span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line">  <span class="string">&quot;no-undef-init&quot;</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line">  <span class="string">&quot;no-undefined&quot;</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line">  <span class="string">&quot;no-unexpected-multiline&quot;</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line">  <span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line">  <span class="string">&quot;no-unneeded-ternary&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line">  <span class="string">&quot;no-unreachable&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line">  <span class="string">&quot;no-unused-expressions&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line">  <span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line">  <span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line">  <span class="string">&quot;no-useless-call&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line">  <span class="string">&quot;no-void&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line">  <span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line">  <span class="string">&quot;no-warning-comments&quot;</span>: [<span class="number">1</span>, &#123; <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>], <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line">  <span class="string">&quot;no-with&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line">  <span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line">  <span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line">  <span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line">  <span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line">  <span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line">  <span class="string">&quot;brace-style&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;1tbs&quot;</span>],<span class="comment">//大括号风格</span></span><br><span class="line">  <span class="string">&quot;callback-return&quot;</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line">  <span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line">  <span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line">  <span class="string">&quot;comma-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line">  <span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line">  <span class="string">&quot;complexity&quot;</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line">  <span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line">  <span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line">  <span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],<span class="comment">//this别名</span></span><br><span class="line">  <span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line">  <span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line">  <span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line">  <span class="string">&quot;dot-location&quot;</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line">  <span class="string">&quot;dot-notation&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line">  <span class="string">&quot;eol-last&quot;</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line">  <span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line">  <span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line">  <span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line">  <span class="string">&quot;generator-star-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line">  <span class="string">&quot;guard-for-in&quot;</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line">  <span class="string">&quot;handle-callback-err&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line">  <span class="string">&quot;id-length&quot;</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line">  <span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line">  <span class="string">&quot;init-declarations&quot;</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line">  <span class="string">&quot;key-spacing&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line">  <span class="string">&quot;lines-around-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line">  <span class="string">&quot;max-depth&quot;</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line">  <span class="string">&quot;max-len&quot;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line">  <span class="string">&quot;max-nested-callbacks&quot;</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line">  <span class="string">&quot;max-params&quot;</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line">  <span class="string">&quot;max-statements&quot;</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line">  <span class="string">&quot;new-cap&quot;</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line">  <span class="string">&quot;new-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line">  <span class="string">&quot;newline-after-var&quot;</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line">  <span class="string">&quot;object-curly-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line">  <span class="string">&quot;object-shorthand&quot;</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line">  <span class="string">&quot;one-var&quot;</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line">  <span class="string">&quot;operator-assignment&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line">  <span class="string">&quot;operator-linebreak&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;after&quot;</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line">  <span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line">  <span class="string">&quot;prefer-const&quot;</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line">  <span class="string">&quot;prefer-spread&quot;</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line">  <span class="string">&quot;prefer-reflect&quot;</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line">  <span class="string">&quot;quotes&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>],<span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line">  <span class="string">&quot;quote-props&quot;</span>:[<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line">  <span class="string">&quot;radix&quot;</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line">  <span class="string">&quot;id-match&quot;</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line">  <span class="string">&quot;require-yield&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line">  <span class="string">&quot;semi&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line">  <span class="string">&quot;semi-spacing&quot;</span>: [<span class="number">0</span>, &#123;<span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line">  <span class="string">&quot;sort-vars&quot;</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line">  <span class="string">&quot;space-after-keywords&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line">  <span class="string">&quot;space-before-blocks&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line">  <span class="string">&quot;space-before-function-paren&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line">  <span class="string">&quot;space-in-parens&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line">  <span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line">  <span class="string">&quot;space-return-throw-case&quot;</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line">  <span class="string">&quot;space-unary-ops&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line">  <span class="string">&quot;spaced-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//注释风格不要有空格什么的</span></span><br><span class="line">  <span class="string">&quot;strict&quot;</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line">  <span class="string">&quot;use-isnan&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line">  <span class="string">&quot;valid-jsdoc&quot;</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line">  <span class="string">&quot;valid-typeof&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line">  <span class="string">&quot;vars-on-top&quot;</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line">  <span class="string">&quot;wrap-iife&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;inside&quot;</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line">  <span class="string">&quot;wrap-regex&quot;</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line">  <span class="string">&quot;yoda&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>]<span class="comment">//禁止尤达条件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://segmentfault.com/a/1190000014230857">原文地址 &gt;&gt;&gt;</a></p>
]]></content>
  </entry>
  <entry>
    <title>hello hexo</title>
    <url>//1310372071/</url>
    <content><![CDATA[<h3 id="记录在使用-hexo-过程中的一些心得"><a href="#记录在使用-hexo-过程中的一些心得" class="headerlink" title="记录在使用 hexo 过程中的一些心得"></a>记录在使用 hexo 过程中的一些心得</h3><span id="more"></span>
<h3 id="2020年3月21日"><a href="#2020年3月21日" class="headerlink" title="2020年3月21日"></a>2020年3月21日</h3><p>给文章添加目录</p>
<p>修改 <code>themes/next/_config.yml</code> 下 <code>toc.expand_all</code> 为 <code>true</code></p>
<h3 id="2020年2月３０"><a href="#2020年2月３０" class="headerlink" title="2020年2月３０"></a>2020年2月３０</h3><p>想要首行缩进的时候，必须用全角空格，半角空格是不能有效缩进的</p>
<p>实现首行缩进也可以用 <code>&amp;nsbp;</code></p>
<h3 id="2020年2月29"><a href="#2020年2月29" class="headerlink" title="2020年2月29"></a>2020年2月29</h3><p>编写<code>markdown</code>文档的时候，如果想给写的内容加样式，其实完全可以直接用<code>html</code>的语法写</p>
<p>比如： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/web/js/proto.jpg&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0 auto;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就可以引入一张图片并居中显示图片</p>
<h3 id="在-hexo-使用过程中遇到的一点小坑"><a href="#在-hexo-使用过程中遇到的一点小坑" class="headerlink" title="在 hexo 使用过程中遇到的一点小坑"></a>在 hexo 使用过程中遇到的一点小坑</h3><p>本站使用主题使用的是 <a href="https://github.com/theme-next/hexo-theme-next">next</a> 版本是 7.5.0</p>
<p>到了这个版本，gitalk 是集成在 next 中的， 所以使用起来很方便：</p>
<p>但是还是遇到了坑：</p>
<h3 id="未找到相关的-Issues-进行评论-请联系-admin-初始化创建"><a href="#未找到相关的-Issues-进行评论-请联系-admin-初始化创建" class="headerlink" title="未找到相关的 Issues 进行评论 请联系 @admin 初始化创建"></a>未找到相关的 Issues 进行评论 请联系 @admin 初始化创建</h3><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>​ 找不到，肯定是路径的问题，经过自己反复对比 api 发现</p>
<p><strong>我在配置 OAuth Apps 的时候，Homepage URL 跟 Authorization callback URL 后面加了一个”&#x2F;“</strong></p>
<p><img src="/images/hexo/oauthapp.png"></p>
<p>造成后面加了”&#x2F;“的原因是因为我写 URL 的时候，是直接人浏览器地址栏复制过来的， 默认带”&#x2F;“</p>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>去掉”&#x2F;“, 点击 Update application 按钮， 等个三五分钟， 就可以了</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>//222957957/</url>
    <content><![CDATA[<h3 id="Hello"><a href="#Hello" class="headerlink" title=" Hello "></a><center> Hello </center></h3><center>Adele</center>

<center>Written by：Adele Adkins/Greg Kurstin</center>

<center>Hello it's me</center>

<span id="more"></span>

<center>I was wondering if after all these years you'd like to meet</center>

<center>To go over everything</center>

<center>They say that time's supposed to heal ya but I ain't done much healing</center>

<center>Hello can you hear me</center>

<center>I'm in california dreaming about who we used to be</center>

<center>When we were younger and free</center>

<center>I've forgotten how it felt before the world fell at our feet</center>

<center>There's such a difference between us</center>

<center>And a million miles</center>

<center>Hello from the other side</center>

<center>I must've called a thousand times to tell you</center>

<center>I'm sorry for everything that I've done</center>

<center>But when I call you never seem to be home</center>

<center>Hello from the outside</center>

<center>At least I can say that I've tried to tell you</center>

<center>I'm sorry for breaking your heart</center>

<center>But it don't matter it clearly doesn't tear you apart anymore</center>

<center>Hello how are you</center>

<center>It's so typical of me to talk about myself</center>

<center>I'm sorry I hope that you're well</center>

<center>Did you ever make it out of that town</center>

<center>Where nothing ever happened</center>

<center>It's no secret</center>

<center>That the both of us are running out of time</center>

<center>Hello from the other side</center>

<center>I must've called a thousand times to tell you</center>

<center>I'm sorry for everything that I've done</center>

<center>But when I call you never seem to be home</center>

<center>Hello from the outside</center>

<center>At least I can say that I've tried to tell you</center>

<center>I'm sorry for breaking your heart</center>

<center>But it don't matter it clearly doesn't tear you apart anymore</center>

<center>Ooooohh anymore</center>

<center>Ooooohh anymore</center>

<center>Ooooohh anymore</center>

<center>Anymore</center>

<center>Hello from the other side</center>

<center>I must've called a thousand times to tell you</center>

<center>I'm sorry for everything that I've done</center>

<center>But when I call you never seem to be home</center>

<center>Hello from the outside</center>

<center>At least I can say that I've tried to tell you</center>

<center>I'm sorry for breaking your heart</center>

<center>But it don't matter it clearly doesn't tear you apart anymore</center>
]]></content>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title>js Promise / Generator / await async</title>
    <url>//464566509/</url>
    <content><![CDATA[<p><strong>Promise 是用来解决函数回调嵌套的， async、await 是用来解决逻辑上的函数依赖的。</strong></p>
<span id="more"></span>

<p><code>Promise</code>是一个有状态的对象，用来规范回调函数，内容是一个<code>function(function Promise() &#123; [native code] &#125;)</code>，内部接收一个<code>function</code>，参数为<code>resolve</code>，<code>reject</code>，用于处理耗时操作的等待。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (condition)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(...);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(...);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和 <code>rejected</code>（已失败）</p>
<p>处理成功，调用<code>resolve</code>方法，状态会从 <code>pending</code> 变成 <code>fulfilled</code><br>处理失败，调用<code>reject</code>方法，状态会从 <code>pending</code> 变成 <code>rejected</code><br>一旦状态改变，就不会再变，任何时候都可以得到这个结果</p>
<p><strong>一般注意几点</strong></p>
<ol>
<li><code>.then</code> 可以无限链, 因为每一个 <code>.then</code> 都是返回一个 <code>promise</code> 对象</li>
<li>当 <code>.then</code> 有第二个参数的时候，就算遇到报错，后边 <code>.catch</code> 里边的内容不会再执行</li>
<li><code>.then</code> 里边如果有 return 一个新 <code>Promise</code> 的话，后面的 <code>.then</code> 是新 <code>Promise</code> 的返回结果， 看一下下边代码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>, res); <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>, res); <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>, res); <span class="comment">// 4</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>, res); <span class="comment">// 5</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>Generator 函数</strong></p>
<p>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p>
<p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw = <span class="title function_">helloWorldGenerator</span>();</span><br></pre></td></tr></table></figure>
<p>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。</p>
<p>下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已</strong></p>
<p>比 Generator 的好处</p>
<ol>
<li>内置执行器</li>
<li>更好的语义</li>
<li>更广的适用性</li>
<li>返回值是 Promise</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStockPriceByName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> symbol = <span class="keyword">await</span> <span class="title function_">getStockSymbol</span>(name);</span><br><span class="line">  <span class="keyword">const</span> stockPrice = <span class="keyword">await</span> <span class="title function_">getStockPrice</span>(symbol);</span><br><span class="line">  <span class="keyword">return</span> stockPrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getStockPriceByName</span>(<span class="string">&#x27;goog&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JS __proto__和prototype的区别和关系</title>
    <url>//proto/</url>
    <content><![CDATA[<h3 id="首先，看别人怎么说的："><a href="#首先，看别人怎么说的：" class="headerlink" title="首先，看别人怎么说的："></a>首先，看别人怎么说的：</h3><p>1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)也是对象。<br>它们都会具有对象共有的特点:<br>对象具有属性 <code>__proto__</code>，可称为隐式原型，<strong>一个对象的隐式原型指向构造该对象的构造函数的原型</strong>，这也保证了实例能够访问在构造函数原型中定义的属性和方法。</p>
<span id="more"></span>

<p>2.方法(Function)<br>方法这个特殊的对象，除了和其他对象一样有上述 <code>__proto__</code> 属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例<strong>共享</strong>的属性和方法（我们把这个对象叫做原型对象）。<br>原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。</p>
<img src="/images/web/js/proto.jpg" align="center" style="margin: 0 auto;">

<p>1.构造函数Foo()构造函数的原型属性Foo.prototype指向了原型对象，在原型对象里有共有的方法，所有构造函数声明的实例（这里是f1，f2）都可以共享这个方法。</p>
<p>2.原型对象Foo.prototypeFoo.prototype保存着实例共享的方法，有一个指针constructor指回构造函数。</p>
<p>3.实例f1和f2是Foo这个对象的两个实例，这两个对象也有属性__proto__，指向构造函数的原型对象，这样子就可以像上面1所说的访问原型对象的所有方法啦。另外：构造函数Foo()除了是方法，也是对象啊，它也有__proto__属性，指向谁呢？指向它的构造函数的原型对象呗。函数的构造函数不就是Function嘛，因此这里的__proto__指向了Function.prototype。其实除了Foo()，Function(), Object()也是一样的道理。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>__proto__</code>（隐式原型)<br>　　JavaScript中任意对象都有一个内置属性[[prototype]]，在ES5之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过__proto__来访问</p>
<p><a href="/prototype.html"><code>prototype</code>（显式原型）</a><br>　　每一个函数在创建之后都会拥有一个名为prototype的属性，这个属性指向函数的原型对象。</p>
<p>js中每个数据类型都是对象（除了null和undefined），而每个对象都继承自另外一个对象，后者称为“原型”（prototype）对象，只有null除外，它没有自己的原型对象。</p>
<blockquote>
<p>每一个函数在创建之后都会拥有一个名为prototype的属性，这个属性指向函数的原型对象。</p>
</blockquote>
<h3 id="proto-跟-prototype的关系"><a href="#proto-跟-prototype的关系" class="headerlink" title="__proto__ 跟 prototype的关系"></a><code>__proto__</code> 跟 prototype的关系</h3><ol>
<li><p>对象有属性<code>__proto__</code>, 指向该对象的构造函数的原型对象。</p>
</li>
<li><p>方法除了有属性<code>__proto__</code>,还有属性<code>prototype</code>，<code>prototype</code>指向该方法的原型对象。</p>
</li>
</ol>
<h2 id="然后，自己理解"><a href="#然后，自己理解" class="headerlink" title="然后，自己理解"></a>然后，自己理解</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我有一个构造函数 Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">naem</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个构造函数的原型对象是 Person.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Pserson 实例出一个人 ahui</span></span><br><span class="line"><span class="keyword">let</span> ahui = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ahui&#x27;</span>);</span><br><span class="line"><span class="comment">// 现在 ahui 也是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 则 ahui 的 __proro__ 指向 Person 的原型对象 Person.prototype</span></span><br><span class="line">ahui.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>通过上边的代码， 我们是不是可以想像一下:<br>构造函数<code>funcion Person </code> 是不是也可以理解它是另外一个构造函数构<code>Funcion</code>造出来的 ?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// ture</span></span><br></pre></td></tr></table></figure>

<p>想像成立！！</p>
<p>那这个时间是不是又有可能在想 <code>Function</code> 又是谁造出来的呢？ </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>  <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>再看一段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// ture</span></span><br></pre></td></tr></table></figure>
<p>instanceof  左边操作数的__proto__原型链上是否包括右边操作数的prototype</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>  <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>是不是有点意思 ？？？</p>
<p>参考下面文档：</p>
<p><a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/">JavaScript instanceof 运算符深入剖析</a></p>
<p><a href="https://www.zhihu.com/question/34183746">js中__proto__和prototype的区别和关系</a></p>
<p><a href="https://blog.csdn.net/liu_yunzhao/article/details/90085497">JS中Function和Object的关系研究分析</a></p>
<p><a href="https://www.cnblogs.com/wjw-blog/p/7002202.html">JavaScript之Function 和 Object 的区别和联系</a></p>
<p><a href="https://www.jianshu.com/p/5f57dd643bfd">JS Function与Object关系</a></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>js 多维数组(数独)扁平化</title>
    <url>//1909019848/</url>
    <content><![CDATA[<p>[1, 2, 3, [4, 5, 6, [7, 8], 9], 10] &#x3D;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>
<span id="more"></span>

<h3 id="reduce-concat"><a href="#reduce-concat" class="headerlink" title="reduce + concat"></a>reduce + concat</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenDeep</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(curr) ? acc.<span class="title function_">concat</span>(<span class="title function_">flattenDeep</span>(curr)) : acc.<span class="title function_">concat</span>(curr), [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>], <span class="number">9</span>], <span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattenDeep</span>(a))</span><br></pre></td></tr></table></figure>

<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenDeep</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Number</span>(item))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>], <span class="number">9</span>], <span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattenDeep</span>(a))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是什么高级方法 ！！！</p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenDeep</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">            res = res.<span class="title function_">concat</span>(<span class="title function_">flattenDeep</span>((item)))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>], <span class="number">9</span>], <span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattenDeep</span>(a))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原理跟reduce的一样， 应该说 reduce 的原理跟这个一样</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>mac 电脑支持 NTFS</title>
    <url>//2922130013/</url>
    <content><![CDATA[<h2 id="让-mac-快速支持-NTFS，-无需安装任何软件"><a href="#让-mac-快速支持-NTFS，-无需安装任何软件" class="headerlink" title="让 mac 快速支持 NTFS， 无需安装任何软件"></a>让 mac 快速支持 NTFS， 无需安装任何软件</h2><span id="more"></span>

<h3 id="开启流程简介"><a href="#开启流程简介" class="headerlink" title="开启流程简介"></a>开启流程简介</h3><ol>
<li>挂载上你的 NTFS 硬盘，查看硬盘名称</li>
<li>编辑&#x2F;etc&#x2F;fstab 文件，使其支持 NTFS 写入</li>
<li>将&#x2F;Volumes 中的 NTFS 磁盘快捷方式到 Finder</li>
</ol>
<h3 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h3><ol>
<li>插上硬盘后，查看你的硬盘名称，这里假设名称是 AngleDisk，牢记之（你的可不是这个呀！！</li>
<li>打开 Applications 的 Terminal, 你也可以直接 spotlight 输入 terminal 打开</li>
<li>在终端输入 sudo nano &#x2F;etc&#x2F;fstab 敲击回车</li>
<li>现在你看到了一个编辑界面，输入 LABEL&#x3D;AngleDisk none ntfs rw,auto,nobrowse 后，敲击回车，再 Ctrl+X，再敲击 Y，再敲击回车</li>
<li>此时，退出你的移动硬盘，再重新插入，你会发现磁盘没有显示在桌面或是 Finder 之前出现的地方，别慌</li>
<li>打开 Finder，Command+Shift+G，输入框中输入&#x2F;Volumes，回车，你就可以看到你的磁盘啦！是可以读写的</li>
<li>方便起见，你可以直接把磁盘拖到 Finder 侧边栏中，这样下次使用就不用进入到&#x2F;Volumes 目录打开了</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>nginx 常用配置</title>
    <url>//1508208186/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>react render 原理</title>
    <url>//2202868307/</url>
    <content><![CDATA[<p>JSX 代码经过 babel 编译之后变成 React.createElement 的表达式，这个表达式在 render 函数被调用的时候执行生成一个 element。</p>
<p>在首次渲染的时候，先去按照规则初始化 element，接着 ReactComponentComponentWrapper 通过递归，最终调用 ReactDOMComponent 的 mountComponent 方法来帮助生成真实 DOM 节点。</p>
<p>地址一： <a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651229767&idx=1&sn=8f06283e43cfcda722189b56644f4dfc&chksm=bd4957c38a3eded58cd388130c4f303ff4033213ffcf157698d50f1ebfe87788a7f74d8be76a&scene=21#wechat_redirect">React 从渲染原理到性能优化（一）</a></p>
<p>地址二： <a href="https://mp.weixin.qq.com/s/aM-SkTsQrgruuf5wy3xVmQ">React 从渲染原理到性能优化（二）– 更新渲染</a></p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 父子组件的生命周期顺序</title>
    <url>//677899705/</url>
    <content><![CDATA[<h3 id="加载渲染过程"><a href="#加载渲染过程" class="headerlink" title="加载渲染过程"></a>加载渲染过程</h3><span id="more"></span>

<h4 id="同步加载"><a href="#同步加载" class="headerlink" title="同步加载"></a>同步加载</h4><p>父组件 beforeCreate,  created, beforMount<br>子组件 beforeCreate, created, beforMount<br>孙子组件 beforeCreate, created, beforMount<br>孙子组件 mounted<br>子组件 mounted<br>父组件 mounted</p>
<h4 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h4><p>父组件 beforeCreate, created, beforMount, mounted<br>子组件 beforeCreate, created, beforMount, mounted</p>
<h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><p>父组件 beforeUpdate<br>子组件 beforeUpdate<br>子组件 updated<br>父组件 updated</p>
<h3 id="销毁过程"><a href="#销毁过程" class="headerlink" title="销毁过程"></a>销毁过程</h3><p>父组件 beforeDestroy<br>子组件 beforeDestroy<br>子组件 destroyed<br>父组件 destroyed</p>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>vue 原理</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex Store store 千万别写错了</title>
    <url>//4068032706/</url>
    <content><![CDATA[<h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>刚才在使用vuex 的时候，碰到一个 this.$store 总是为 undefine 的问题</p>
<p>一开始的时候从控制台看到的是使用 action 的 this.$store.dispatch  的时候的报错</p>
<span id="more"></span>

<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">changeSourceSQL</span>(<span class="params">sql</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;updateSourceSQL&#x27;</span>, sql)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>报错信息</p>
<p><img src="/images/vuex/1.png"></p>
<h4 id="分析过程："><a href="#分析过程：" class="headerlink" title="分析过程："></a>分析过程：</h4><p><strong>【分析】</strong></p>
<p>看到这种报错的时候， 肯定先进一步打印 dispatch 的上一级：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">changeSourceSQL</span>(<span class="params">sql</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sql, <span class="variable language_">this</span>.<span class="property">$store</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;updateSourceSQL&#x27;</span>, sql)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>结果是 undefined</p>
<p><img src="/images/vuex/2.png"></p>
<p><strong>【分析】</strong></p>
<p>很明显这是因为$store 挂载到全局的时候失败了</p>
<p>此时，再去看 入口文件 index.js</p>
<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;babel-polyfill&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Store</span> <span class="keyword">from</span> <span class="string">&quot;../store/index.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Routers</span> <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./app.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ViewUI</span> <span class="keyword">from</span> <span class="string">&quot;view-design&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../my-theme/index.less&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ViewUI</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Store</span>)  <span class="comment">// 调试的时候打印一下这个， 看是不是 Store 为 null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RouterConfig</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;hash&quot;</span>,</span><br><span class="line">  <span class="attr">routes</span>: <span class="title class_">Routers</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(<span class="title class_">RouterConfig</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="title class_">Store</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 看上去没问题 ！！！！</p>
<p>并且打印的 Store 也有内容：</p>
<p><img src="/images/vuex/3.png"></p>
<p>但是， store 就是没有挂载成功</p>
<p>看 API  ！！！</p>
<p>看 API  ！！！</p>
<p>看 API  ！！！</p>
<h4 id="找到原因："><a href="#找到原因：" class="headerlink" title="找到原因："></a>找到原因：</h4><p>原文：<a href="https://vuex.vuejs.org/zh/guide/state.html">vuex state</a></p>
<blockquote>
<p>通过在根实例中注册 <code>store</code> 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到</p>
</blockquote>
<p><strong>文档里说是 store 选项， 对一定要看清楚，是 store 不是 Store</strong></p>
<h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>【解决】</p>
<p>把 index.js 里边的 Store 改成 store  完美运行</p>
<p>如果上边是写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Store</span> <span class="keyword">from</span> <span class="string">&quot;../store/index.js&quot;</span></span><br></pre></td></tr></table></figure>

<p>那么下边也可以写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">store</span>: <span class="title class_">Store</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>【最后，附上目录结构】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── api</span><br><span class="line">│   ├── base.js</span><br><span class="line">│   └── index.js</span><br><span class="line">├── components</span><br><span class="line">│   ├── base-info.vue</span><br><span class="line">│   ├── dataview.vue</span><br><span class="line">│   ├── editer.vue</span><br><span class="line">│   └── setkey.vue</span><br><span class="line">├── my-theme</span><br><span class="line">│   ├── base.less</span><br><span class="line">│   └── index.less</span><br><span class="line">├── pages</span><br><span class="line">│   ├── app.vue</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── router.js</span><br><span class="line">├── store</span><br><span class="line">│   ├── actions.js</span><br><span class="line">│   ├── getters.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── mutations.js</span><br><span class="line">│   └── state.js</span><br><span class="line">└── views</span><br><span class="line">    ├── index.vue</span><br><span class="line">    ├── relationship.vue</span><br><span class="line">    ├── report.vue</span><br><span class="line">    ├── transform.vue</span><br><span class="line">    └── upload.vue</span><br></pre></td></tr></table></figure>



<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>【总结】</p>
<p>其实这是一个很小的问题， 但是也是体现了平时项目中不细心，自己去从零开始写 vuex的经验少，基本功不扎实等问题</p>
<p>多自己从零开始建项目，写项目可以很好的巩固自己的基本功</p>
]]></content>
      <categories>
        <category>bugfix</category>
      </categories>
      <tags>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>vue常见API原理分析</title>
    <url>//3258801602/</url>
    <content><![CDATA[<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><span id="more"></span>

<h4 id="oberserver"><a href="#oberserver" class="headerlink" title="oberserver"></a>oberserver</h4><p><code>Object.defineProperty()</code></p>
<h4 id="dep"><a href="#dep" class="headerlink" title="dep"></a>dep</h4><p><code>dep.notify()</code></p>
<h4 id="watcher"><a href="#watcher" class="headerlink" title="watcher"></a>watcher</h4><p><code>user-watcher</code>  <code>render-watcher</code>  <code>computed-watcher</code></p>
<h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><blockquote>
<p><code>nextTick</code> 会在<code>DOM</code>更新完毕之后执行一个回调，确保我们操作的是更新之后的<code>DOM</code></p>
</blockquote>
<p><code>vue</code>用异步队列的方式来控制<code>DOM</code>更新和<code>nextTick</code>回调先后执行<br><code>microtask</code>因为其高优先级特性，能确保队列中的微任务在一次事件循环前被执行完毕<br>因为兼容性问题，<code>vue</code>不得不做了<code>microtask</code>向<code>macrotask</code>的降级方案 (<code>Promise</code>，<code>MutationObserver</code>，<code>setTimeout</code>)</p>
<ol>
<li>MutationObserver</li>
</ol>
<p>用于监听<code>DOM</code>修改事件，能够监听到节点的属性，文本内容，子节点等的改动</p>
<ol start="2">
<li>Event Loop</li>
</ol>
<p>MutationObserver 每次监听到变更的时候会往 microtask 添加一个事件</p>
<ol start="3">
<li>降级方案</li>
</ol>
<p>Promise &#x3D;&gt; MutationObserver &#x3D;&gt; setTimeout</p>
<p><a href="https://www.cnblogs.com/liuhao-web/p/8919623.html">参考文档&gt;&gt;&gt;</a></p>
<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initData()</span><br><span class="line">initCompunted()</span><br><span class="line">defineComputed()</span><br><span class="line">Object.defineProperty()</span><br><span class="line">get: createCompuntedGetter()</span><br><span class="line">watcher()</span><br><span class="line">watcher.evaluate()</span><br><span class="line">watcher.depend()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里的变量<code>watcher</code>就是之前<code>computed</code>对应的<code>computed-watcher</code>实例，接下来会执行<code>Watcher</code>类专门为计算属性定义的两个方法，在执行<code>evaluate</code>方法进行求值的过程中又会触发<code>computed</code>内可以访问到的响应式数据的<code>get</code>，它们会将当前的<code>computed-watcher</code>作为依赖收集到自己的<code>dep</code>里，计算完毕之后将<code>dirty</code>置为<code>false</code>，表示已经计算过了。</p>
</blockquote>
<blockquote>
<p>然后执行<code>depend</code>让计算属性内的响应式数据订阅当前的<code>render-watcher</code>，所以<code>computed</code>内的响应式数据会收集<code>computed-watcher</code>和<code>render-watcher</code>两个<code>watcher</code>，当<code>computed</code>内的状态发生变更触发<code>se</code>t后，首先通知<code>computed</code>需要进行重新计算，然后通知到视图执行渲染，再渲染中会访问到<code>computed</code>计算后的值，最后渲染到页面。</p>
</blockquote>
<p>为什么计算属性有缓存功能？</p>
<p>因为当计算属性经过计算后，内部的标志位会表明已经计算过了，再次访问时会直接读取计算后的值</p>
<p>为什么计算属性内的响应式数据发生变更后，计算属性会重新计算？</p>
<p>因为内部的响应式数据会收集<code>computed-watcher</code>，变更后通知计算属性要进行计算，也会通知页面重新渲，渲染染时会读取到重新计算后的值。</p>
<h3 id="watcher-1"><a href="#watcher-1" class="headerlink" title="watcher"></a>watcher</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch监听属性收集依赖过程</span><br><span class="line"></span><br><span class="line">root =&gt; _init()    根组件初始化</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">root =&gt; vm._update(vm._render())   根组件渲染，没状态不用收集依赖</span><br><span class="line">  app =&gt; initData()                 初始化App组件的data</span><br><span class="line">  app =&gt; oberserver(name)           将name转为响应式</span><br><span class="line">  app =&gt; initWatch(watch)           初始化watch</span><br><span class="line">  app =&gt; this.$watch(&#x27;name&#x27;)        主要就是这里： 触发name的get， 让dep收集user-watcher </span><br><span class="line">  app =&gt; Sub.$mont()                子组件挂载</span><br><span class="line">  app =&gt; new Watcher(vm, geeter)    实例化 render-watcher</span><br><span class="line">  app =&gt; vm._render()               触发name的get， 让dep收集render-watcher</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  watch监听属性派发更新</span><br><span class="line"></span><br><span class="line">  app =&gt; name = &#x27;www&#x27;               响应式数据被贱赋值，触发set</span><br><span class="line">  app =&gt; dep.nofity()               dep通知收集到的watcher</span><br><span class="line">  app =&gt; user-watcher               user-watcher派发新值跟旧值给回调函数</span><br><span class="line">  app =&gt; render-watcher             redner-wachter改变视图</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>watch</code>和<code>this.$watch</code>的实现是一致的，以及简单解释它的原理就是为需要观察的数据创建并收集·，当数据改变时通知到·将新值和旧值传递给用户自己定义的回调函数。</p>
<p>定义watch时会被使用到的三个参数：<code>sync</code>、<code>immediate</code>、<code>deep</code></p>
<p>简单说明它们的实现原理就是：<code>sync</code>是不将watcher加入到nextTick队列而同步的更新、<code>immediate</code>是立即以得到的值执行一次回调函数、<code>deep</code>是递归的对它的子值进行依赖收集。</p>
<h3 id="虚拟DOM生成真实DOM的过程"><a href="#虚拟DOM生成真实DOM的过程" class="headerlink" title="虚拟DOM生成真实DOM的过程"></a>虚拟DOM生成真实DOM的过程</h3><ol>
<li>元素节点生成<code>Dom</code></li>
</ol>
<p>里向外的挨个创建出真实的<code>Dom</code>，然后插入到它的父节点内，最后将创建好的<code>Dom</code>插入到<code>body</code>内，完成创建的过程</p>
<ol start="2">
<li>组件VNode生成<code>Dom</code></li>
</ol>
<blockquote>
<p>无论是嵌套多么深的组件，遇到组件的后就执行<code>init</code>，在<code>init</code>的<code>__patch__</code>过程中又遇到嵌套组件，那就再执行嵌套组件的<code>init</code>，嵌套组件完成<code>__patch__</code>后将真实的<code>Dom</code>插入到它的父节点内，接着执行完外层组件的<code>__patch__</code>又插入到它的父节点内，最后插入到<code>body</code>内，完成嵌套组件的创建过程，总之还是一个由里及外的过程</p>
</blockquote>
<h3 id="extend和-mount"><a href="#extend和-mount" class="headerlink" title="extend和$mount"></a>extend和$mount</h3><p>这两个都是<code>vue</code>提供的API，不过在平时的业务开发中使用并不多。在<code>vue</code>的内部也有使用过这一对API。遇到嵌套组件时，首先将子组件转为组件形式的VNode时，会将引入的组件对象使用extend转为子组件的构造函数，作为VNode的一个属性Ctor；然后在将VNode转为真实的<code>Dom</code>的时候实例化这个构造函数；最后实例化完成后手动调用$mount进行挂载，将真实<code>Dom</code>插入到父节点内完成渲染。</p>
<h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h4><blockquote>
<p>接受的是一个组件对象，再执行extend时将继承基类构造器上的一些属性、原型方法、静态方法等，最后返回Sub这么一个构造好的子组件构造函数。拥有和<code>vue</code>基类一样的能力，并在实例化时会执行继承来的_init方法完成子组件的初始化。</p>
</blockquote>
<h4 id="实例化Sub"><a href="#实例化Sub" class="headerlink" title="实例化Sub"></a>实例化Sub</h4><blockquote>
<p>执行_init组件初始化的一系列操作，初始化事件、生命周期、状态等等。将data或props内定义的变量挂载到当前this实例下，最后返回一个实例化后的对象。</p>
</blockquote>
<h4 id="mount"><a href="#mount" class="headerlink" title="$mount"></a>$mount</h4><blockquote>
<p>在得到初始化后的对象后，开始组件的挂载。首先将当前render函数转为VNode，然后将VNode转为真实Dom插入到页面完成渲染。再完成挂载之后，会在当前组件实例this下挂载$el属性，它就是完成挂载后对应的真实Dom，我们就需要使用这个属性。</p>
</blockquote>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>请问<code>runtime-compiler</code>和<code>runtime-only</code>这两个版本的区别？</li>
</ol>
<blockquote>
<p><code>runtime-compiler</code> 经历的是一个 <code>template -&gt; ast -&gt; render -&gt; vdom -&gt; UI</code> 的过程，<br><code>runtime-only</code>直接使用了<code>render</code>函数，所以经历的是一个 <code>render -&gt; vdom -&gt; UI</code> 的过程。 <code>runtime-only</code> 会省去一个 <code>template -&gt; ast -&gt; render</code> 的过程，也不再需要相关的<code>loader</code>插件，从而这种方法搭建的项目性能更高，代码也更少，项目大小也更小。<br>最明显的就是大小的区别，带编译器会比不带的版本大6kb。</p>
</blockquote>
<ol start="2">
<li>请问可以在<code>beforeCreate</code>钩子内通过<code>this</code>访问到<code>data</code>中定义的变量么，为什么以及请问这个钩子可以做什么？</li>
</ol>
<blockquote>
<p>是不可以访问的，因为在<code>vue</code>初始化阶段，这个时候<code>data</code>中的变量还没有被挂载到<code>this</code>上，这个时候访问值会是<code>undefined</code>。<br><code>beforeCreate</code>这个钩子在平时业务开发中用的比较少，而像插件内部的<code>instanll</code>方法通过<code>Vue.use</code>方法安装时一般会选在<code>beforeCreate</code>这个钩子内执行，<code>vue-router</code>和<code>vuex</code>就是这么干的。</p>
</blockquote>
<ol start="3">
<li>请问<code>methods</code>内的方法可以使用箭头函数么，会造成什么样的结果？</li>
</ol>
<blockquote>
<p>是不可以使用箭头函数的，因为箭头函数的<code>this</code>是定义时就绑定的。<br>在vue的内部，<code>methods</code>内每个方法的上下文是当前的vm组件实例，<code>methods[key].bind(vm)</code>，而如果使用使用箭头函数，函数的上下文就变成了父级的上下文，也就是<code>undefined</code>了，结果就是通过<code>undefined</code>访问任何变量都会报错。</p>
</blockquote>
<ol start="4">
<li>请问vue@2为什么要引入虚拟Dom，谈谈对虚拟Dom的理解？</li>
</ol>
<blockquote>
<p>随着现代应用对页面的功能要求越复杂，管理的状态越多，如果还是使用之前的JavaScript线程去频繁操作GUI线程的硕大Dom，对性能会有很大的损耗，而且也会造成状态难以管理，逻辑混乱等情况。引入虚拟Dom后，在框架的内部就将虚拟Dom树形结构与真实Dom做了映射，让我们不用在命令式的去操作Dom，可以将重心转为去维护这棵树形结构内的状态即可，状态的变化就会驱动Dom发生改变，具体的Dom操作vue帮我们完成，而且这些大部分可以在JavaScript线程完成，性能更高<br>虚拟Dom只是一种数据结构，可以让它不仅仅使用在浏览器环境，还可以用与SSR以及Weex等场景。</p>
</blockquote>
<ol start="5">
<li>父子两个组件同时定义了<code>beforeCreate</code>、<code>created</code>、<code>beforeMounte</code>、<code>mounted</code>四个钩子，它们的执行顺序是怎么样的？</li>
</ol>
<blockquote>
<p>首先会执行父组件的初始化过程，所以会依次执行<code>beforeCreate</code>、<code>created</code>、在执行挂载前又会执行<code>beforeMounte</code>钩子，不过在生成真实dom的<code>__patch__</code>过程中遇到嵌套子组件后又会转为去执行子组件的初始化钩子<code>beforeCreate</code>、<code>created</code>，子组件在挂载前会执行<code>beforeMounte</code>，再完成子组件的Dom创建后执<code>行mounted</code>。这个父组件的<code>__patch__</code>过程才算完成，最后执行父组件的<code>mounted</code>钩子，这就是它们的执行顺序。执行顺序如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parent beforeCreate</span><br><span class="line">parent created</span><br><span class="line">parent beforeMounte</span><br><span class="line">    child beforeCreate</span><br><span class="line">    child created</span><br><span class="line">    child beforeMounte</span><br><span class="line">    child mounted</span><br><span class="line">parent mounted</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>当前组件模板中用到的变量一定要定义在data里么？</li>
</ol>
<blockquote>
<p>data中的变量都会被代理到当前this下，所以我们也可以在this下挂载属性，只要不重名即可。而且定义在data中的变量在vue的内部会将它包装成响应式的数据，让它拥有变更即可驱动视图变化的能力。但是如果这个数据不需要驱动视图，定义在created或mounted钩子内也是可以的，因为不会执行响应式的包装方法，对性能也是一种提升。</p>
</blockquote>
<ol start="7">
<li>请简单描述下vue响应式系统？</li>
</ol>
<blockquote>
<p>简单来说就是使用Object.defineProperty这个API为数据设置get和set。  当读取到某个属性时，触发get将读取它的组件对应的render watcher收集起来；当重置赋值时，触发set通知组件重新渲染页面。<br>如果数据的类型是数组的话，还做了单独的处理，对可以改变数组自身的方法进行重写，因为这些方法不是通过重新赋值改变的数组，不会触发set，所以要单独处理。<br>响应系统也有自身的不足，所以官方给出了$set和$delete来弥补。</p>
</blockquote>
<ol start="8">
<li>为什么v-for里建议为每一项绑定key，而且最好具有唯一性，而不建议使用index？</li>
</ol>
<blockquote>
<p>diff比对内部做更新子节点时，会根据oldVnode内没有处理的节点得到一个key值和下标对应的对象集合，为的就是当处理vnode每一个节点时，能快速查找该节点是否是已有的节点，从而提高整个diff比对的性能。<br>如果是一个动态列表，key值最好能保持唯一性，但像轮播图那种不会变更的列表，使用index也是没问题的。</p>
</blockquote>
<ol start="9">
<li>说下自定义事件的机制。</li>
</ol>
<blockquote>
<p>子组件使用this.$emit触发事件时，会在当前实例的事件中心去查找对应的事件，然后执行它。不过这个事件回调是在父组件的作用域里定义的，所以$emit里的参数会传递给父组件的回调函数，从而完成父子组件通信。</p>
</blockquote>
<ol start="10">
<li>请说明下组件库中命令式弹窗组件的原理？</li>
</ol>
<blockquote>
<p>使用<code>extend</code>将组件转为构造函数，在实例化这个这个构造函数后，就会得到<code>$el</code>属性，也就是组件的真实<code>Dom</code>，这个时候我们就可以操作得到的真实的<code>Dom</code>去任意挂载，使用命令式也可以调用。</p>
</blockquote>
<ol start="11">
<li>请说明下<code>transition</code>组件的实现原理？</li>
</ol>
<blockquote>
<p><code>transition</code>组件是一个抽象组件，不会渲染出任何的<code>Dom</code>，它主要是帮助我们更加方便的写出动画。<br>以插槽的形式对内部单一的子节点进行动画的管理，在渲染阶段就会往子节点的虚拟<code>Dom</code>上挂载一个<code>transition</code>属性，表示它的一个被<code>transition</code>组件包裹的节点，在<code>path</code>阶段就会执行<code>transition</code>组件内部钩子，钩子里分为<code>enter</code>和<code>leave</code>状态，在这个被包裹的子节点上使用<code>v-if</code>或<code>v-show</code>进行状态的切换。<br>你可以使用<code>Css</code>也可以使用<code>JavaScript</code>钩子，使用<code>Css</code>方式时会在<code>enter/leave</code>状态内进行<code>class</code>类名的添加和删除，用户只需要写出对应类名的动画即可。<br>如果使用<code>JavaScript</code>钩子，则也是按照顺序的执行指定的函数，而这些函数也是需要用户自己定义，组件只是控制这个的流程而已。</p>
</blockquote>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端知识点 check list</title>
    <url>//web/</url>
    <content><![CDATA[<h2 id="Don’t-be-anxious-just-do-it"><a href="#Don’t-be-anxious-just-do-it" class="headerlink" title="Don’t be anxious, just do it."></a>Don’t be anxious, just do it.</h2><!--  -->
<span id="more"></span>

<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ol>
<li><input checked="" disabled="" type="checkbox"> <a href="/cache.html">浏览器缓存</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/3152193188.html">性能优化 地址栏输完 url， 回车之后，浏览器做了哪些工作</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/1405041715.html">JS数据类型 基本数据类型和复杂类型的区别</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/prototype.html">js prototype的理解</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/proto.html">js 中<code>__proto__</code>和 <code>prototype</code> 的区别和关系</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/isArray.html">判断变量是数组的方法</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/1015335320.html">原型与原型链</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/3315289936.html">new 一个对象的过程</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/1882318475.html">JS 函数实参转换为数组</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/3369490582.html">typeof instanceof 底层原理实现</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/3915840815.html">this指向,箭头函数特点</a><!-- 12. [ ] call apply bind 的区别 bind方法的实现 --></li>
<li>事件轮询, promise, async await</li>
<li><input disabled="" type="checkbox"> Promisetry产生的初衷 可以用catch吗 <a href="https://segmentfault.com/a/1190000018586947">什么是Promise.try</a></li>
<li>script 标签 defer async</li>
<li>axois实现原理</li>
<li>对象、数组、map、set，等遍历的方法，分别怎么用的，什么原理（想要for of能遍历原型上的东西，可以用iterator）</li>
<li>跨域以及使用cors浏览器需要做什么处理  为什么要跨域，为什么要有事件轮询的机制  限制了什么，主要是限制cookie</li>
<li>各种继承方案（主要是红宝书里的）</li>
<li>三次握手，四次挥手详细了解，对https的了解</li>
<li>cookie和session区别（cookie的数据是服务端返回后通过什么存到浏览器的，然后跨域会到服务器么，（分两个阶段）， cookie知多少包括用法，特性，domain和基本封装）</li>
<li>防止js攻击，xss crfs知多少</li>
<li>预编译以及变量声明提升函数提升等</li>
<li>Websocket</li>
<li>对浏览器兼容性的理解和方法或者做过哪些兼容性处理</li>
<li>正则表达式匹配（转换时间，验证手机号等）</li>
<li><input disabled="" type="checkbox"> symbol作用</li>
<li><input disabled="" type="checkbox"> es5和es6区别</li>
<li><input disabled="" type="checkbox"> es5实现es6的class</li>
</ol>
<h3 id="JS-算法"><a href="#JS-算法" class="headerlink" title="JS 算法"></a>JS 算法</h3><ol>
<li><input disabled="" type="checkbox"> 数据去重</li>
<li><input disabled="" type="checkbox"> 去掉首尾空格</li>
<li><input disabled="" type="checkbox"> 排序</li>
<li><input disabled="" type="checkbox"> 深度拷贝</li>
<li><input disabled="" type="checkbox"> 斐波那契数列求和</li>
<li><input disabled="" type="checkbox"> js操tabletable作并对排序</li>
<li><input disabled="" type="checkbox"> 找出所有乘数</li>
</ol>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol>
<li><input disabled="" type="checkbox"> flex(需要详细说明每个属性),flex1是什么</li>
<li><input disabled="" type="checkbox"> positionsticky</li>
<li><input disabled="" type="checkbox"> 盒模型</li>
<li><input disabled="" type="checkbox"> 百分比和vh的区别，height 100%和100vh的区别</li>
<li><input disabled="" type="checkbox"> em,rem计算</li>
<li><input disabled="" type="checkbox"> 垂直居中方式</li>
<li><input disabled="" type="checkbox"> BFC相关知识</li>
<li><input disabled="" type="checkbox"> 重排触发重新绘制的原理</li>
<li><input disabled="" type="checkbox"> 节流防抖实现</li>
</ol>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ol>
<li><input disabled="" type="checkbox"> 做过和哪些回流和重绘相关的优化</li>
<li><input disabled="" type="checkbox"> 虚拟dom的diff</li>
<li><input disabled="" type="checkbox"> useEffect</li>
<li><input disabled="" type="checkbox"> hook</li>
<li><input disabled="" type="checkbox"> 新的声明周期</li>
<li><input disabled="" type="checkbox"> immutablereselect和有什么好处</li>
<li><input disabled="" type="checkbox"> 生命周期hook</li>
<li><input disabled="" type="checkbox"> react列表key</li>
</ol>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ol>
<li><input disabled="" type="checkbox"> vue双向绑定的原理（vue答双向绑定的时候结合一些complie和watcher等流程答）（complie编译器编译的都是哪些东西，怎么抄编译的，把什么编译成什么）</li>
<li><input disabled="" type="checkbox"> 实现一个vue底层的简单监听函数，就是实现订阅者发布者模式</li>
<li><input disabled="" type="checkbox"> vue父子组件传值（多种方式）以及vuex</li>
<li><input disabled="" type="checkbox"> vue生命周期及每阶段都能做什么（vue父子组件嵌套生命周期的顺序）</li>
<li><input disabled="" type="checkbox"> vue router跳转的原理（刷新不刷新）</li>
<li><input disabled="" type="checkbox"> vue的高级用法</li>
<li><input disabled="" type="checkbox"> vuex是否是持久化的，持久化是需要结合本地缓存么</li>
<li><input disabled="" type="checkbox"> seo渲染是在服务器端的，会出现白屏情况，vue渲染是会先加载结构的，慢慢渲染</li>
<li><input disabled="" type="checkbox"> vue兼容性（2.0版本）（ie9以下不兼容因为object.defineProperty的兼容性）</li>
<li><input disabled="" type="checkbox"> vue源码知多少</li>
<li><input disabled="" type="checkbox"> jquery和vue区别和react的区别，mvc和mvvm框架区别，模块化那些区别</li>
<li><input disabled="" type="checkbox"> props穿的数据和data里数据的区别</li>
<li><input disabled="" type="checkbox"> Vue首次渲染页面时触发了哪些生命周期，props传数据时又触发了哪些生命周期</li>
<li><input disabled="" type="checkbox"> vuex的api可以set（也能实现数据劫持），v-html，v-for, v-if同时用会怎么样，v-once，插槽等</li>
</ol>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><ol>
<li><input disabled="" type="checkbox"> 做过哪些优化</li>
<li>手写一个尽量多功能的webpack（快手问的QAQ）</li>
</ol>
<h3 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h3><ol>
<li><input disabled="" type="checkbox"> 项目遇到的问题及解决方式</li>
</ol>
<h3 id="Ts"><a href="#Ts" class="headerlink" title="Ts"></a>Ts</h3><ol>
<li><input disabled="" type="checkbox"> 为什么要是用Ts</li>
</ol>
<h3 id="开放题"><a href="#开放题" class="headerlink" title="开放题"></a>开放题</h3><ol>
<li><input disabled="" type="checkbox"> 如何设计组件table或UI</li>
</ol>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol>
<li><input disabled="" type="checkbox"> IndexDB</li>
<li><input disabled="" type="checkbox"> 数据库选型</li>
<li><input disabled="" type="checkbox"> link用法原理能干啥与@import区别等</li>
<li><input disabled="" type="checkbox"> 浏览器几个标签页之间怎么传递数据</li>
<li><input disabled="" type="checkbox"> Flutter</li>
<li><a href="/1508208186.html">nginx 常用配置</a></li>
</ol>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="js-异步编程"><a href="#js-异步编程" class="headerlink" title="js 异步编程"></a>js 异步编程</h4><ol>
<li>回调</li>
<li>事件监听</li>
<li>发布&#x2F;订阅</li>
<li>promise</li>
<li>generator yield;</li>
<li>async wait (终级方法)</li>
</ol>
<h4 id="promise-使用以及实现"><a href="#promise-使用以及实现" class="headerlink" title="promise 使用以及实现"></a>promise 使用以及实现</h4><p>击鼓传花， 每隔n出列一个人，求最后那个<br>mobox原理<br>node使用场景</p>
<p>柯理化实现<br>两个数组求交集</p>
<p>合并两个有序数组为一个有序数组<br>无序数组中的最大数和第二大数</p>
<p>Vue如何实现双向绑定<br>template模版编译过程<br>vue router 实现原理<br>navigator 实现原理</p>
<p>webpack 源码分析<br>https原理和tcp协议原理<br>http缓存问题</p>
<p>vuex的设计模式</p>
<p>深拷贝<br>数组去重<br>如何快速创建一个长度为100数值为1的数组<br>node next<br>盒子模型<br>垂直居中<br>flex布局跟浮动布局<br>排序算法<br>判断对象和数组</p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 的详细执行过程</title>
    <url>//3856502506/</url>
    <content><![CDATA[<h4 id="问：webpack-究竟解决了什么问题"><a href="#问：webpack-究竟解决了什么问题" class="headerlink" title="问：webpack 究竟解决了什么问题"></a>问：webpack 究竟解决了什么问题</h4><ul>
<li>模块化解决方案</li>
</ul>
<p>在早前web前端只需要一个简单的 html 页面，插入几条script标签 去引用 js 文件就可以满足需求，随着项目越来越复杂，要实现的功能越来越多，文件也越来越多，全部都这么引入已经不再现实，这时候前端模块化就出现了，从AMD、CMD 到现在的 ES6 模块化写法，我们可以把代码拆成一个个 JS 文件，通过 import 去关联依赖文件，最后再通过某个打包工具把这么多 js 文件按照依赖关系最终打包成一个或多个 js 文件在html 页面去引入。<br>所以 webpack首要要解决的问题是将多个模块化的 js文件 按照依赖关系打包为一个或多个文件，所以我们通常都会说他是一个模块化解决方案</p>
<span id="more"></span>

<ul>
<li>处理资源转换</li>
</ul>
<p>随着 ES6，ES7，ES8 的出现，还有 vue、react 等前端框架的出现，我们发现这些文件浏览器是不能直接执行的，需要我们中间编译转换一下为浏览器可执行的文件，所以这时候 webpack 要做的事情又多了一项，按照依赖打包的同时，还要对源文件进行编译转换处理，也就是我们日常配置的 loader 处理。</p>
<ul>
<li>tree-shaking以及代码压缩</li>
</ul>
<p>现在webpack已经支持了对文件编译转换后再进行打包，满足了我们的基本需求。这时候我们又开始对性能提出了要求，希望打包出的体积越小越好。比如有些文件虽然整个引用了，但其实真正只用了其中部分代码，没用到的部分希望可以被剔除掉。这种是通过剔除无效代码来减小总的打包体积，另外一种方式是通过代码压缩，比如空格、较长的函数名都可以被压缩。因此webpack支持了 tree-shaking和代码压缩。</p>
<ul>
<li>代码拆分(异步加载 + 抽出第三方公用库）</li>
</ul>
<p>现在 webpack 打包结果是不是做到了极致了呢？不行，我们还是嫌弃最终打包出的文件体积太大了。这时候懒加载（异步加载）出现了，你只需要把进入首页时所需要的所有资源打包为一个文件输出就行，这样进入首页我只需要加载该文件就行，其他资源文件等我真正执行的时候再去加载就可以。就这样，webpack又支持了异步加载文件的拆包功能，这时候我们最终打包出的主文件只是当前首页需要的资源。</p>
<ul>
<li>开发辅助工具的提供</li>
</ul>
<p>我们对于打包的基本需求以及性能需求终于得到了满足，又开始追求开发时的体验了，开发越便捷越好，webpack 就提供了一系列的开发辅助功能，比如 devserver，HMR 等等什么的帮助我们高效的开发。</p>
<p>现在我们回过头总结下看，webpack帮我们做了好多事啊。</p>
<ul>
<li>作为一个模块化解决方案，帮助我们将繁多的 JS 模块化文件按照依赖关系打包 为一个或多个文件输出</li>
<li>支持针对文件指定文件进行编译转换后再打包</li>
<li>支持针对打包后的内容优化、压缩处理<br>来减小总的文件体积</li>
<li>支持异步加载以及其他拆包方式</li>
<li>提供一系列开发辅助工具</li>
</ul>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>webpack的构建从处理入口文件开始着手，首先解析入口文件，需要 经过 loader转换编译这时候就转换编译，转换完了开始分析是否有依赖文件，有依赖文件就接着处理依赖文件，流程和刚刚一致，需要编译转换就转换，然后接着解析依赖文件是否还有依赖文件，有再接着处理。就这样通过入口文件以及依赖关系，webpack 可以获取并处理所有的依赖文件。然后再基于这些文件做进一步的优化处理，比如 treeshaking 或者 代码压缩，最后生成为我们需要的一个或多个js 文件。</p>
<h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><p>webpack 首先会将我们的配置文件和它自己的默认配置做一个 merge，生成最终的一个配置文件，其次会将这个最终配置文件里的所有插件plugin在这个时候都注册好，在这里要提一下 webpack 的事件机制，他是基于一个 tapable库做的事件流控制，在整个的编译过程中暴露出各种hook，而我们写的 plugin 也就是去注册监听了某个 hook，在这个 hook 触发时，去执行我们的 plugin。</p>
<h4 id="2-处理入口文件"><a href="#2-处理入口文件" class="headerlink" title="2. 处理入口文件"></a>2. 处理入口文件</h4><p>在 webpack 的处理中多种入口最后都会转化为同一方法去处理，单入口不用说，多入口我可以先遍历，再去执行该方法，动态入口，我先执行函数再去处理，最终都会进入到 生成入口文件 module 实例阶段。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多入口</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">adminApp</span>: <span class="string">&#x27;./src/adminApp.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  动态入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>([<span class="string">&#x27;./demo&#x27;</span>, <span class="string">&#x27;./demo2&#x27;</span>]))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>大家都说 webpack 中一切文件都是 module，那 module 是什么呢，其实他就是一个存了当前文件所有信息的一个对象而已，这个文件包含了以下信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span> = &#123;</span><br><span class="line">  type,</span><br><span class="line">  request,</span><br><span class="line">  userRequest,</span><br><span class="line">  rawRequest,</span><br><span class="line">  loaders,</span><br><span class="line">  resource,</span><br><span class="line">  matchResource,</span><br><span class="line">  parser,</span><br><span class="line">  generator,</span><br><span class="line">  resolveOptions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-生成文件-module实例"><a href="#3-生成文件-module实例" class="headerlink" title="3.生成文件 module实例"></a>3.生成文件 module实例</h4><h5 id="1-resolve-阶段"><a href="#1-resolve-阶段" class="headerlink" title="1. resolve 阶段"></a>1. resolve 阶段</h5><p>通过我们的 resolve 配置和 rules 配置去获取到当前文件的绝对路径和需要经过哪些loader 进行处理，然后将这些信息存到我们当前这个文件对应的 module 实例里面</p>
<h5 id="2-执行-loader-阶段"><a href="#2-执行-loader-阶段" class="headerlink" title="2.执行 loader 阶段"></a>2.执行 loader 阶段</h5><p>loader 的执行是倒序</p>
<p>loader的执行分为 2 个阶段: pitching,执行 loader 上的 pitch 方法;normal,执行 loader 常规方法</p>
<p>执行完 loader 后，也就是对文件做了编译转换，使其变成了最终可以被浏览器执行的代码。</p>
<h5 id="3-parse-阶段"><a href="#3-parse-阶段" class="headerlink" title="3. parse 阶段"></a>3. parse 阶段</h5><p>webpack 是采用将loader 执行过后的源文件source转换为AST 去分析依赖。这里使用了acorn 库，将source生成对应的 AST。生成的 AST 划分为 3部分，ImportDeclaration、FunctionDeclaration和VariablesDeclaration，接下来遍历 AST 去收集依赖。找到 import 等关键字去达到依赖收集的目的。</p>
<h5 id="4-递归处理依赖"><a href="#4-递归处理依赖" class="headerlink" title="4.递归处理依赖"></a>4.递归处理依赖</h5><p>基于我们解析到的依赖文件，我们要开始递归处理依赖了，又回到了我们处理入口文件的整个流程，去生成依赖文件的 module 实例，再执行 对应loader。就这样 webpack 递归处理了所有的依赖文件并完成了所有文件的转换</p>
<h4 id="4-生成-chunk"><a href="#4-生成-chunk" class="headerlink" title="4. 生成 chunk"></a>4. 生成 chunk</h4><p>根据用户配置的 optimization.slitChunks 或者默认的配置，用上一步生成的module，来生成 chunk</p>
<ol>
<li>生成 Module-graph</li>
<li>生成 Basic-chunk-graph</li>
<li>生成最终的 chunk-graph</li>
</ol>
<h4 id="5-优化"><a href="#5-优化" class="headerlink" title="5. 优化"></a>5. 优化</h4><ol>
<li>首先生成对应的 moduleId ，不做任何配置的话，默认采用以自增 id 的方式，推荐 hash 的方式，有利于缓存</li>
<li>基于生成的 moduleId进行排序</li>
<li>接着类似于 module 的操作，对应生成 chunkId ，并根据 chunkId进行排序</li>
<li>分别为 module 和chunk 生成hash</li>
</ol>
<h4 id="6-生成文件"><a href="#6-生成文件" class="headerlink" title="6. 生成文件"></a>6. 生成文件</h4><p>webpack 把这些文件按照内置的 template 渲染生成最终的打包文件。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下 webpack 的整个构建打包过程，首先通过依赖关系和 loader 配置获取经过编译转换后的所有module 实例，然后再根据配置进行拆分为一个或多个chunk，最后按照内置的template 渲染出最终的文件输出。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记1 ES6</title>
    <url>//773176463/</url>
    <content><![CDATA[<p>课程地址: <a href="https://www.bilibili.com/video/av67331423">【JS 老毕】Javascript ES6 基础+核心课程</a></p>
<!-- more  -->

<h3 id="9-字符串方法和-for-of"><a href="#9-字符串方法和-for-of" class="headerlink" title="9. 字符串方法和 for of"></a>9. 字符串方法和 for of</h3><p>includes 是否包含，返回 true&#x2F;false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> substring = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">includes</span>(substring)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>startsWith 是否是以某个字符串开始， 返回 true&#x2F;false<br>endsWith 是否是以某个字符串结尾， 返回 true&#x2F;false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> substring = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">startsWith</span>(substring)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>for of</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tests = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> test <span class="keyword">of</span> tests) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> maps = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">maps.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ahui&quot;</span>);</span><br><span class="line">maps.<span class="title function_">set</span>(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;17600888888&quot;</span>);</span><br><span class="line">maps.<span class="title function_">set</span>(<span class="string">&quot;city&quot;</span>, [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> maps) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name, ahui</span></span><br><span class="line"><span class="comment">// phone, 17600888888</span></span><br><span class="line"><span class="comment">// city, [&quot;北京&quot;, &quot;上海&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tests = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>];</span><br><span class="line"><span class="comment">// entries() 方法返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> test <span class="keyword">of</span> tests.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (2) [0, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">// (2) [1, &quot;b&quot;]</span></span><br><span class="line"><span class="comment">// (2) [2, &quot;c&quot;]</span></span><br><span class="line"><span class="comment">// (2) [3, &quot;d&quot;]</span></span><br><span class="line"><span class="comment">// (2) [4, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="8-函数参数默认值"><a href="#8-函数参数默认值" class="headerlink" title="8. 函数参数默认值"></a>8. 函数参数默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">orderCombo</span>(<span class="params">comboName = <span class="string">&quot;鸡块&quot;</span>, drink = <span class="string">&quot;可乐&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(comboName);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(drink);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">orderCombo</span>(<span class="string">&quot;蛋炒饭&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-剩余参数和扩展参数-…"><a href="#7-剩余参数和扩展参数-…" class="headerlink" title="7. 剩余参数和扩展参数 …"></a>7. 剩余参数和扩展参数 …</h3><p>剩余参数是把多个打包成一个数组<br>将一个数据拆分成多个项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">const</span> tests = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b, ...c] = tests;</span><br><span class="line"><span class="comment">// 会把数组 tests 里边后边三项组合成一个数组赋值给 c</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">// a, b, [c, d, e]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展参数</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> c = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([a, b, ...c]); <span class="comment">// [a, b , a, b, c]</span></span><br></pre></td></tr></table></figure>

<h3 id="6-结构赋值"><a href="#6-结构赋值" class="headerlink" title="6. 结构赋值"></a>6. 结构赋值</h3><h4 id="object-结构赋值"><a href="#object-结构赋值" class="headerlink" title="object 结构赋值"></a>object 结构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&quot;BJ&quot;</span>,</span><br><span class="line">  <span class="attr">social</span>: &#123;</span><br><span class="line">    <span class="attr">www</span>: <span class="string">&quot;didiorg.com&quot;</span>;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&quot;ahuinet@163.com&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用已有的属性名 赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, age, city&#125; = person</span><br><span class="line"><span class="keyword">const</span> &#123;www, email&#125; = person.<span class="property">social</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, <span class="attr">social</span>: &#123;www&#125;&#125; = person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, city, www, email)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用新的变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: ahuiName &#125; = person  <span class="comment">// ahui</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加默认值</span></span><br><span class="line"><span class="keyword">const</span> &#123; mony = <span class="number">1008610010</span> &#125; = person</span><br></pre></td></tr></table></figure>

<h4 id="数组的结构赋值"><a href="#数组的结构赋值" class="headerlink" title="数组的结构赋值"></a>数组的结构赋值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="string">&quot;ahui, 18, 1000000000&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> person = infor.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> [name, age, mony] = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, mony); <span class="comment">// ahui, 19, 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 2, 1</span></span><br></pre></td></tr></table></figure>

<h3 id="5-map-对象"><a href="#5-map-对象" class="headerlink" title="5. map 对象"></a>5. map 对象</h3><p>map set 数据的时候，key 是唯一的，如果 set 一个原来有的属性，就会更新原来对应 key 的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> maps = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">maps.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ahui&quot;</span>);</span><br><span class="line">maps.<span class="title function_">set</span>(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;17600888888&quot;</span>);</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">maps.<span class="title function_">delete</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line">maps.<span class="title function_">has</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line">maps.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="comment">// for...of</span></span><br></pre></td></tr></table></figure>

<h3 id="4-set-对象"><a href="#4-set-对象" class="headerlink" title="4. set 对象"></a>4. set 对象</h3><p>set 里边不会有重复的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sets = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">sets.<span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// 1 添加</span></span><br><span class="line">sets.<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 1, 2</span></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">sets.<span class="title function_">delete</span>(<span class="number">1</span>); <span class="comment">// 返回 true， 删除成功返回 ture， 删除失败返回 false</span></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line">sets.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// 返回 false，查找</span></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">sets.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-模板字符串-96-96"><a href="#3-模板字符串-96-96" class="headerlink" title="3. 模板字符串 &#96;&#96;"></a>3. 模板字符串 &#96;&#96;</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ahuiMsg = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&quot;17600888888&quot;</span></span><br><span class="line">  <span class="attr">email</span>: <span class="string">&quot;ahuinet@163.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> intro = <span class="string">`大家好我叫<span class="subst">$&#123;ahuiMsg.name&#125;</span>,今年<span class="subst">$&#123;ahuiMsg.age&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<h3 id="2-箭头函数-x3D-gt"><a href="#2-箭头函数-x3D-gt" class="headerlink" title="2. 箭头函数 &#x3D;&gt;"></a>2. 箭头函数 &#x3D;&gt;</h3><ol>
<li>能使用函数写法更简洁</li>
<li>函数返回值可以被隐式返回，不需要写 return</li>
<li>不重新绑定 this 的值</li>
</ol>
<h3 id="1-let-const"><a href="#1-let-const" class="headerlink" title="1. let const"></a>1. let const</h3><p>let 定义变量<br>const 定义常量<br>var 可以重复定义变量，let const 不可以重复定义<br>var 函数作用域， let const 是块作用域</p>
<blockquote>
<p>常用 const， 少用 let， 不用 var</p>
</blockquote>
]]></content>
      <categories>
        <category>learning notes</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记3 常见运算题</title>
    <url>//1708901590/</url>
    <content><![CDATA[<p>一些讲运算结果类型的面试题【不定时更新】</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;world&quot;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getNameFunc</span>()()); <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>object.getNameFunc() 返回的就是一个 function，<code>function () &#123; return this.name &#125;</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;world&quot;</span>,</span><br><span class="line">  <span class="attr">getNameFunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> that.<span class="property">name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getNameFunc</span>()()); <span class="comment">// world</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个 <code>that = this</code> 产生了闭包</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">n, o</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fun</span>: <span class="keyword">function</span>(<span class="params">m</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fun</span>(m, n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fun</span>(<span class="number">0</span>); <span class="comment">// undefined</span></span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">1</span>); <span class="comment">// undefined 0</span></span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">2</span>); <span class="comment">// undefined 0</span></span><br><span class="line">a.<span class="title function_">fun</span>(<span class="number">3</span>); <span class="comment">// undefined 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>).<span class="title function_">fun</span>(<span class="number">2</span>).<span class="title function_">fun</span>(<span class="number">3</span>); <span class="comment">// undefined 0 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">fun</span>(<span class="number">0</span>).<span class="title function_">fun</span>(<span class="number">1</span>); <span class="comment">// undefined 0</span></span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line">c.<span class="title function_">fun</span>(<span class="number">3</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line">  <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(fn); <span class="comment">//  10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数的作用域， 跟函数的调用位置的作用域没关系</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fn);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// f() &#123; console.log(fn) &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">fn2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fn2); <span class="comment">// 内部作用域里边没有 fn2， 外部作用域是 windon 也没有</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">fn2</span>(); <span class="comment">// 报错， fn2 is not defind</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>learning notes</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记2 JS基础知识</title>
    <url>//1015335320/</url>
    <content><![CDATA[<p>课程地址: <a href="https://www.bilibili.com/video/av58604768">JavaScript 基础知识</a></p>
<span id="more"></span>

<h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><p>js 数据类型： ‘usbno’</p>
<blockquote>
<p>undefined: 未定义<br>string<br>boolean<br>number<br>object<br>null</p>
</blockquote>
<p>JS 基本数据类型： <code>undefined, string, number, boolean, null</code></p>
<blockquote>
<p>function 不是数据类型<br>object 是复杂数据类型</p>
</blockquote>
<h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>not a number</p>
<blockquote>
<p>isNaN 跟谁都不相等， 包括它本身<br>typeof NaN &#x2F;&#x2F; “number”</p>
</blockquote>
<p>检测一个变量是不是 NaN</p>
<blockquote>
<p>ES6: isNaN()<br>ES5: a !&#x3D; a 为 false 不是 NaN， 为 true 则是 NaN</p>
</blockquote>
<h3 id="js-作用域链"><a href="#js-作用域链" class="headerlink" title="js 作用域链"></a>js 作用域链</h3><p>当前函数作用域找不到的时候就去它的父级找</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">233</span>;</span><br><span class="line">  <span class="title function_">show2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(); <span class="comment">// 666</span></span><br></pre></td></tr></table></figure>

<p>这是因为 show2 所在的位置是跟 show 一个作用域的，show 函数并不是 show2 函数的父级<br>在这里， show2 的父级跟 show 一样， 是 <code>Window</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2333</span>;</span><br><span class="line">  <span class="title function_">show2</span>();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">show2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(); <span class="comment">// 2333</span></span><br></pre></td></tr></table></figure>

<p>这里 show2 的父级就是 show， 所以会打印 2333</p>
<p><strong>当前函数作用域找不到的时候就去它的父级找</strong> 这名话只跟物理位置有关，跟调用没关</p>
<h3 id="IIFE-匿名函数自执行"><a href="#IIFE-匿名函数自执行" class="headerlink" title="IIFE 匿名函数自执行"></a>IIFE 匿名函数自执行</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我就是匿名函数自执行&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ol>
<li>避免变量污染</li>
<li>以前写框架的时候经常用</li>
</ol>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> show2 = <span class="title function_">show</span>();</span><br><span class="line"><span class="title function_">show2</span>(); <span class="comment">// 666</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>]()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><blockquote>
<p>捕获<br>冒泡</p>
</blockquote>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在浏览器下，全局 this 指向 Window， 对象引用时 指向引用它的那个对象</p>
<ol>
<li><p>全局<br>this 在浏览器下指向 Window</p>
</li>
<li><p>函数 this</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">info.<span class="title function_">showName</span>(); <span class="comment">// ahui</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;use strict&quot;;  // undefined   如果是在严格模式下的时候， this 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;angelee&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showMyName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">showMyName</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">info.<span class="title function_">showName</span>(); <span class="comment">// angelee</span></span><br></pre></td></tr></table></figure>

<h3 id="call-apply-bind-区别"><a href="#call-apply-bind-区别" class="headerlink" title="call apply bind 区别"></a>call apply bind 区别</h3><p>改变 this 指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line">show.<span class="title function_">call</span>(<span class="number">666</span>, <span class="number">233</span>, <span class="number">6969</span>); <span class="comment">// Number &#123;666&#125; 233 6969</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showMyName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    showMyName.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">info.<span class="title function_">showName</span>(); <span class="comment">// ahui</span></span><br></pre></td></tr></table></figure>

<p>bind() 不会执行， 只传递 this 指向</p>
<blockquote>
<p>当一个方法需要添加默认参数的时候用得多， 其它的情况一般用 call 或者 apply</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    showMyName = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="title function_">showMyName</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">info.<span class="title function_">showName</span>(); <span class="comment">// ahui</span></span><br></pre></td></tr></table></figure>

<p>apply 跟 call 一样， 就是第二个参数是数组<br>而 call，如果碰到多个参数， 从第二个参数开始，就得一个一个写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>];</span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr); <span class="comment">//12</span></span><br></pre></td></tr></table></figure>

<h3 id="面向对象编辑和简单的设计模式"><a href="#面向对象编辑和简单的设计模式" class="headerlink" title="面向对象编辑和简单的设计模式"></a>面向对象编辑和简单的设计模式</h3><h4 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h4><ol>
<li>单体模式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ahui</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;angelee&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Ahui</span>.<span class="title function_">showName</span>(); <span class="comment">// &quot;angelee&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>原型模式<br>属性放在构造函数，方法放在原型上</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Ahui</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Ahui</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">showName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> angelee = <span class="keyword">new</span> <span class="title class_">Ahui</span>(<span class="string">&quot;angelee&quot;</span>, <span class="number">18</span>);</span><br><span class="line">angelee.<span class="title function_">showName</span>(); <span class="comment">// &quot;angelee&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>类模式<br>通过 ea6 的 class 去定义对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ahui</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> angelee = <span class="keyword">new</span> <span class="title class_">Ahui</span>(<span class="string">&quot;angelee&quot;</span>, <span class="number">18</span>);</span><br><span class="line">angelee.<span class="title function_">showName</span>(); <span class="comment">// &quot;angelee18&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="面向对象继承"><a href="#面向对象继承" class="headerlink" title="面向对象继承"></a>面向对象继承</h3><ol>
<li>单体模式下的继承<br>通过 Object.create() 方法继承</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ahui</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;angelee&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">DaHui</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Ahui</span>);</span><br><span class="line"><span class="title class_">DaHui</span>.<span class="property">name</span> = <span class="string">&quot;lipenghui&quot;</span>;</span><br><span class="line"><span class="title class_">DaHui</span>.<span class="property">age</span> = <span class="number">188</span>;</span><br><span class="line"><span class="title class_">DaHui</span>.<span class="property">showAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DaHui</span>.<span class="title function_">showName</span>()); <span class="comment">// liepnghui`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DaHui</span>.<span class="title function_">showAge</span>()); <span class="comment">// 188</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过 ea6 的 class 方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ahui</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DaHui</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Ahui</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">showInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`name:<span class="subst">$&#123;<span class="variable language_">super</span>.showName()&#125;</span>, age: <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>, job: <span class="subst">$&#123;<span class="variable language_">this</span>.job&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> angelee = <span class="keyword">new</span> <span class="title class_">DaHui</span>(<span class="string">&quot;angelee&quot;</span>, <span class="number">16</span>, <span class="string">&quot;fe&quot;</span>);</span><br><span class="line">angelee.<span class="title function_">showInfo</span>(); <span class="comment">// &quot;name:angelee, age: 16, job: fe&quot;</span></span><br></pre></td></tr></table></figure>

<p>记住关键字： <strong><code>extends</code>、 <code>super</code></strong> 就行， 这是规范， 刚开始觉得不习惯， 用久了之后， 就像用 if else 一样简单</p>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ol>
<li><p>JSONP 原理</p>
</li>
<li><p>js 是可以跨域的</p>
</li>
<li><p>服务器返回的数据，是相当于一个函数调用</p>
</li>
<li><p>本地 js 方法里边有一个方法的定义， 调用本地的方法的时候，就会去调用对应的函数</p>
</li>
<li><p>只能是 get 方法， 如果要用 pust 就用 CROS</p>
</li>
<li><p>CROS</p>
</li>
<li><p>必须需要服务器端配合开发，否则不行</p>
<!-- 2. access-allow --></li>
</ol>
]]></content>
      <categories>
        <category>learning notes</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>崇礼太舞滑雪</title>
    <url>//thaiwooski/</url>
    <content><![CDATA[<p>今天运气特别好，第一趟缆车就在车上碰到了刘哥</p>
<p>这次滑雪学习了平行转弯跟走刃</p>
<span id="more"></span>

<p>当时缆车上就我跟家琦还有刘哥三人， 我上来就跟家琦说：『要不，我们跟这个大哥滑吧？』， 运气是真好，刘哥人特别好，很友善的说了一句：『我现在在练习基本功』，哇，我现在不正好是要练基本功么，哈哈， 然后故事就开始了</p>
<p>刘哥是这个雪场的 VIP 季卡客户，对这个雪场很熟悉，刚开始带我们滑了一趟华尔兹，说大实话， 我站在华尔兹上过的时候，是很害怕的，从没滑过这么长这么陡的雪道；刘哥在旁边给我加油打气，然后说跟着他滑就好了，然后我就真的跟上去了。这一趟，没想到真的滑下去了，刘哥在滑的过程中，滑一会停一会给我讲怎么滑，但是讲真的，我当时其实一脑子懵逼，除了听到了怎么停车之外，其它要领，细节都没听进去，因为当时真的太紧张了。</p>
<p>应该是滑到完第四趟的时候， 我才开始慢慢去琢磨刘哥跟我说的每一个动作要领，第一个动作细节，而这个时候，刘哥已经带我滑完高级道（曼波）了，刘哥跟我讲了很多很多很多现在回想一下， 能记住的不多了：</p>
<h5 id="5-协调-1-重点："><a href="#5-协调-1-重点：" class="headerlink" title="5 协调 1 重点："></a>5 协调 1 重点：</h5><p>脚掌、脚跟、小腿、大腿、躯干要协调，重点是重心在脚掌跟脚跟中间位置</p>
<h5 id="转弯大-C"><a href="#转弯大-C" class="headerlink" title="转弯大 C:"></a>转弯大 C:</h5><ol>
<li><p>入弯前准备：重心下移，开始用山上脚用力，两个膝盖准备同时往转弯的方向拐。</p>
<blockquote>
<p>注意点：上身躯干一定要保持直立，并且面朝山下；</p>
</blockquote>
</li>
<li><p>入弯：重心持续下移，两膝盖往弯心(转弯的圆心)拐得越多，山上脚承重会越多，当山下脚逐渐没有承重的时候，开始反弓。</p>
<blockquote>
<p>注意点：这个时候特别重心一定要跟着雪板滑行方向，也就是一定要向下向弯的方向，用小腿前面压住雪鞋。脑补一下， 这个时候，自己是一个上身躯干挺直，但是重心是往前，往山下的， 心里会有一种很严重的恐惧感，因为感觉自己要往山下摔了，这个时候很容易做出重心往后、往山上的本能动作来保护自己，然而，只要你一做这个动作，那 100%会摔倒，而且，如果你一直没有面对这种恐惧的勇气，不能把重心交给雪板，不把重心往前，往山下，就一直学不会。</p>
</blockquote>
</li>
<li><p>弯中：重心下移到最底点，用山上脚往外用力，把滑板刻入雪中，感觉脚掌下有一个很强的力来推个自己整个身体，产生一个向心力， 实现转弯</p>
<blockquote>
<p>注意点：转弯过程中， 只有山上脚在发力， 山下脚保持与山上脚平行，贴着雪面滑行，不用力，甚至，我们可以提起我们的山下脚来练习这个动作</p>
</blockquote>
</li>
<li><p>准备出弯：重心逐渐上移，保持前倾，这个时候原来的山上山下脚已完成交换</p>
<blockquote>
<p>注意点：躯干还是保持直立，并且还是面向山下，前面的动作要完成一个下半身的转体，记住一定是下半身，动的只有胯跟腿，上半身一直都是一个直立并面朝山下的状态</p>
</blockquote>
</li>
<li><p>出弯后：重心上移到最高点，用小腿前沿压雪鞋，保持前倾，雪板平板，用板刃滑行</p>
<blockquote>
<p>注意点： 这个动作我自己刚开始的时候感觉搓雪很严重，完全没有走刃， 就是因为自己还是没有把重心交给雪板</p>
</blockquote>
</li>
<li><p>很重要的点：</p>
<ol>
<li>重心上下移，千万别通过弯腰上下移，也不能通过扩大大腿与腰的角度来上下移，记住一点， 上身躯干跟大腿的角度始终保持不变(其实说完全不变是不可能的，这里的不变一定是指自己不用任何力去刻意的改变这个角度)，所有的重心上下移动都通过小腿跟大腿的角度，也就是膝盖的角度来控制，膝盖越弯，重心越下越靠前，膝盖越直，重心越高，但是不能靠后，还是靠前的， 因为，重心靠前，是保证不摔跤的唯一办法</li>
</ol>
</li>
</ol>
<p>最后来一组图片</p>
<p><img src="/images/taihooski/IMG_0.jpg" alt="IMG_0"></p>
<p><img src="/images/taihooski/IMG_1.jpg" alt="IMG_1"></p>
<p><img src="/images/taihooski/IMG_2.jpg" alt="IMG_2"></p>
<p><img src="/images/taihooski/IMG_3.jpg" alt="IMG_3"></p>
<p><img src="/images/taihooski/IMG_4.jpg" alt="IMG_4"></p>
<p><img src="/images/taihooski/IMG_5.jpg" alt="IMG_5"></p>
<p><img src="/images/taihooski/IMG_6.jpg" alt="IMG_6"></p>
<p><img src="/images/taihooski/IMG_7.jpg" alt="IMG_7"></p>
<p><img src="/images/taihooski/IMG_8.jpg" alt="IMG_8"></p>
]]></content>
      <tags>
        <tag>ski</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器 缓存</title>
    <url>//cache/</url>
    <content><![CDATA[<h3 id="浏览器缓存是啥？"><a href="#浏览器缓存是啥？" class="headerlink" title="浏览器缓存是啥？"></a>浏览器缓存是啥？</h3><p>首先，浏览器缓存是指浏览器会把用户访问页面时，从服务器请求回来的东西保存在用户的本地，这些保存在本地的东西就是缓存。当用户再次访问刚才页面时， 浏览器不会真的再次去访问页面所对应该的服务器，而从原来保存在本地的内容中返回用户页面里需要的东西。</p>
<blockquote>
<p><strong>注意一下， 这个请求过程是指缓存存在并且有效的时候</strong></p>
</blockquote>
<span id="more"></span>

<h3 id="浏览器缓存有啥作用？"><a href="#浏览器缓存有啥作用？" class="headerlink" title="浏览器缓存有啥作用？"></a>浏览器缓存有啥作用？</h3><p>从上面的请求过程发现，缓存最明显的作用就是减少了页面请求服务器的次数，<strong>浏览器性能得到优化</strong>，其它的作用还有：</p>
<ol>
<li>缩短网页请求资源的时间</li>
<li>减少延迟</li>
<li>减少带宽</li>
<li>降低网络负荷</li>
<li>等。。。</li>
</ol>
<p>但是，好是好，浏览器缓存有时候也会带来问题：</p>
<blockquote>
<p>有时候就会碰到服务器的资源文件更新了，但是我们页面访问的时候，浏览器还是从本地缓存拿的内容，这个时候，就不是我们想要的结果了。解决方法就是把浏览器的缓存清掉，主要是刷新，强制刷新，再不行就打开控制台，右击页面刷新图标，点清空缓存并硬性重新加载</p>
</blockquote>
<h3 id="浏览器缓存是怎样工作的？"><a href="#浏览器缓存是怎样工作的？" class="headerlink" title="浏览器缓存是怎样工作的？"></a>浏览器缓存是怎样工作的？</h3><p>先来看一个张浏览器发起一个 http 请求的图片</p>
<p><img src="/images/web/cache/cache-1.png"></p>
<p>看完这个图片之后，很清楚的就明白了</p>
<blockquote>
<p>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识<br>浏览器每次拿到返回结果的时候，都会将该结果和缓存标识存入浏览器缓存中</p>
</blockquote>
<p>以上两点结论就是浏览器缓存机制的关键，它确保了每个请求的缓存存入与读取</p>
<h3 id="浏览器缓存分为强缓存跟协商缓存"><a href="#浏览器缓存分为强缓存跟协商缓存" class="headerlink" title="浏览器缓存分为强缓存跟协商缓存"></a>浏览器缓存分为强缓存跟协商缓存</h3><blockquote>
<p>强缓存：不会向服务器重新发起 HTTP 请求，直接从缓存中读取资源<br>协商缓存： 强缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</p>
</blockquote>
<h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>强缓存：不会向服务器发送请求，直接从缓存中读取资源，强缓存分为下面三种情况：</p>
<ol>
<li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求</li>
<li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存</li>
<li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li>
</ol>
<p>当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 Expires 和 Cache-Control，其中 Cache-Control 优先级比 Expires 高。</p>
<h4 id="1-Expires"><a href="#1-Expires" class="headerlink" title="1.Expires"></a>1.Expires</h4><p><strong>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点</strong></p>
<p>也就是说，Expires&#x3D;max-age + 请求时间，需要和 Last-modified 结合使用。Expires 是 Web 服务器响应消息头字段，在响应 http 请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p>
<p>Expires 是 HTTP&#x2F;1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。Expires: Wed, 22 Oct 2018 08:41:00 GMT 表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。</p>
<h4 id="2-Cache-Control"><a href="#2-Cache-Control" class="headerlink" title="2.Cache-Control"></a>2.Cache-Control</h4><p><strong><em>http1.1 的产物， 由多个指令共同决定，主要用于控制网页缓存</em></strong></p>
<ul>
<li><p>public：所有内容都将被缓存（客户端和代理服务器都可缓存）</p>
</li>
<li><p>private：所有内容只有客户端可以缓存，表示中间节点（代理服务器）不允许缓存，Cache-Control 的默认取值</p>
</li>
<li><p>no-cache：客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定</p>
<blockquote>
<p>设置了 no-cache 之后，并不是说浏览器就不再缓存数据，只是浏览器在使用缓存数据时，需要先确认一下数据是否还跟服务器保持一致。</p>
</blockquote>
</li>
<li><p>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</p>
</li>
<li><p>max-age：max-age&#x3D;xxx (xxx is numeric)表示缓存内容将在 xxx 秒后失效</p>
</li>
<li><p>s-maxage（单位为 s)：同 max-age 作用一样，只在代理服务器中生效（比如 CDN 缓存）</p>
</li>
<li><p>max-stale：能容忍的最大过期时间</p>
</li>
<li><p>min-fresh：能够容忍的最小新鲜度</p>
</li>
</ul>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</p>
<ol>
<li>协商缓存生效，返回 304 和 Not Modified</li>
</ol>
<p><img src="/images/web/cache/cache-2.png"></p>
<ol start="2">
<li>协商缓存失效，返回 200 和请求结果</li>
</ol>
<p><img src="/images/web/cache/cache-3.png"></p>
<p>同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：Last-Modified &#x2F; If-Modified-Since 和 Etag &#x2F; If-None-Match，其中 Etag &#x2F; If-None-Match 的优先级比 Last-Modified &#x2F; If-Modified-Since 高。</p>
<h4 id="Last-Modified-x2F-If-Modified-Since"><a href="#Last-Modified-x2F-If-Modified-Since" class="headerlink" title="Last-Modified &#x2F; If-Modified-Since"></a>Last-Modified &#x2F; If-Modified-Since</h4><ul>
<li><p>Last-Modified 是服务器响应请求时，返回该资源文件在服务器最后被修改的时间;</p>
</li>
<li><p>If-Modified-Since 则是客户端再次发起该请求时，携带上次请求返回的 Last-Modified 值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间</p>
<blockquote>
<p>服务器收到该请求，发现请求头含有 If-Modified-Since 字段，则会根据 If-Modified-Since 的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于 If-Modified-Since 的字段值，则重新返回资源，状态码为 200；否则则返回 304，代表资源无更新，可继续使用缓存文件</p>
</blockquote>
</li>
</ul>
<h4 id="Etag-x2F-If-None-Match"><a href="#Etag-x2F-If-None-Match" class="headerlink" title="Etag &#x2F; If-None-Match"></a>Etag &#x2F; If-None-Match</h4><ul>
<li><p>Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，如下。</p>
</li>
<li><p>If-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 Etag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。</p>
</li>
</ul>
<blockquote>
<p>服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比，一致则返回 304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 200</p>
</blockquote>
<p>注：Etag &#x2F; If-None-Match 优先级高于 Last-Modified &#x2F; If-Modified-Since，同时存在则只有 Etag &#x2F; If-None-Match 生效。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>强制缓存优先于协商缓存进行，若强制缓存(Expires 和 Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified &#x2F; If-Modified-Since 和 Etag &#x2F; If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 304，继续使用缓存</p>
<p><img src="/images/web/cache/cache-all.png"></p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>浏览器</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器 地址栏回车 性能优化</title>
    <url>//3152193188/</url>
    <content><![CDATA[<h2 id="Enter"><a href="#Enter" class="headerlink" title="Enter"></a>Enter</h2><h3 id="1-输入地址"><a href="#1-输入地址" class="headerlink" title="1. 输入地址"></a>1. 输入地址</h3><p>比如： didiorg.com&#x2F;</p>
<span id="more"></span>

<h3 id="2-DNS（Domain-Name-System，）解析：浏览器查找域名的-IP-地址"><a href="#2-DNS（Domain-Name-System，）解析：浏览器查找域名的-IP-地址" class="headerlink" title="2. DNS（Domain Name System，）解析：浏览器查找域名的 IP 地址"></a>2. DNS（Domain Name System，）解析：浏览器查找域名的 IP 地址</h3><p>本地 hosts 文件 &#x3D;&gt; 本地 DNS 服务器 &#x3D;&gt; DNS 根服务器<br>本地 DNS 服务器 &#x3D;&gt; com 域服务器<br>本地 DNS 服务器 &#x3D;&gt; 域名解析服务器</p>
<p>　这个过程很有意思，本地 DNS 服务器访问根服务器，当根胳没有的时候，并不是根服务器去访问 com 域服务器，这个时候，DNS 根服务器只会告诉 本地 DNS 服务器他没有， 叫他再去访问 com 域服务器。</p>
<p>　更有意思的是， 当本地 DNS 服务器访问 com 域服务器的时候，com 域服务器也不会直接给 本地 DNS 服务器 一个 IP 地址， 而是告诉本地 DNS 服务器想要查找的那个域名的域名解析服务器的地址</p>
<p>然后， 本地 DNS 服务器通过刚才拿到的址， 再去访问域名解析服务器，从那里拿到 IP 地址。</p>
<h3 id="3-浏览器向服务器发-http-请求"><a href="#3-浏览器向服务器发-http-请求" class="headerlink" title="3. 浏览器向服务器发 http 请求"></a>3. 浏览器向服务器发 http 请求</h3><p>拿到 ip 后，浏览器会向服务器80端口发起 TCP 连接请求</p>
<p>TCP 连接： <a href="https://blog.csdn.net/hkhl_235/article/details/79721645">tcp连接全过程各种状态详解</a></p>
<p>第一次握手：客户端的应用进程主动打开，并向服务端发出请求报文段。其首部中：SYN&#x3D;1,seq&#x3D;x。<br>第二次握手：服务器应用进程被动打开。若同意客户端的请求，则发回确认报文，其首部中：SYN&#x3D;1,ACK&#x3D;1,ack&#x3D;x+1,seq&#x3D;y。<br>第三次握手：客户端收到确认报文之后，通知上层应用进程连接已建立，并向服务器发出确认报文，其首部：ACK&#x3D;1,ack&#x3D;y+1。当服务器收到客户端的确认报文之后，也通知其上层应用进程连接已建立。</p>
<p>连接成功之后, 浏览器就会发起请求: </p>
<p>　请求方式一般可以分为 get 请求、post 请求， 可参考<a href="https://blog.csdn.net/zlczsw/article/details/91046081">get&#x2F;post 请求的区别</a></p>
<p>　一个请求一般包括三部分： </p>
<p>　　1. 请求方法URI协议&#x2F;版本<br>　　2. 请求头(Ruquest Header)<br>　　3. 请求正文： （比如: username&#x3D;ahui&amp;parsword&#x3D;ahui123456）</p>
<p>　　常见的请求头一般会能下边这些， 我们很常用的 <a href="/cache.html">浏览器缓存</a> 也在这个里边可以设置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Accept<span class="punctuation">:</span> </span><br><span class="line">Accept-Encoding<span class="punctuation">:</span> gzip<span class="punctuation">,</span> deflate</span><br><span class="line">Accept-Language<span class="punctuation">:</span> zh-CN<span class="punctuation">,</span>zh;q=<span class="number">0.9</span><span class="punctuation">,</span>en;q=<span class="number">0.8</span></span><br><span class="line">Connection<span class="punctuation">:</span> keep-alive</span><br><span class="line">Host<span class="punctuation">:</span> didiorg.com</span><br><span class="line">If-Modified-Since<span class="punctuation">:</span> Mon<span class="punctuation">,</span> <span class="number">02</span> Mar <span class="number">2020</span> <span class="number">02</span><span class="punctuation">:</span><span class="number">22</span><span class="punctuation">:</span><span class="number">54</span> GMT</span><br><span class="line">If-None-Match<span class="punctuation">:</span> W/<span class="string">&quot;5e5c6dfe-4377&quot;</span></span><br><span class="line">Referer<span class="punctuation">:</span> http<span class="punctuation">:</span><span class="comment">//didiorg.com/web.html</span></span><br><span class="line">User-Agent<span class="punctuation">:</span> Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10</span>_15_3) AppleWebKit/<span class="number">537.36</span> (KHTML<span class="punctuation">,</span> like Gecko) Chrome/<span class="number">79.0</span><span class="number">.3945</span><span class="number">.130</span> Safari/<span class="number">537.36</span></span><br></pre></td></tr></table></figure>

<h3 id="4-服务器处理请求"><a href="#4-服务器处理请求" class="headerlink" title="4. 服务器处理请求"></a>4. 服务器处理请求</h3><p>建立好联接之后，浏览器就会发请求，服务器就会开始处理浏览器发过来的请求</p>
<p>这里有一个很厉害的角色： nginx  参考：<a href="/1508208186.html">nginx 常用配置</a></p>
<p>　一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。</p>
<p>　此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p>
<p>通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等</p>
<h3 id="5-服务器返回-http-响应"><a href="#5-服务器返回-http-响应" class="headerlink" title="5. 服务器返回 http 响应"></a>5. 服务器返回 http 响应</h3><p>　一个 http 响应也由3个部分组成：</p>
<p>　　状态行: 由协议版本(HTTP-Verson)、数字形式的状态代码(Status-Code)、相应的状态描述(Reason-Phrase CRLF)  例如： HTTP&#x2F;1.2 200 OK<br>　　响应头: 由关键字&#x2F;值对组成，每行一对，关键字和值用英文冒号”:”分隔<br>　　响应正文: 包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等</p>
<p>状态码：</p>
<p>1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。<br>　100 Continue<br>　101 Switching Protocols</p>
<p>2xx：成功状态码，表示服务器已成功接收到请求并进行处理。<br>　200 OK 表示客户端请求成功<br>　204 No Content 成功，但不返回任何实体的主体部分<br>　206 Partial Content 成功执行了一个范围（Range）请求</p>
<p>3xx：重定向状态码，表示服务器要求客户端重定向。<br>　301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL<br>　302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源<br>　303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源<br>　304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存<br>　307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能　循这一标准，但也依赖于浏览器具体实现</p>
<p> 4xx：客户端错误状态码，表示客户端的请求有非法内容。<br>　400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解<br>　401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用<br>　403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因<br>　404 Not Found 请求的资源不存在，例如，输入了错误的URL</p>
<p>5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。<br>　500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求<br>　503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</p>
<h3 id="6-浏览器收到服务器返回的资源后开始渲染-HTML"><a href="#6-浏览器收到服务器返回的资源后开始渲染-HTML" class="headerlink" title="6. 浏览器收到服务器返回的资源后开始渲染 HTML"></a>6. 浏览器收到服务器返回的资源后开始渲染 HTML</h3><p>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p>
<p><img src="/images/web/js/htmlrender.png"></p>
<p>　　浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。</p>
<p>　　解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。</p>
<p>　　DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。</p>
<p><img src="/images/web/js/evenlop.png"></p>
<p>　当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。</p>
<p>　　JS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。</p>
<p>　　JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。</p>
<h3 id="7-浏览器发送请求获取嵌入在-html-中的资源，如果图片，音频，css，-js-等"><a href="#7-浏览器发送请求获取嵌入在-html-中的资源，如果图片，音频，css，-js-等" class="headerlink" title="7. 浏览器发送请求获取嵌入在 html 中的资源，如果图片，音频，css， js 等"></a>7. 浏览器发送请求获取嵌入在 html 中的资源，如果图片，音频，css， js 等</h3><p>上边我们看了浏览器所干的事情， 然后我们再看一下对他的一些优化：</p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>一般网站优化都是优化后台，如接口的响应时间、SQL优化、后台代码性能优化、服务器优化等。高并发情况下，对前端web优化也是非常重要的。下面说说几种常见的优化措施。</p>
<h3 id="1、HTML-CSS-JS位置"><a href="#1、HTML-CSS-JS位置" class="headerlink" title="1、HTML CSS JS位置"></a>1、HTML CSS JS位置</h3><p>　　一般需要将CSS放页面最上面，即HEAD部分，而将JS代码放页面底部。因为页面需要加载为CSS才进行渲染，而JS如果不是在页面加载之前就要执行就要放到页面最底部，以免在页面展示之前因JS过多加载而影响页面渲染速度。</p>
<h3 id="2、引用文件位置"><a href="#2、引用文件位置" class="headerlink" title="2、引用文件位置"></a>2、引用文件位置</h3><p>　　有一些插件需要引用到远程的图片、CSS、JS、图标等，如果远程的资源连接网速不佳，如国外的某些资源，会造成网页阻塞，同样也会造成页面展示问题，尽量能把引用远程的资源能本地化。</p>
<h3 id="3、减少后台请求"><a href="#3、减少后台请求" class="headerlink" title="3、减少后台请求"></a>3、减少后台请求</h3><p>　　每个请求都是耗费资源影响系统性能的，所以，能减少后台请求就减少。如，尽量的将同一个资源（图片、JS、CSS等）合并成一个文件，页面只要请求一次即可，这样就节省了很多http连接的开销及往返的时间损耗。</p>
<p>　　另外一方面，如果是关于抽奖、摇一摇、秒杀等功能，可以限制发往后台的频率，如前端操作10次才往后端发一次请求，这样从前端就做到了后台的流量控制，把流量控制到访问的最外层是最好的，尽量不要让请求落到底层。</p>
<h3 id="4、压缩传输"><a href="#4、压缩传输" class="headerlink" title="4、压缩传输"></a>4、压缩传输</h3><p>　　http压缩可以对纯文本可以压缩至原内容的40%, 从而节省了60%的数据传输，GZIP是一种常用的压缩编码。因此，对文本类型的资源如CSS、JS、HTML启用GZIP压缩加速http传输速度。</p>
<h3 id="5、减少cookie传输"><a href="#5、减少cookie传输" class="headerlink" title="5、减少cookie传输"></a>5、减少cookie传输</h3><p>　　cookie会包含在每次请求和响应中，如果cookie过多会影响http响应速度，所以高并发情况下尽量控制cookie的传输量，nginx对cookie传输默认是做了限制的。另外，像CSS、JS、图片等静态资源可以启用单独域名，禁用cookie对静态资源的传输，这样就能大大提高效率。</p>
<h3 id="6、浏览器缓存"><a href="#6、浏览器缓存" class="headerlink" title="6、浏览器缓存"></a>6、浏览器缓存</h3><p>　　高并发情况下，可以将一些不怎么变动的东西缓存到浏览器cache中，或者一些活动内容可以提前将内容在客户端缓存起来，以免活动开始大量请求涌入服务器。</p>
<h3 id="7、CDN"><a href="#7、CDN" class="headerlink" title="7、CDN"></a>7、CDN</h3><p>　　是一个静态内容分发网络，本质就是静态资源的缓存，可以将静态资源放到CDN上，这样，用户就能离自己最近的地方获取到资源，大大提高了用户访问速度。</p>
<h3 id="8、反向代理"><a href="#8、反向代理" class="headerlink" title="8、反向代理"></a>8、反向代理</h3><p>　　常用的反向代理nginx除了负载均衡功能，它也可以通过配置缓存功能来加速请求响应速度，当用户第一次访问的时候静态资源就可以被缓存到反向代理服务器上，这样其他用户的请求就能直接从反向代理服务器直接获取返回，这样也就直到了静态资源缓存的作用。</p>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>浏览器</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>面试记录</title>
    <url>//148981014/</url>
    <content><![CDATA[<p>浏览器多进程+多线程<br>DNS寻址方式，DNS 缓存， dns-prefetch<br>建立 tcp&#x2F;ip 链接，三次握手，四次挥手，滑动窗口，接收窗口，收发帧的策略，为什么关闭要等待 2MSL，get post 区别，并发限制<br>传输数据，展开计算机网络 5 层&#x2F;7 层模型，五层：http -&gt; tcp&#x2F;ip -&gt; ip -&gt; data frames -&gt; 物理介质<br>服务器收到请求，负载均衡，tomcat 容器，后端统一拦截过滤<br>展开 http 报文，实体，http 1.0, 1,1 2之间的区别，gzip，长连接&#x2F;短连接，展开 cookie 及优化，多子域名拆分等<br>展开 https 中 SSL&#x2F;TLS 链接步骤<br>展开 http 缓存，强缓存，协商缓存，from memory&#x2F;disk cache等<br>DOM 树的构建过程，bytes -&gt; characters -&gt; tokens -&gt; nodes -&gt; DOM<br>css rule tree: bytes -&gt; characters -&gt; tokens -&gt; nodes -&gt; CSSOM<br>renderTree 的构建，不可见元素，特殊元素等。<br>渲染：compute css -&gt; construct frames -&gt; layout -&gt; paint<br>展开 reflow , repaint 已经对应优化方法<br>绘制中的简单图层与复合图层，开启硬件加速就是把对应节点丢到复合图层<br>css 盒模型，BFC，IFC<br>静态资源外链 css，js(defer, async)，img<br>展开 loaded 和 domContentLoaded<br>JS 解释阶段: token -&gt; AST -&gt; bytecode -&gt; machine code 然后扯到 JIT<br>JS 预处理阶段，变量提升，分号补全等。<br>JS 执行阶段，EC stack，EC，VO，AO，作用域链， this，原型，继承（组合寄生式继承，es6 继承），JS 事件循环，micortask，marcortask等<br>JS GC -&gt; v8 GC</p>
<p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question">https://github.com/Advanced-Frontend/Daily-Interview-Question</a><br><a href="https://muyiy.cn/question/">https://muyiy.cn/question/</a><br><a href="https://blog.csdn.net/liudianjia/article/details/104805503">https://blog.csdn.net/liudianjia/article/details/104805503</a><br><a href="https://blog.colafornia.me/post/2020/2020-interviews/">https://blog.colafornia.me/post/2020/2020-interviews/</a></p>
<h3 id="猿辅导"><a href="#猿辅导" class="headerlink" title="猿辅导"></a>猿辅导</h3><span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable constant_">JS</span>：<span class="title class_">Promise</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="title function_">fetch</span>(<span class="comment">/*…*/</span>);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(f1).<span class="title function_">catch</span>(f2).<span class="title function_">then</span>(f3); <span class="comment">// p failed</span></span><br><span class="line"></span><br><span class="line"><span class="function">() =&gt;</span> &#123;&#125; vs <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;‏‎ ‎</span><br><span class="line"></span><br><span class="line">  <span class="attr">f1</span>:‏‎ ‎() =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>),</span><br><span class="line"></span><br><span class="line">  f2‏‎ ‎() &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">f1</span>() <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">f2</span>() <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">f1</span>() <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">new</span> obj.<span class="title function_">f2</span>() <span class="comment">// f1</span></span><br><span class="line"></span><br><span class="line">&lt;A&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/A&gt;</span><br><span class="line"></span><br><span class="line">a.<span class="property">created</span></span><br><span class="line">b.<span class="property">created</span></span><br><span class="line">a.<span class="property">mounted</span></span><br><span class="line">b.<span class="property">mounted</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Node</span> &#123; <span class="attr">value</span>: number; <span class="attr">children</span>: <span class="title class_">Node</span>[] &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> =&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>,     <span class="number">3</span>,     <span class="number">5</span> =&gt; <span class="number">6</span>+<span class="number">3</span>+<span class="number">5</span>=<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>;   <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;   <span class="number">7</span>, <span class="number">8</span> =&gt; <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">7</span>+<span class="number">8</span>=<span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 告诉我多叉树每一层的和 [2, 14, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">layerSum</span>(<span class="params">root：Node</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><ol>
<li>vue双向绑定原理 -&gt; angular与vue双向绑定的区别 -&gt; 性能对比</li>
<li>讲讲虚拟Dom -&gt; patch </li>
<li>v-for key </li>
<li>数组或者对象变化检测问题与原因，一般要聊vue对数组做了劫持</li>
<li>组件生命周期，父子组件生命周期</li>
<li>路由实现原理，以及路由钩子相关内容</li>
<li>计算属性和方法，计算属性和watch区别</li>
<li>nextTick原理</li>
<li>mixin的钩子顺序</li>
<li>3.0有哪些变化</li>
</ol>
<h4 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h4><ol>
<li>es6用过哪些？ -&gt; let&#x2F;const  promise  await class module 很常问</li>
<li>继承的实现方法 -&gt; es5继承和class区别</li>
<li>判断一个变量是不是数组有几种方法？isArray， toString，还有通过原型的构造函数等方法</li>
<li>什么是闭包，闭包的应用</li>
<li>event loop</li>
<li>for &gt; forEach &gt; map  区别，性能，注意参数</li>
<li>this的考察，一般是给一段代码看输出然后让你详细讲讲this</li>
</ol>
<h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><ol>
<li>webpack原理</li>
<li>loader，plugin作用，原理，区别，你有没有写过？</li>
<li>多页应用怎么配</li>
<li>你知道哪些loader&#x2F;plugin，然后会问你他的作用是什么？例如css-loader，url-loader，我遇到一个变态问我postcss-loader，css-loader，style-loader，url-loader分别具体做了什么……</li>
<li>publicPath 和 path的区别</li>
<li>热更新原理</li>
<li>webpack优化&#x2F;懒加载&#x2F;分包设计</li>
</ol>
<h4 id="浏览器与网络"><a href="#浏览器与网络" class="headerlink" title="浏览器与网络"></a>浏览器与网络</h4><ol>
<li>跨域问题</li>
<li>浏览器缓存，Cache-Control与expires区别，Cache-Control有哪些属性， 如何利用浏览器缓存？</li>
<li>输入一个url发生了什么，准备的详细一点，这里还会引出js的三种加载方式，还可能问每个阶段的优化</li>
<li>http状态码</li>
<li>https与http区别，https的混合加密，非对称加密与对称加密的过程， 非对称加密与对称加密算法性能</li>
<li>cookie，session的区别，cookie有哪些属性，这里可以聊聊sameSite，httpOnly防xss攻击</li>
<li>http请求有哪些头部信息？响应有哪些头部信息？Content-Type有哪些类型？</li>
<li>xss,csrf是什么？怎么预防？</li>
<li>http2.0 与 1.x的区别？</li>
<li>CDN的特点， 分布式节点，回源， 缓存，cdn静态资源定期推送</li>
</ol>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ol>
<li>flex布局</li>
<li>水平垂直居中的几种方法</li>
<li>三栏&#x2F;两栏布局</li>
<li>层叠上下文</li>
<li>em, rem, vw 和vh， 移动端响应式布局方案</li>
<li>盒子模型</li>
<li>css权重</li>
<li>实现三角形，梯形</li>
<li>动画</li>
</ol>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ol>
<li>二分查找</li>
<li>乱序算法</li>
<li>实现new， instanceOf，promise ，promise all啥的</li>
<li>两个有序数组合并</li>
<li>两数之和等于n</li>
<li>数组最大和</li>
<li>最大子串长度</li>
<li>reduce用法， 用reduce实现map</li>
<li>排序 不太直接让你写排序算法，而是会做个结合题，给表格排序之类的，会和dom，css结合</li>
<li>实现深拷贝</li>
<li>实现new， instanceOf</li>
<li>实现并发限制，异步最多4个并发</li>
<li>实现延迟n秒重试，最大重试次数t， attempt(fn, times, delay)</li>
<li>实现LazyMan</li>
</ol>
<p>&#x2F;&#x2F; LazyMan(“Hank”);<br>&#x2F;&#x2F; &#x3D;&gt; Hi! This is Hank!</p>
<p>&#x2F;&#x2F; LazyMan(“Hank”).sleep(2).eat(‘dinner’);<br>&#x2F;&#x2F; &#x3D;&gt; Hi! This is Hank!<br>&#x2F;&#x2F; 等待10秒<br>&#x2F;&#x2F; &#x3D;&gt; Wake up after 10<br>&#x2F;&#x2F; &#x3D;&gt; Eat dinner.</p>
<p>&#x2F;&#x2F; LazyMan(“Hank”).eat(‘dinner’).eat(‘supper’);<br>&#x2F;&#x2F; &#x3D;&gt; Hi! This is Hank!<br>&#x2F;&#x2F; &#x3D;&gt; Eat dinner.<br>&#x2F;&#x2F; &#x3D;&gt; Eat supper.</p>
<p>&#x2F;&#x2F; LazyMan(“Hank”).sleepFirst(2).eat(‘supper’);<br>&#x2F;&#x2F; 等待5秒<br>&#x2F;&#x2F; &#x3D;&gt; Hi! This is Hank!<br>&#x2F;&#x2F; &#x3D;&gt; Eat supper.</p>
]]></content>
  </entry>
  <entry>
    <title>让 hexo URL更加优雅</title>
    <url>//3651303969/</url>
    <content><![CDATA[<p>大家都知道 hexo url 默认是通过日期加标题确定的，这样的 url 特别难看</p>
<span id="more"></span>

<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://didiorg.com/2020/01/13/%E5%B4%87%E7%A4%BC%E5%A4%AA%E8%88%9E%E6%BB%91%E9%9B%AA/</span><br></pre></td></tr></table></figure>

<p>说实话，看不懂，因为把后面的汉字转义了</p>
<p>这个时候 hexo 官方提供了一种解决方案：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># permalink<span class="punctuation">:</span> <span class="punctuation">:</span>year/<span class="punctuation">:</span>month/<span class="punctuation">:</span>day/<span class="punctuation">:</span>title/</span><br><span class="line"># 改成：</span><br><span class="line">permalink<span class="punctuation">:</span> <span class="punctuation">:</span>id.html</span><br></pre></td></tr></table></figure>

<p>就有了下面这个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://didiorg.com/ck5dxcj8p00094dvzd8sirsit.html</span><br></pre></td></tr></table></figure>

<p>这样其实也非常不友好</p>
<blockquote>
<p>第一，url 还是太长了。<br>第二，也是最重要的一点，每“hexo g”一次，“<code>:id</code>”生成的 url 都是不一样的，这非常影响 SEO。</p>
</blockquote>
<h4 id="只推荐一种方案，就是安装-hexo-abbrlink-插件"><a href="#只推荐一种方案，就是安装-hexo-abbrlink-插件" class="headerlink" title="只推荐一种方案，就是安装 hexo-abbrlink 插件"></a>只推荐一种方案，就是安装 hexo-abbrlink 插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>再修改一下配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">permalink<span class="punctuation">:</span> <span class="punctuation">:</span>abbrlink.html # 生成唯一链接</span><br><span class="line">abbrlink<span class="punctuation">:</span></span><br><span class="line">  alg<span class="punctuation">:</span> crc32 # 算法：crc16(default) and crc32</span><br><span class="line">  rep<span class="punctuation">:</span> dec # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>

<p>这个时候的 url 就很好看了</p>
<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://didiorg.com/10086.html</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该插件的原理是在文章中插入一个“<code>abbrlink</code>”参数，参数值是使用算法生成的 id，根据该“<code>abbrlink</code>”参数的值生成文章的固定 url，从而实现文章 url 固定。</p>
</blockquote>
<p>看下面的文章，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2020健身记录</span><br><span class="line">tags: 健身</span><br><span class="line">categories: fit</span><br><span class="line">top: true</span><br><span class="line">abbrlink: 10086</span><br><span class="line">date: 2020-01-09 09:58:39</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>这个插件确实会生成一个唯一的 abbrlink， 这样挺好， 但是，我觉得更好的是， 这个 abbrlink 后面的值是可以自己修改的， 你可以改成数据， 改成字母，都可以， 这样就极大的方便我们管理我们的 url 了，比如上边这个链接，我就把原来生成的 id 改成了 10086， 很友好。</p>
<p>再看下面一个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 崇礼太舞滑雪</span><br><span class="line">tags: ski</span><br><span class="line">abbrlink: thaiwooski</span><br><span class="line">date: 2020-01-13 09:54:15</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>url 为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://didiorg.com/thaiwooski.html</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>d2</title>
    <url>//2292182493/</url>
    <content><![CDATA[<p>业务系统和一般的应用有非常大的不同，一般的应用以提供给公司&#x2F;企业外的用户（消费者、普通玩家）提供服务，以完成2C的销售目的，而业务系统一般是2B或者自身消费的模式，完成的是自身业务的管理目标。所以，应用侧重服务，业务系统侧重管理。两者的不同，导致我们对项目开发中，代码的组织方式会有差别。2C应用要满足大量用户在使用时的舒适性，因此要提高项目中有关性能、用户体验、效果等方面的要求，以吸引用户付费。但业务系统则稍有差别，虽然系统的使用体验也很重要，但是不是占最重要的部分，业务系统最重要的部分，是必须保证用户看到的数据、流程等，必须与真实的业务、业务流程一致，否则会带来自身利益的损失，因此，在稳健性、安全性等方面要求更高。</p>
<h3 id="什么是业务模块？"><a href="#什么是业务模块？" class="headerlink" title="什么是业务模块？"></a>什么是业务模块？</h3><p>首先，什么是业务系统？在这之前，又必须回答什么是业务？业务（Business）专指商业活动，是实现企业生产到利益回收的一个环节，它的总和，构成了该企业盈利活动的整个流程。一般而言，我们所指的业务是企业商业活动中的一个部分，有的甚至小到一个环节，例如“结算”这个环节。业务系统则是辅助这些商业活动的计算机在线系统，以信息化的形式管理和决策企业的商业活动（理论上没有业务系统企业也能运转，但信息化社会没有业务系统会让企业寸步难行）。</p>
<p>大部分情况下，业务系统会尽可能多的囊括企业的业务环节，其目标是将企业的所有商业管理在线化，完成除必须在线下完成的实体业务之外的所有管理活动。而且，通过业务系统的数据积累，可以让企业基于已有数据进行深入决策，比只有线下管理的竞争对手高出多个维度。企业的管理者和员工使用业务系统，参与到企业的各个业务环节，参与形式各有不同，根据员工的角色来决定，比如有的员工不接触系统界面，只通过工卡完成各项流程的录入，有的员工则需要完成在线申请或审批，有的员工需要使用复杂的第三方工具完成系统录入等等。</p>
<p>业务模块，是以业务系统的建设者（领域专家、系统工程师等）的角度看待业务系统时，将庞大的业务系统，按照某个业务活动的边界，进行划分的某个单元。但是技术上，一般一个模块还是粒度比较大的单元。一般而言，业务模块囊括了系统关于该业务的所有内容，且和其他业务有明显的界限，理论上，可以在脱离了其他业务模块的情况下独立运行。</p>
<p>有了以上的认知，我们就知道，我们需要掌握企业在某个业务中，不同的参与者都是如何工作的。在该业务模块没有上线到业务系统中时，没人能明确的告诉你这个业务模块应该长什么样子，你需要走访业务的参与成员，了解他们实际是怎么工作的，然后再思考，如果要将这些工作迁移到线上，应该关注哪些方面，是用户的操作形式？是界面的友好风格？是信息的准确？但是应该注意一点，如果业务系统致使工作效率降低，那么说明设计该系统的人没有真正掌握企业商业活动的核心要点。动的核心要点。</p>
]]></content>
  </entry>
  <entry>
    <title>d1</title>
    <url>//295091303/</url>
    <content><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a>（DDD）是Eric Evans于2004在其同名著作里提出的概念，它指明了让软件设计满足理想需求模型的方向。但是建模、设计这种事本来就很抽象，读懂这样的大作也是需要消耗不少脑细胞。本文希望能尽量以简单加实例的方式介绍DDD里的一些常见概念。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是领域"><a href="#什么是领域" class="headerlink" title="什么是领域"></a>什么是领域</h3><p>《领域驱动设计》书里写的是：用户会把软件程序应用于某个主体区域，这个区域就是软件的领域。简单来说，就认为是公司的某块业务好了。如果领域比较大，可以将其拆分为多个子域（Subdomain），子域包含核心域（Core Domain）和支撑子域（Supporting Subdomain），核心域顾名思义，是最重要的子域，我们应该把关注点集中在它上面；其余的子域都是支撑子域。支撑子域里有一类特殊的用于解决通用问题的子域，称为通用子域（Generic Subdomain），例如用户和权限等。不过这些都是相对而言的，对于消费方来说，他的支撑子域有可能就是你的核心域。个别子域可能会有交集，称为共享内核（Shared Kernel），目的是减少重复，但是仍保持两个独立的上下文。由于不同子域的开发团队可能会同时修改共享内核，所以需要小心并注意沟通。</p>
<h3 id="要DDD做什么"><a href="#要DDD做什么" class="headerlink" title="要DDD做什么"></a>要DDD做什么</h3><p>DDD试图解决的是软件的复杂性问题，如果软件比较复杂，或者是预期会很复杂，或者是你不知道，那么都可以开始考虑DDD。否则，由于维系领域模型需要实现大量的封装和隔离，DDD会带来较大的成本。但是，DDD并不是一个笨重的开发过程，它能够和敏捷开发很好地结合起来，另外，DDD也倾向于“测试先行，逐步改进”。</p>
<h2 id="战略建模（Strategic-Modeling）"><a href="#战略建模（Strategic-Modeling）" class="headerlink" title="战略建模（Strategic Modeling）"></a>战略建模（Strategic Modeling）</h2><h3 id="通用语言（Ubiquitous-Language）"><a href="#通用语言（Ubiquitous-Language）" class="headerlink" title="通用语言（Ubiquitous Language）"></a>通用语言（Ubiquitous Language）</h3><p>其实写软件就像是翻译，把领域上的业务需求翻译成软件的各个功能。业务需求来自领域专家（Domain Expert），程序员们需要把领域专家的语言翻译成程序。如果程序员们翻译的时候使用的是自己的语言，而领域专家使用自己的行话，导致术语不一致，就会使得沟通不顺畅，难于消化知识。所以团队需要一种通用语言来进行沟通。这样的通用语言尽量以业务语言为主，而非技术语言。一开始的通用语言可能不尽完美，但它就像是代码一样，经常需要重构。例如：“创建一个订单”就比“插入一条订单数据”更容易让领域专家明白谈话的背景。</p>
<h3 id="限界上下文（Bounded-Context）"><a href="#限界上下文（Bounded-Context）" class="headerlink" title="限界上下文（Bounded Context）"></a>限界上下文（Bounded Context）</h3><p>通用语言里，同一个名词在不同的场景里不一定有相同的意思。比如用户，在推荐好友（可能关注年龄、性别、地域）或是浏览商品（可能关注喜好、历史购买记录）的时候有着不同的含义。所谓的不同的场景，其实就是不同的限界上下文。子域在限界上下文中完成开发。限界上下文主要用来封装通用语言和领域模型，显式地定义了领域模型的边界。不同的限界上下文，都会有一套自己的通用语言。通过这样的划分方式，来让每个限界上下文都尽量保持简单，也算是<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a>原则在不同粒度上的一个体现。如果不去做这样的划分，可能最终这个软件就会演变成一个<a href="https://en.wikipedia.org/wiki/Big_ball_of_mud">大泥球</a>，或者说是<a href="https://en.wikipedia.org/wiki/Monolithic_application">单块系统</a>。尽管如此，对于比较小的业务或项目来说，可能只会有一个限界上下文。现在流行的<a href="https://en.wikipedia.org/wiki/Microservices">微服务</a>，很大程度上就是按照限界上下文来划分服务。例如：商品上下文，订单上下文，物流上下文等。当然，如果子域很小，不见得非得微服务化。</p>
<p>不同的限界上下文之间，通过上下文映射图（Context Map）来进行交互。上下文映射图其实就是一个简单的框图，表示限界上下文之间的的映射关系。下面这张图就是一个简单的例子：<br><a href="http://qinghua.github.io/img/ddd-context-map.jpg"><img src="http://qinghua.github.io/img/ddd-context-map.jpg" alt="img"></a></p>
<p>U表示上游（Upstream）的被依赖方，D表示下游（Downstream）的依赖方。由于上下游的限界上下文模型不同，实现时，可以用RPC、Restful、消息机制等集成方式。另外，下游需要防腐层（Anticorruption Layer）来将上游的返回内容翻译为下游的领域模型。如果防腐层过多地使用了各种赋值，从而导致上下游的模型非常类似，那就需要看看是否下游过多地使用了上游的数据，从而导致自己的模型不清晰。</p>
<h2 id="战术建模（Tactical-Modeling）"><a href="#战术建模（Tactical-Modeling）" class="headerlink" title="战术建模（Tactical Modeling）"></a>战术建模（Tactical Modeling）</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="实体（Entity）"><a href="#实体（Entity）" class="headerlink" title="实体（Entity）"></a>实体（Entity）</h4><p>所谓领域，反映到代码里就是模型。模型分为实体和值对象两种。实体是有标识（Identity）的，两个拥有相同属性的实体不是相等的，除非它们的标识相等；而不同实体的标识不能相等。例如：某人下了两个相同的订单，里面都购买了相同的商品。这两个订单就是有标识（订单号）的两个实体，虽然内容相同，但它们是两个不同的实体。常用的标识有自增数字、Guid、自然标识（如邮箱、身份证号）等。实体具有生命周期，它们的内容可能在这期间会发生改变，但是标识是永远不会变化的。实体作为领域模型的主体，需要拥有自己的方法，方法名来自于通用语言。通过这些方法来保证自己始终是一致的状态，而非被调用者set来set去。例如：<code>people.runTo(x, y)</code>，而非<code>people.setX(x);people.setY(y);</code></p>
<h4 id="值对象（Value-Object）"><a href="#值对象（Value-Object）" class="headerlink" title="值对象（Value Object）"></a>值对象（Value Object）</h4><p>实体用来表示领域中的一个东西，而值对象只用于描述或度量一个东西。值对象没有任何标识，只要两个值对象的属性相等，那么它们就是相等的。值对象是不可变的，如果要改变值对象的内容，那就重新创建一个值对象。值对象没有生命周期，因为它只是值而已。例如：金额（含数值和货币单位），颜色（含rgb值）等。因为不需要标识，所以它们其实比实体要简单许多。Java里的String类，就具有一个值对象的行为；C#的Struct其实就是一个值对象，不过一般还是会用Class来表示值对象。</p>
<p>不同的领域需求可能会催生不同的建模。例如：考虑一下演出的售票系统。如果需求是对号入座，那么座位就是实体，一旦某张演出票关联了某个座位，那么这个座位就再也不能被其它的演出票所关联了。如果需求是先到先坐，那么座位就是值对象，我们只关心卖了多少张演出票，不要超过座位上限即可，而并不用关心哪个座位被哪张票所关联了。</p>
<p>DDD的一个反模式就是拥有一堆<code>get</code>和<code>set</code>方法的贫血领域对象（Anemic Domain Object）。这样的对象只是一个数据持有器（data holder），而非我们想要的领域模型。值对象和实体一样，都需要有自己的方法。例如：金额值对象，有一个<code>Add</code>的方法，接受一个金额参数，返回一个新的值对象。</p>
<p>实体里可以包含值对象，值对象里也可以包含实体。</p>
<h4 id="领域服务（Domain-Service）"><a href="#领域服务（Domain-Service）" class="headerlink" title="领域服务（Domain Service）"></a>领域服务（Domain Service）</h4><p>有些操作不属于实体或者值对象，那就不用强塞给它们，创建领域服务来提供这些操作吧。留意通用语言，如果里面出现了名词，那一般就是实体或值对象；如果里面出现了动词，那通常就意味着领域服务。例如：支付，这是一个比较明显的业务操作。另外，如果有什么操作会让实体变得臃肿，也可以使用领域服务来解决。但是，不能把所有的东西都堆到领域服务里，过度使用领域服务会导致贫血对象的产生。</p>
<p>据Eric Evans所言，设计良好的领域服务具有以下三个特征：</p>
<ul>
<li>操作不是实体&#x2F;值对象的一个自然的部分</li>
<li>接口根据领域模型的其它元素定义</li>
<li>操作无状态</li>
</ul>
<p>还需要注意的是，不要把领域服务和应用服务混起来了。我们在领域服务里处理业务逻辑，而并不在应用服务里处理。应用服务是领域模型的直接客户，负责处理事务、安全等操作。</p>
<h4 id="领域事件（Domain-Event）"><a href="#领域事件（Domain-Event）" class="headerlink" title="领域事件（Domain Event）"></a>领域事件（Domain Event）</h4><p>《领域驱动设计》一书出版之后，DDD社区并没有停止前进的步伐。领域事件就是在那之后提出来的。领域事件是一个定义了领域专家所关心的事件的对象。当关心的状态由于模型行为而发生改变时，系统将发布领域事件。如果通用语言里出现了：“当……的时候，需要……”通常就意味着一个领域事件。例如：当订单完成支付时，商品需要出库。这里的订单完成支付就预示着一个OrderPaidEvent，里面持有着这个订单的标识。领域事件代表的是已经发生的事，所以命名上通常都使用过去时（如Paid）。对领域事件的处理就像是一个观察者模式，由领域事件的订阅方来决定。订阅方既可以是本地的限界上下文，也可以是外部的限界上下文。</p>
<h4 id="模块（Module）"><a href="#模块（Module）" class="headerlink" title="模块（Module）"></a>模块（Module）</h4><p>如果领域模型发展得比较快，很难整体来讨论它，因为太大了。我们可以将模块视为Java中的包或是C#中的命名空间。将模型组织到不同的模块中，可以有效地降低领域的复杂性。模块之间应该是低耦合的，而模块内部应该是高内聚的。模块的名称应该是通用语言的组成部分，反映出领域的深层知识。</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="聚合（Aggregate）"><a href="#聚合（Aggregate）" class="headerlink" title="聚合（Aggregate）"></a>聚合（Aggregate）</h4><p>聚合就是一组应该呆在一起的对象，聚合根（Aggregate Root）就是聚合在一起的基础，并提供对这个聚合的操作。聚合除了聚合根以外，还有自己的边界（boundary），即聚合里有什么。例如：一个订单可以有多个订单明细，订单明细不可能脱离订单而存在，而订单也不可能没有订单明细。这种情况下，订单和订单明细就是一个聚合，而订单就是这个聚合的聚合根，订单和订单明细就处于这个聚合的边界之内。如果要变更订单明细，我们需要通过操作聚合根订单来实现，如<code>order.changeItemCount()</code>，而非订单明细自身。另外一个例子：一名客户可以有多个订单，订单不可能脱离客户而存在，而客户却可以没有订单。这种情况下，客户和订单就是不同的两个聚合，一个聚合以客户为聚合根，另一个聚合以订单为聚合根，引用客户的标识。客户里并不引用订单的标识，这样将关联减至最少有助于简化对象的关系网。但是带来的一个麻烦就是如果要查找某位客户的所有订单，就不得不从所有的订单里查，而不能从客户这个聚合里直接获得。最后再举一个多对多的例子：一个班级可以有多名学生，学生可以脱离这个班级而存在，而班级不能没有学生，学生也不能不在班级里。这种情况下，班级和学生也是不同的两个聚合，一个聚合以班级为聚合根，引用学生的标识；另一个聚合以学生为聚合根，引用班级的标识，将多对多转换成两个一对多。</p>
<p>聚合是持久化的一个单位，我们需要保证以聚合为单位的数据一致性。如果聚合太大，那就会导致并发修改困难，多人并发修改同一个聚合里的不同项目，结果就是只有第一个提交的人成功修改，其它人不得不重新刷新聚合才能再次修改。大聚合还会导致性能问题，因为操作实体时会将整个大聚合同时加载进内存。珍爱生命，拒绝大聚合。</p>
<p>聚合根必须是实体而非值对象，因为它需要整体持久化，所以一定会有标识。而聚合根里的各个元素，既可能是实体，也可能是值对象。例如：一个订单（聚合根）一般会有订单明细（实体）和送货地址（值对象）。这些元素里可以有对聚合根的引用，但是不能相互引用。任何对其它元素的操作都必须通过聚合根来进行。聚合根里的标识是全局的，聚合根里的实体标识是聚合里唯一的本地标识，因为对它的访问都是通过聚合根来操作的。聚合根拥有自己独立的生命周期，其实体的生命周期从属于其所属的聚合，值对象因为只是值而已，并没有生命周期。</p>
<h4 id="工厂（Factory）"><a href="#工厂（Factory）" class="headerlink" title="工厂（Factory）"></a>工厂（Factory）</h4><p>工厂是生命周期的开始阶段，它可以用来创建复杂的对象或是一整个聚合。复杂对象的创建是领域层的职责，但它并不属于被创建的对象自身的职责。实体和值对象的工厂不太一样，因为值对象是不可变的，所以需要工厂一次性创建一个完整的值对象出来。而实体工厂则可以选择创建之后再补充一些细节。</p>
<h4 id="资源库（Repository）"><a href="#资源库（Repository）" class="headerlink" title="资源库（Repository）"></a>资源库（Repository）</h4><p>资源库是生命周期的结束，它封装了基础设施以提供查询和持久化聚合的操作。这样能够让我们始终聚焦于模型，而把对象的存储和访问都委托给资源库来完成。以订单和订单明细的聚合为例，因为一定是通过订单这个聚合根来获取订单明细，所以可以有订单的资源库，但是不能有订单明细的资源库。也就是说，只有聚合才拥有资源库。需要注意的是，资源库并不是数据库的封装，而是领域层与基础设施之间的桥梁。DDD关心的是领域内的模型，而并非是数据库的操作。理想的资源库对客户（而非开发者）隐藏了内部的工作细节，委托基础设施层来干那些脏活，到关系型数据库、NOSQL、甚至内存里读取和存储数据。��和存储数据。</p>
]]></content>
  </entry>
  <entry>
    <title>d5</title>
    <url>//385579136/</url>
    <content><![CDATA[<h2 id="单一功能原则"><a href="#单一功能原则" class="headerlink" title="单一功能原则"></a>单一功能原则</h2><p>在<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程</a>领域中，<strong>单一功能原则</strong>（Single responsibility principle）规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）。</p>
<p>这个术语由<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BD%97%E4%BC%AF%E7%89%B9%C2%B7C%C2%B7%E9%A9%AC%E4%B8%81&action=edit&redlink=1">罗伯特·C·马丁</a>（Robert Cecil Martin）在他的《敏捷软件开发，原则，模式和实践》一书中的一篇名为〈面向对象设计原则〉的文章中给出。 [<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99#cite_note-1">1]</a> 马丁表述该原则是基于的《结构化分析和系统规格》[<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99#cite_note-2">2]</a>一书中的<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E8%81%9A%E5%8E%9F%E5%88%99">内聚原则</a>（Cohesion）上。</p>
<p>马丁把功能（职责）定义为：“改变的原因”，并且总结出一个类或者模块应该有且只有一个改变的原因。一个具体的例子就是，想象有一个用于编辑和打印报表的模块。这样的一个模块存在两个改变的原因。第一，报表的内容可以改变（编辑）。第二，报表的格式可以改变（打印）。这两方面的改变会因为完全不同的起因而发生：一个是本质的修改，一个是表面的修改。单一功能原则认为这两方面的问题事实上是两个分离的功能，因此他们应该分离在不同的类或者模块里。把有不同的改变原因的事物耦合在一起的设计是糟糕的。</p>
<p>保持一个类专注于单一功能点上的一个重要的原因是，它会使得类更加的健壮。继续上面的例子，如果有一个对于报表编辑流程的修改，那么将存在极大的危险性，因为假设这两个功能存在于同一个类中，修改报表的编辑流程会导致公共状态或者依赖关系的改变，打印功能的代码会因此不工作。</p>
<p>因此不工作。</p>
]]></content>
  </entry>
  <entry>
    <title>d0</title>
    <url>//1720814833/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol>
<li>前端项目日益复杂，功能多</li>
<li>业务逻辑，数据流，渲染，交互等等功能都是放在一块， 没有经过成熟的设计，杂乱无章，功能多了之后， 改一个小东西要把逻辑从头到尾都动一遍</li>
</ol>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ol>
<li>是一个抽象概念一种思想，只在项目设计阶段存在，就是去划分项目每个模块的职责</li>
</ol>
<h3 id="核心点"><a href="#核心点" class="headerlink" title="核心点"></a>核心点</h3><ol>
<li><p>建模，建模是整个ddd最重要的部分</p>
<blockquote>
<p>需要去区分一个业务中的各个概念，为不同的概念建立不同类型的模型，并且找到它们之间的关系，通过建模，建立起我们编程的基础工程，后续所有的开发，都是在这些模型的基础上完成的</p>
</blockquote>
</li>
</ol>
<h3 id="前端建模"><a href="#前端建模" class="headerlink" title="前端建模"></a>前端建模</h3><h4 id="核心思想：分层思想（Layered-Architecture）"><a href="#核心思想：分层思想（Layered-Architecture）" class="headerlink" title="核心思想：分层思想（Layered Architecture）"></a>核心思想：分层思想（Layered Architecture）</h4><p>​	比如一些常见的想法：</p>
<ol>
<li>定义业务对象</li>
<li>控制数据流</li>
<li>界面渲染</li>
<li>用户交互��染</li>
<li>用户交互</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>d4</title>
    <url>//1643923690/</url>
    <content><![CDATA[<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>领域驱动设计（domain-driven-design）是软件代码的结构及语言需要符合<strong>业务领域</strong>中的习惯用法</p>
<p>领域驱动设计可以将实现对应到持续进化的模型</p>
<p>领域驱动设计的前提是：</p>
<ul>
<li>把项目的主要重点放在核心领域（core domain）和领域逻辑</li>
<li>以领域中的模型为基础，进行复杂的设计</li>
<li>让技术人员以及领域专家合作，以迭代方式来完善特定领域问题的概念模型</li>
</ul>
<h5 id="上下文（Context）"><a href="#上下文（Context）" class="headerlink" title="上下文（Context）"></a><strong>上下文（Context）</strong></h5><p>情境，脉络，上下文。比如：电子商务系统。</p>
<h5 id="领域（Domain）"><a href="#领域（Domain）" class="headerlink" title="领域（Domain）"></a><strong>领域（Domain）</strong></h5><p>知识、影响、活动。客户使用软件要处理的问题种类即为软件的领域。</p>
<h5 id="模型（Model）"><a href="#模型（Model）" class="headerlink" title="模型（Model）"></a><strong>模型（Model）</strong></h5><p>一类描述域的不同方面并可用于解决相关问题的系统化的抽象</p>
<h5 id="通用语言（Ubiquitous-Language）"><a href="#通用语言（Ubiquitous-Language）" class="headerlink" title="通用语言（Ubiquitous Language）"></a><strong>通用语言（Ubiquitous Language）</strong></h5><p>一种领域专家使用，为了描述<a href="https://zh.wikipedia.org/wiki/%E9%A0%98%E5%9F%9F%E6%A8%A1%E5%9E%8B">域模型</a>而构造的语言，以减少沟通成本。</p>
<blockquote>
<p>理想情况下，只有一个统一的模型。 但是通常情况下都无法实现，因此在实践中通常分成多个模型。</p>
</blockquote>
<h5 id="限界上下文"><a href="#限界上下文" class="headerlink" title="限界上下文"></a><strong>限界上下文</strong></h5><p>任何大型项目都有多个模型。 然而，当基于不同模型的代码相结合，软件变得越来越多，不可靠，并且难以理解。 团队成员之间的交流变得越来越难。 模型的使用情境变得越来越不清晰。</p>
<p>因此：需要明确定义模型适用的上下文，并且根据团队组织，应用程序特定部分的使用情况以及代码库和数据库模式等物理表现明确设置边界。 保持模型在这些范围内严格一致，并且不被外部的问题影响。</p>
<h5 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a><strong>持续集成</strong></h5><p>当愈多人在相同的有限背景下工作时，模型就愈应该分裂。 团队越大，问题就越大，即使只有三四个人也会遇到严重的问题。 然而，将系统分解为更小的环境最终会失去一个有价值的集成和一致性。</p>
<p>因此：创建一个经常合并所有代码和其他实现工件的过程，用自动化测试快速标记碎片。通过持续地运用统一术语去夯实随着概念在不同人的头脑中的演变而逐渐形成对模型的共同观点。</p>
<h5 id="上下文关系"><a href="#上下文关系" class="headerlink" title="上下文关系"></a><strong>上下文关系</strong></h5><p>在缺乏全局认识的情况下，个别有界上下文会留下一些问题。 其他模型的背景可能仍然是模糊不清的。 其他团队的人不会意识到上下文的界限，并且会不知不觉地做出模糊边缘或使连接复杂化的变化。 当连接必须在不同的上下文之间进行时，它们往往会相互渗透。</p>
<p>因此：确定项目中正在使用的每个模型并定义其限界上下文。 这包括非面向对象子系统的隐式模型。 命名每个限界上下文，并将其命名为通用语言的一部分。 描述模型之间的关联点，确保任何用于共享交流的词语都有清晰明确的含义。 映射现有的情形。</p>
<h3 id="DDD领域驱动设计"><a href="#DDD领域驱动设计" class="headerlink" title="DDD领域驱动设计"></a>DDD领域驱动设计</h3><p>DDD（Domain-Driven Design）是帮助工程师，应对复杂业务系统设计和开发的思想武器和方法论。它指导了我们如何去和领域专家（熟悉业务的负责人）进行沟通，如何和他们找到一门共通语言，并基于该语言构建一套关于领域知识的图谱，并且是按照我们做系统设计的思路构建这套图谱。</p>
<p>建模是DDD的核心方法论，你需要去区分一个业务中的各个概念，为不同的概念建立不同类型的模型，并且找到它们之间的关系，通过建模，建立起我们编程的基础工程，后续所有的开发，都是在这些模型的基础上完成的。</p>
<blockquote>
<p>DDD是什么呢，DDD就是一个抽象的概念，DDD只在软件的架构设计阶段出现，它就是软件模块职责的划分</p>
</blockquote>
<h3 id="前端建模"><a href="#前端建模" class="headerlink" title="前端建模"></a>前端建模</h3><p>如果你使用vue组件，你会有一种为视图撰写模型的感觉，即ViewModel，它一定指向视图层（界面与用户交互）。但如我在多个场合提到的一样，vue组件是纯视图层的要件，如果你把有关业务的代码，写在vue组件中，你的代码将会是业务逻辑和视图逻辑混杂在一起的代码，你将无法在后来的维护中区分和把握到底要改业务逻辑还是改交互逻辑。实际上，这种操作是很多初级前端的惯用手法，因为大部分初级前端的编程习惯，都是随着意识流，按线性的思维写代码。而真正有经验的工程师，<em><strong>一定会在开始写代码之前先思考将要写作的代码，哪些是用于定义业务对象的，哪些是用于控制数据流的，哪些是为了完成界面渲染的，哪些是为了完成用户交互的等等。而这些思考，用一种思想来概括就是“分层思想”或者叫“Layered Architecture”。</strong></em>有了分层思想之后，开发者才不会认为抽象出业务模型是一件麻烦的事。<strong>分层开发，势在必行。</strong></p>
<p><strong>前端业务模型分为两类：一类是用于展示的模型，一类是用于数据提交（表单）的模型</strong>。后者在复杂度上会比前者高出一个等级。</p>
<blockquote>
<p>你可能会有疑问，不都是业务模型么，怎么还区分用于展示的和提交的？这可能是前端的特殊之处。后端应用，提交数据到数据库时，具有特定的约束，但是在输出到前端时却没有约束，因此，后端把大部分工作都投入在对数据库有写入动作的业务逻辑上，而丢给前端的数据，基本上不需要按照视图层的逻辑建模，只要一股脑把数据丢给前端即可。但是前端则不同，视图层具有复杂的交互逻辑，而这些交互逻辑依赖业务对象的特征，比如当这个业务对象处于什么样的一个状态时，才能点击某个按钮触发一个流转业务。因此，在展示&#x2F;交互这个层面，前端也需要建模。而提交数据就更不用说了，前端业务表单本身就是极为复杂的一种场景，不建立模型，根本无法对一个表单所要表达的业务对象完成清晰的创建或更新处理。</p>
</blockquote>
<h3 id="如何建模？"><a href="#如何建模？" class="headerlink" title="如何建模？"></a>如何建模？</h3><p>讲了那么多，那么到底应该如何实施前端建模呢？作为工程师，我们必须掌握一定的方法论，在理论上对我们的设计有一定的自信，才能确保我们的建模方式是对的。DDD为我们提供了建模的方法论，它提供了多个方案（Scheme），比如Entity, Value Object, Service, Modules, Aggregate, Factory, Repository等等，这些都是用来构造模型的方案。</p>
<p>这么多方案，实际上本质要解决两个问题：</p>
<ul>
<li>核心</li>
<li>边界</li>
</ul>
<p>我们要对业务进行建模，首先要抓住该业务的核心是什么。例如银行转账这个业务，它的核心是什么？是转账的金额，还是账号？它的边界又是什么？例如在转账这个业务中，我是否需要去把两边账号的消费记录拉出来看看？这些，都是我们要在建模的时候解决的问题。DDD告诉我们的方法论，是不要自己闭门造车，不要从开发人员的角度去设计一个系统，而是要找领域专家（对该业务的实操了如指掌的人）进行了解，建立自己对该业务的知识体系，并且和领域专家一起敲定有关这个业务各个细节的模型体系。</p>
<p>回到我们前端。我们实际上要找到这个业务中，存在那些对象，收集到所有对象之后，去一个一个的观察它们，如果它是业务逻辑中的关键对象，就要使用Entity的方案，对它进行细致的深入的描述，如果它是一个次要的或者说固定不变的或者一次性用完的对象，那么就可以使用Value Object的方案（也就是一个普通的对象）。有了这些对象之后，还需要有一个东西把它们聚合在一起，这时我们可以使用Aggreate的方案。在这些对象之间，还可能出现一些动作（动词，非静态的），此时我们可以使用Service和Factory的方案。我们还需要和服务端交互，拉取数据，填充到模型中，形成更丰富的细节，此时我们可以采用Repository的方案。</p>
<p>不要被这么多的名词吓到，本质上，放到前端的语境下，你就是需要去创建一些类，并处理好这些类在真实被使用时，它们之间的约束逻辑等等。</p>
<h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><p>通过分层架构（Layered Architecture），我们的代码被以不同层的不同理念进行组织。有关模型的东西，全都且只在模型层处理，我们不需要考虑外部将会如何使用它，理论上可以表述为“内存实体不需要考虑外层环境”的Clean Architecture，因此，我们只需要考虑，我们的建模是否符合真实业务的需要。这样的代码组织，将颠覆我们传统前端开发的一些经验，然而，这种颠覆显得没有什么惊喜，它看上去复杂度增加了，我们反问一句自己，我们是为了分层而分层，还是为了这样分层写出的代码，将有助于我们区分代码块功能，以利于我们的项目在两年三年的持续迭代维护中，有比较清晰的代码组织，从而让我们的维护更加有效？</p>
<h3 id="提炼关系表"><a href="#提炼关系表" class="headerlink" title="提炼关系表"></a>提炼关系表</h3><p>关系表是指在某个业务逻辑中，涉及多个业务对象，它们之间的存在不同情况下的不同联系，所最终组成的一个Object对象。</p>
<p>参考&#x2F;出处：</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/%E9%A0%98%E5%9F%9F%E9%A9%85%E5%8B%95%E8%A8%AD%E8%A8%88">维基百科</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1833272">如何打造更稳健的前端业务模块代码组织形式</a></li>
<li><a href="http://qinghua.github.io/ddd/">DDD</a></li>
</ol>
<p>hua.github.io&#x2F;ddd&#x2F;)</p>
]]></content>
  </entry>
  <entry>
    <title>life</title>
    <url>//432881407/</url>
    <content><![CDATA[<p>男人的成熟只需要一瞬间<br>—– 2022.7.10 看完《人生大事》</p>
<p>《人生大事》</p>
]]></content>
  </entry>
  <entry>
    <title>iig</title>
    <url>//3752725928/</url>
    <content><![CDATA[<p>IIG</p>
<span id="more"></span>
<p>2021年8月16年中总结<br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig01.jpg" alt="iqiyi_iig01"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig02.jpg" alt="iqiyi_iig02"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig03.jpg" alt="iqiyi_iig03"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig04.jpg" alt="iqiyi_iig04"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig05.jpg" alt="iqiyi_iig05"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig06.jpg" alt="iqiyi_iig06"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig07.jpg" alt="iqiyi_iig07"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig08.jpg" alt="iqiyi_iig08"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig09.jpg" alt="iqiyi_iig09"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig10.jpg" alt="iqiyi_iig10"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig11.jpg" alt="iqiyi_iig11"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig12.jpg" alt="iqiyi_iig12"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig13.jpg" alt="iqiyi_iig13"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig14.jpg" alt="iqiyi_iig14"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig15.jpg" alt="iqiyi_iig15"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig16.jpg" alt="iqiyi_iig16"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig17.jpg" alt="iqiyi_iig17"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig18.jpg" alt="iqiyi_iig18"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig19.jpg" alt="iqiyi_iig19"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig20.jpg" alt="iqiyi_iig20"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig21.jpg" alt="iqiyi_iig21"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig22.jpg" alt="iqiyi_iig22"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig23.jpg" alt="iqiyi_iig23"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig24.jpg" alt="iqiyi_iig24"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig25.jpg" alt="iqiyi_iig25"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig26.jpg" alt="iqiyi_iig26"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig27.jpg" alt="iqiyi_iig27"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig28.jpg" alt="iqiyi_iig28"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig29.jpg" alt="iqiyi_iig29"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig30.jpg" alt="iqiyi_iig30"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig31.jpg" alt="iqiyi_iig31"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig32.jpg" alt="iqiyi_iig32"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig33.jpg" alt="iqiyi_iig33"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig34.jpg" alt="iqiyi_iig34"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig35.jpg" alt="iqiyi_iig35"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig36.jpg" alt="iqiyi_iig36"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig37.jpg" alt="iqiyi_iig37"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig38.jpg" alt="iqiyi_iig38"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig39.jpg" alt="iqiyi_iig39"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig40.jpg" alt="iqiyi_iig40"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig41.jpg" alt="iqiyi_iig41"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig42.jpg" alt="iqiyi_iig42"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig43.jpg" alt="iqiyi_iig43"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig44.jpg" alt="iqiyi_iig44"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig45.jpg" alt="iqiyi_iig45"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig46.jpg" alt="iqiyi_iig46"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig47.jpg" alt="iqiyi_iig47"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig48.jpg" alt="iqiyi_iig48"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig49.jpg" alt="iqiyi_iig49"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig50.jpg" alt="iqiyi_iig50"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig51.jpg" alt="iqiyi_iig51"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig52.jpg" alt="iqiyi_iig52"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig53.jpg" alt="iqiyi_iig53"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig54.jpg" alt="iqiyi_iig54"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig55.jpg" alt="iqiyi_iig55"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig56.jpg" alt="iqiyi_iig56"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig57.jpg" alt="iqiyi_iig57"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig58.jpg" alt="iqiyi_iig58"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig59.jpg" alt="iqiyi_iig59"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig60.jpg" alt="iqiyi_iig60"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig61.jpg" alt="iqiyi_iig61"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig62.jpg" alt="iqiyi_iig62"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig63.jpg" alt="iqiyi_iig63"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig64.jpg" alt="iqiyi_iig64"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig65.jpg" alt="iqiyi_iig65"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig66.jpg" alt="iqiyi_iig66"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig67.jpg" alt="iqiyi_iig67"><br><img src="/images/D850/iqiyi_iig_2021/iqiyi_iig68.jpg" alt="iqiyi_iig68"></p>
]]></content>
  </entry>
  <entry>
    <title>798</title>
    <url>//4175634211/</url>
    <content><![CDATA[<p>798</p>
<span id="more"></span>
<p><img src="/images/D850/play_798_2021/play_79801.jpg" alt="play_79801"><br><img src="/images/D850/play_798_2021/play_79802.jpg" alt="play_79802"><br><img src="/images/D850/play_798_2021/play_79803.jpg" alt="play_79803"><br><img src="/images/D850/play_798_2021/play_79804.jpg" alt="play_79804"><br><img src="/images/D850/play_798_2021/play_79805.jpg" alt="play_79805"><br><img src="/images/D850/play_798_2021/play_79806.jpg" alt="play_79806"><br><img src="/images/D850/play_798_2021/play_79807.jpg" alt="play_79807"><br><img src="/images/D850/play_798_2021/play_79808.jpg" alt="play_79808"><br><img src="/images/D850/play_798_2021/play_79809.jpg" alt="play_79809"><br><img src="/images/D850/play_798_2021/play_79810.jpg" alt="play_79810"><br><img src="/images/D850/play_798_2021/play_79811.jpg" alt="play_79811"><br><img src="/images/D850/play_798_2021/play_79812.jpg" alt="play_79812"><br><img src="/images/D850/play_798_2021/play_79813.jpg" alt="play_79813"><br><img src="/images/D850/play_798_2021/play_79814.jpg" alt="play_79814"><br><img src="/images/D850/play_798_2021/play_79815.jpg" alt="play_79815"><br><img src="/images/D850/play_798_2021/play_79816.jpg" alt="play_79816"><br><img src="/images/D850/play_798_2021/play_79817.jpg" alt="play_79817"><br><img src="/images/D850/play_798_2021/play_79818.jpg" alt="play_79818"></p>
]]></content>
  </entry>
  <entry>
    <title>cli</title>
    <url>//1224102205/</url>
    <content><![CDATA[<p>工具安装</p>
<ol>
<li><p>安装 docker</p>
<p>桌面版:  <a href="https://www.docker.com/">docker官网</a></p>
</li>
<li><p>安装 bsam cli</p>
<p>执行 <code>sudo pip3 install bce-sam-cli</code> 即可完成安装。</p>
<blockquote>
<p>遇到问题： <code>zsh: command not found: bsam</code> ;<br>原因是之前没有加 sudo</p>
</blockquote>
</li>
</ol>
<p>创建函数</p>
<ol>
<li><p>初始化项目： <code>bsam init --runtime nodejs12 --name lee-app</code></p>
</li>
<li><p>函数安装依赖：</p>
<ol>
<li><code>cd src</code> <code>npm install</code></li>
<li><code>bsam local install</code></li>
</ol>
</li>
<li><p>部署</p>
<ol>
<li><p>打包 <code>bsam package</code></p>
</li>
<li><p>发布 <code>bsam deploy</code></p>
<blockquote>
<p>发布之前要去配置 config， 把百度帐号的信息跟本地的cli绑定起来， <a href="https://console.bce.baidu.com/iam/?_=1658676423284#/iam/accesslist">创建&#x2F;获取 AK&#x2F;SK</a><br>执行 <code>bsam config</code><br>BCE Access Key ID:<br>BCE Secret Access Key:<br>BCE region (bj, gz, su):</p>
</blockquote>
</li>
<li><p>执行完deploy命令后， 可到页面函数列表里边去看函数是否发布成功， 如果成功了， 就会在函数列表里边有</p>
</li>
</ol>
</li>
<li><p>测试</p>
<ol>
<li>本地<ol>
<li>去src下边用 <a href="https://mochajs.org/">mocha</a> 进行测试， 执行 <code>npm run test</code></li>
</ol>
</li>
<li><a href="https://console.bce.baidu.com/cfc/#/cfc/functions">CFC 函数列表</a>可以进行测试<br>点击函数列表后面的测试操作就可以</li>
</ol>
</li>
<li><p>调用</p>
<ol>
<li>添加一个触发器</li>
<li>http的触发器可以直接在浏览器地址栏访问览器地址栏访问</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>watch</title>
    <url>//1342917158/</url>
    <content><![CDATA[<h3 id="vue3中-watch、watchEffect区别"><a href="#vue3中-watch、watchEffect区别" class="headerlink" title="vue3中 watch、watchEffect区别"></a><a href="https://segmentfault.com/a/1190000039916178">vue3中 watch、watchEffect区别</a></h3><p>1、watch是惰性执行，也就是只有监听的值发生变化的时候才会执行，但是watchEffect不同，每次代码加载watchEffect都会执行（忽略watch第三个参数的配置，如果修改配置项也可以实现立即执行）</p>
<p>2、watch需要传递监听的对象，watchEffect不需要</p>
<p>3、watch只能监听响应式数据：ref定义的属性和reactive定义的对象，如果直接监听reactive定义对象中的属性是不允许的，除非使用函数转换一下</p>
<p>4、watchEffect如果监听reactive定义的对象是不起作用的，只能监听对象中的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> countObj = <span class="title function_">reactive</span>(&#123;<span class="attr">count</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 惰性，首次加载不执行</span></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal)&#125; )</span><br><span class="line"><span class="comment">// watch 不能直接监听reactive里面的属性，只能监听ref、reactiveObject， function， array, 如果想监听reactive的某个属性，那么需要转换成函数</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> countObj.<span class="property">count</span>, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(oldVal, newVal)&#125;, &#123;&#125;)</span><br><span class="line">watch (countObj, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听多个值，前面是监听数据的数组，后面的参数是两个数组，前面数组是变化后监听对象值的数组，后面是变化前监听对象值的数组</span></span><br><span class="line">watch ([countObj, count], <span class="function">(<span class="params">[oneNewName, twoNewName], [oneOldName, twoOldName]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(oneNewName, oneOldName, twoNewName, twoOldName)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// watchEffect，和watch不一样，1、会立即执行，只要定义了就会执行。2、他只能监听某个值，监听对象不管用。3、不需要传递参数，会自动管制代码中的变量。4、没法获取newVal和oldVal</span></span><br><span class="line"><span class="keyword">const</span> watchEf = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(countObj.<span class="property">count</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<p>参考</p>
<p><a href="https://segmentfault.com/a/1190000039916178">原文地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>fix</title>
    <url>//1509574496/</url>
    <content><![CDATA[<p>如何在TypeScript中的<code>window</code>上显式设置新属性？</p>
<p>要保持动态，只需使用：</p>
<p>(<any>window).MyNamespace</p>
]]></content>
  </entry>
  <entry>
    <title>学习计划</title>
    <url>//1579271507/</url>
    <content><![CDATA[<p>xie</p>
<span id="more"></span>
<ul>
<li><p><input disabled="" type="checkbox"> 
8.22</p>
<ul>
<li><input disabled="" type="checkbox"> JS第七章</li>
<li><input disabled="" type="checkbox"> Vue（一期）：	第十五章项目实战-页面骨架开发（60min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.23</p>
<ul>
<li><input disabled="" type="checkbox"> 第十六章 -head组件开发 </li>
<li><input disabled="" type="checkbox"> 1-2（20min） 3-8（70min） 9-16（90min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.24</p>
<ul>
<li><input disabled="" type="checkbox"> 第十七章 -goods商品列表开发 1-5（50min） 6-8（40min） 9-14（70min）15-17（35min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.25</p>
<ul>
<li><input disabled="" type="checkbox"> 第十七章 -goods商品列表开发 18-20（30min） 21-24（50min）</li>
<li><input disabled="" type="checkbox"> 第十八章 -food商品详情页实现 1-5（60min） 6-11（70min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.26</p>
<ul>
<li><input disabled="" type="checkbox"> 第十八章 -food商品详情页实现 12-17（50min） 12-17（50min）</li>
<li><input disabled="" type="checkbox"> 第十九章 -ratings评价列表页实现 1-3（35min） 4-6（40min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.27</p>
<ul>
<li><input disabled="" type="checkbox"> 第二十章 -seller商家详情页实现 1-4（35min） 5-7（30min） 8-11（45min）</li>
<li><input disabled="" type="checkbox"> 第二十一章 项目编译打包（15min）</li>
<li><input disabled="" type="checkbox"> 第二十二章 课程总结（5min）</li>
<li><input disabled="" type="checkbox"> 第二十三章 Vue.js1.0向2.0升级（30min）</li>
<li><input disabled="" type="checkbox"> 第一章 课程导学（10min）</li>
<li><input disabled="" type="checkbox"> 第二章 项目准备工作（25min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.28</p>
<ul>
<li><input disabled="" type="checkbox"> 第三章 头部组件开发（30min）</li>
<li><input disabled="" type="checkbox"> 第四章 Tab组件开发（30min）</li>
<li><input disabled="" type="checkbox"> 第五章 项目准备工作 1-3（25min） 4-5（35min） 6-7（40min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.29</p>
<ul>
<li><input disabled="" type="checkbox"> 第五章 项目准备工作 8-9（30min）</li>
<li><input disabled="" type="checkbox"> 第六章 商品详情页开发（50min）</li>
<li><input disabled="" type="checkbox"> 第七章 评价和商家页面开发（45min）</li>
<li><input disabled="" type="checkbox"> 第八章 create-api原理分析（40min）</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
8.30</p>
<ul>
<li><input disabled="" type="checkbox"> 第九章 打包构建和项目部署（55min）</li>
<li><input disabled="" type="checkbox"> 第十章 课程总结（10min）</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>output</title>
    <url>//3437106334/</url>
    <content><![CDATA[<h2 id="Rollup-输出的不同格式js文件对比"><a href="#Rollup-输出的不同格式js文件对比" class="headerlink" title="Rollup 输出的不同格式js文件对比"></a>Rollup 输出的不同格式js文件对比</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">amd , cjs , esm , iife , umd , system</span><br></pre></td></tr></table></figure>

<h2 id="一、IIFE-自执行函数"><a href="#一、IIFE-自执行函数" class="headerlink" title="一、IIFE 自执行函数"></a>一、IIFE 自执行函数</h2><blockquote>
<p>IIFE 的全称是 “immediately invoked function expression”。</p>
</blockquote>
<h3 id="1-1-打包结果分析"><a href="#1-1-打包结果分析" class="headerlink" title="1.1 打包结果分析"></a>1.1 打包结果分析</h3><p>让我们先看看本 <code>demo</code> 的 <code>iife</code> 格式打出来的包长什么样。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7ff249b1c574c6f8fe3bf46c6ca7899~tplv-k3u1fbpfcp-zoom-1.image" alt="IIFE"></p>
<p>对上述代码做一些简化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Test</span> = (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, lodash</span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>; <span class="comment">// 自带严格模式，避免一些奇怪的兼容性问题</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 下面折行无用代码被 tree-shaking 掉了</span></span><br><span class="line"><span class="comment">   * const unusedVar = &#x27;May the 4th&#x27;</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> answer = <span class="number">42</span>; <span class="comment">// 业务中被单一引用的模块，被直接抹平了</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">printAnswer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`the answer is <span class="subst">$&#123;answer&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lodash.<span class="title function_">repeat</span>(<span class="string">&#x27;1&#x27;</span>, answer));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">printAnswer</span> = printAnswer; <span class="comment">// 把要export的属性挂在到exports上</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line"></span><br><span class="line">&#125;)(&#123;&#125;, $); <span class="comment">// exports是第一个入参，依赖的jquery是第二个入参</span></span><br></pre></td></tr></table></figure>

<p><code>IIFE</code> 是前端模块化早期的产物，它的核心思路是:</p>
<ol>
<li>构建一个匿名函数</li>
<li>立刻执行这个匿名函数，对外部的依赖通过入参的形式传入</li>
<li>返回该模块的输出</li>
</ol>
<h3 id="1-2-如何运行"><a href="#1-2-如何运行" class="headerlink" title="1.2 如何运行"></a>1.2 如何运行</h3><p><code>IIFE</code> 的运行其实很容易，如果它没有其他依赖，只需要去引入文件，然后在 <code>window</code> 上取相应的变量即可。<br>如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// jquery 就是典型的自执行函数模式，当你引入后，他就会挂在到 window.$ 上</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">$</span> <span class="comment">// 这样就能取到 jquery 了</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是如果你像本 <code>demo</code> 中那样依赖了其他的模块，那你就必须保证以下两点才能正常运行：</p>
<ol>
<li>此包所依赖的包，已在此包之前完成加载。</li>
<li>前置依赖的包，和 <code>IIFE</code> 只执行入参的变量命名是一致的。</li>
</ol>
<p>以本 <code>demo</code> 的 <code>IIFE</code> 构建结果为例：</p>
<ol>
<li>它前置依赖了 <code>lodash</code>，因此需要在它加载之前完成 <code>lodash</code> 的加载。</li>
<li>此 <code>IIFE</code> 的第二个入参是 <code>lodash</code>，作为前置条件，我们需要让 <code>window.lodash</code> 也指向 <code>lodash</code>。<br>因此，运行时，代码如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">lodash</span> = <span class="variable language_">window</span>.<span class="property">_</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">Test</span>.<span class="title function_">printAnswer</span>();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-优缺点"><a href="#1-3-优缺点" class="headerlink" title="1.3 优缺点"></a>1.3 优缺点</h3><ul>
<li>优点:<ol>
<li>通过闭包营造了一个“私有”命名空间，防止影响全局，并防止被从外部修改私有变量。</li>
<li>简单易懂</li>
<li>对代码体积的影响不大</li>
</ol>
</li>
<li>缺点：<ol>
<li>输出的变量可能影响全局变量；引入依赖包时依赖全局变量。</li>
<li>需要使用者自行维护 <code>script</code> 标签的加载顺序。</li>
</ol>
</li>
</ul>
<p>优点就不细说了，缺点详细解释一下。</p>
<p><strong>缺点一：输出的变量可能影响全局变量；引入依赖包时依赖全局变量</strong>。</p>
<p>前半句：<strong>输出的变量可能影响全局变量;</strong> 其实很好理解，以上面 <code>demo</code> 的输出为例： <code>window.Test</code> 就已经被影响了。<br>这种明显的副作用在程序中其实是有隐患的。</p>
<p>后半句：<strong>引入依赖包时依赖全局变量；</strong> 我们为了让 <code>demo</code> 正常运行，因此加了一行代码让 <code>window.lodash</code> 也指向 <code>lodash</code>，但它确实是太脆弱了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有这一行，demo就无法正常运行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">lodash</span> = <span class="variable language_">window</span>.<span class="property">_</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你瞧，<code>IIFE</code> 的执行对环境的依赖是苛刻的，除非它完全不依赖外部包。（Jquery: 正是在下！）</p>
<p>虽然 <code>IIFE</code> 的缺点很多，但并不妨碍它在 <code>Jquery</code> 时代极大地推动了 <code>web</code> 开发的进程，因为它确实解决了 <code>js</code> 本身存在的很多问题。</p>
<p>那么？后续是否还有 <strong>更为优秀</strong> 的前端模块化方案问世呢？</p>
<p>当然有，往下看吧。</p>
<h2 id="二、CommonJS"><a href="#二、CommonJS" class="headerlink" title="二、CommonJS"></a>二、CommonJS</h2><h3 id="2-1-分析打包结果"><a href="#2-1-分析打包结果" class="headerlink" title="2.1 分析打包结果"></a>2.1 分析打包结果</h3><p>先看看 <code>CommonJs</code> 打包的结果:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95627d69b68b4cc9a4387db25cdf954c~tplv-k3u1fbpfcp-zoom-1.image" alt="cjs"><br>简化一下，就长这样了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> answer = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">printAnswer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 打印</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`the answer is <span class="subst">$&#123;answer&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 测试 lodash 的能力，打印42个1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lodash.<span class="title function_">repeat</span>(<span class="string">&#x27;1&#x27;</span>, answer));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">printAnswer</span> = printAnswer;</span><br></pre></td></tr></table></figure>

<p>以上格式，就是 <code>CommonJS</code> 规范的写法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CommonJS 通过一个全局 require 方法进行模块的引入 </span></span><br><span class="line"><span class="keyword">var</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="comment">// CommonJS 进行模块内方法输出的方式</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">printAnswer</span> = printAnswer;</span><br><span class="line"><span class="comment">// 上面写法也等价于：</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">printAnswer</span> = printAnswer;</span><br><span class="line"><span class="comment">// 因为 exports 变量等价于 module.exports</span></span><br></pre></td></tr></table></figure>

<p>为了解决 <code>node.js</code> 在模块化上的缺失， <strong>2009年10月</strong> <code>CommonJS</code> 规范首次被提出。</p>
<p>注意这个关键词： <strong>node.js</strong>。</p>
<p>是的，<code>CommonJS</code> 并不是在浏览器环境运行的规范，而是在 <code>node.js</code> 环境下运行的。</p>
<h3 id="2-2-如何运行"><a href="#2-2-如何运行" class="headerlink" title="2.2 如何运行"></a>2.2 如何运行</h3><p>因此，我写了一个 <code>run.js</code> 脚本。<br>如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// run.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="built_in">require</span>(<span class="string">&#x27;./bundle-by-lodash&#x27;</span>)</span><br><span class="line"><span class="title class_">Test</span>.<span class="title function_">printAnswer</span>()</span><br></pre></td></tr></table></figure>

<p>然后，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">node ./out/cjs/run.js </span><br><span class="line"><span class="comment"># 输出1： </span></span><br><span class="line">&gt; the answer is 42</span><br><span class="line"><span class="comment"># 输出2： </span></span><br><span class="line">&gt; 111111111111111111111111111111111111111111</span><br></pre></td></tr></table></figure>

<p>可以看出，<code>node.js</code> 环境是天然支持 <code>CommonJS</code> 的。</p>
<h3 id="2-3-优缺点"><a href="#2-3-优缺点" class="headerlink" title="2.3 优缺点"></a>2.3 优缺点</h3><ul>
<li>优点</li>
</ul>
<ol>
<li>完善的模块化方案，完美解决了 <code>IIFE</code> 的各种缺点。</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>不支持浏览器环境，因为这种同步的引入方式可能导致浏览器假死。</li>
</ol>
<p>因此，前端界迫切地需要一种能在浏览器环境完美运行，完善的模块化方案。</p>
<h2 id="三、AMD-和-requirejs"><a href="#三、AMD-和-requirejs" class="headerlink" title="三、AMD 和 requirejs !"></a>三、AMD 和 requirejs !</h2><blockquote>
<p>AMD，YES!</p>
</blockquote>
<p>2011年， <code>amdjs-api</code> 在业内被正式提出。</p>
<h3 id="3-1-打包结果分析"><a href="#3-1-打包结果分析" class="headerlink" title="3.1 打包结果分析"></a>3.1 打包结果分析</h3><p>amd 格式的打包结果如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49b6e3794785493b97322cbbf74d8d19~tplv-k3u1fbpfcp-zoom-1.image" alt="amd,yes!"><br>可以看到，核心内容是一个全局方法 <code>define</code> 。</p>
<p><code>define</code> 方法有三个入参，分别是：</p>
<ul>
<li><code>&quot;Test&quot;</code>, 模块名称</li>
<li><code>[</code>exports<code>,</code>lodash<code>]</code> 分别表示模块的输出和外部依赖</li>
<li>一个以 <code>exports</code> 和 <code>lodash</code> 作为入参的方法，代表模块的实际内容。</li>
</ul>
<p>相比于 <code>IIFE</code> 和 <code>CommonJs</code> 而言，<code>AMD</code> 的写法无疑是复杂且别扭的。</p>
<p>但它却实实在在是解决了 <code>IIFE</code> 和 <code>CommonJS</code> 所面临的问题，对“浏览器里完善的JS模块方法” 提供了一套完善的方案。</p>
<p>尤其是 <code>amd</code> 标准的实现方案：<code>requirejs</code>。</p>
<p><code>requirejs</code> 所实现的 <code>AMD</code> 不仅解决了 <code>CommonJS</code> 在浏览器端的不适，通过异步的方式进行模块加载实现了不会导致假死的能力；更是完全弥补了 <code>IIFE</code> 存在的各类缺陷。</p>
<p><code>requirejs</code> 在使用时，一般情况下是以下四步法：</p>
<ol>
<li>在浏览器内引入 <code>require.js</code></li>
<li>通过 <code>requirejs.config</code> 方法定义全局的依赖</li>
<li>通过 <code>requirejs.define</code> 注册模块</li>
<li>通过 <code>requirejs()</code> 完成模块引入。</li>
</ol>
<h3 id="3-2-如何运行"><a href="#3-2-如何运行" class="headerlink" title="3.2 如何运行"></a>3.2 如何运行</h3><p>在 <code>out/amd</code> 打包目录下的 <code>index.html</code> 里，按如下方式编排代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 引入 require.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. 定义全局依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">requirejs</span>.<span class="title function_">config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">paths</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;lodash&quot;</span>: <span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3. 定义模块 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 开销模块</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.requirejs(</span></span><br><span class="line"><span class="language-javascript">      [<span class="string">&#x27;Test&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span>   (<span class="params">test</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        test.<span class="title function_">printAnswer</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开浏览器，我们可以正常地看到]控制台里被打印出来的 <code>42</code> 和 <code>42个1</code> 了。</p>
<h3 id="3-3-优缺点"><a href="#3-3-优缺点" class="headerlink" title="3.3 优缺点"></a>3.3 优缺点</h3><ul>
<li>优点</li>
</ul>
<ol>
<li>解决了 <code>CommonJS</code> 的缺点</li>
<li>解决了 <code>IIFE</code> 的缺点</li>
<li>一套完备的浏览器里 <code>js</code> 文件模块化方案</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>代码组织形式别扭，可读性差</li>
</ol>
<p>但好在我们拥有了各类打包工具，浏览器内的代码可读性再差也并不影响我们写出可读性ok的代码。</p>
<p>现在，我们拥有了<strong>面向 <code>node.js</code> 的 <code>CommonJs</code></strong> 和 <strong>面向浏览器的 <code>AMD</code></strong> 两套标准。</p>
<p>如果我希望我写出的代码能同时被<strong>浏览器</strong>和<strong>nodejs</strong>识别，我应该怎么做呢？</p>
<h2 id="四、UMD-伟大的整合"><a href="#四、UMD-伟大的整合" class="headerlink" title="四、UMD 伟大的整合"></a>四、UMD 伟大的整合</h2><blockquote>
<p>它没有做什么突破性的创造，但它是集大成者。</p>
</blockquote>
<h3 id="4-1-打包分析"><a href="#4-1-打包分析" class="headerlink" title="4.1 打包分析"></a>4.1 打包分析</h3><p><code>umd</code> 格式构建出来的代码的可读性进一步降低了。</p>
<p>我相信任何正常人看到下面这段代码都会感到一阵头大：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73f996a633424e23bffb9b592323bcb2~tplv-k3u1fbpfcp-zoom-1.image" alt="umd bundle"></p>
<p>是的，整整一大段代码，只是在处理兼容性问题，判断当前应该使用 <code>amd</code> 亦或是 <code>CommonJS</code>。</p>
<p>因此 <code>umd</code> 的代码和实现不在此进行过多分析，它所做的无非便是让同一段代码兼容了 <code>amd</code> 和 <code>CommonJS</code>。</p>
<h3 id="4-2-如何运行？"><a href="#4-2-如何运行？" class="headerlink" title="4.2 如何运行？"></a>4.2 如何运行？</h3><ul>
<li>在浏览器端，它的运行方式和 <code>amd</code> 完全一致，可以完全参考 <code>3.2</code> 节的 <code>demo</code>。</li>
<li>在node.js端，它则和 <code>CommonJS</code> 的运行方式完全一致，在此就不赘述了。</li>
</ul>
<h3 id="4-3-优缺点"><a href="#4-3-优缺点" class="headerlink" title="4.3 优缺点"></a>4.3 优缺点</h3><ul>
<li>优点<ol>
<li>抹平了一个包在 <code>AMD</code> 和 <code>CommonJS</code> 里的差异</li>
</ol>
</li>
<li>缺点<ol>
<li>会为了兼容产生大量不好理解的代码。（理解难度与包体积）</li>
</ol>
</li>
</ul>
<p>虽然在社区的不断努力下，<code>CommonJS</code> 、 <code>AMD</code> 、 <code>UMD</code> 都给业界交出了自己的答卷。</p>
<p>但很显然，它们都是不得已的选择。</p>
<p>浏览器应该有自己的加载标准。</p>
<p><code>ES6</code> 草案里，虽然描述了模块应该如何被加载，但它没有 “加载程序的规范”。</p>
<h2 id="五、SystemJs"><a href="#五、SystemJs" class="headerlink" title="五、SystemJs"></a>五、SystemJs</h2><p>因此 <code>WHATWG（Web Hypertext Application Technology Working Group）</code> 即网页超文本应用技术工作小组，提出了一套更有远见的规范：<a href="https://github.com/whatwg/loader">whatwg&#x2F;loader</a>。</p>
<p>也就是 <code>JavaScript Loader Standard</code> （JS 加载标准）。</p>
<blockquote>
<p>本规范描述了从 JavaScript 宿主环境中加载 JavaScript 模块的行为。它还提供了用于拦截模块加载过程和自定义加载行为的 api。</p>
</blockquote>
<p>基于此规范，<code>SystemJS</code> 诞生了。</p>
<p><code>SystemJS</code> 是目前 <code>whatwg/loader</code> 规范的最佳实践者。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19c610fcbb654337b5ff23f451e52ab5~tplv-k3u1fbpfcp-zoom-1.image" alt="systemjs bundle"></p>
<p>可以看出来，<code>system</code> 的打包结果其实和 <code>amd</code> 类似，提供了全局的对象 <code>System</code>，并提供了注册的方式和统一的写法。</p>
<p>就单纯的从打包结果上，其实看不出它相比对 <code>AMD + require.js</code> 有什么优势，<strong>难道只是写法上存在差异</strong>?</p>
<p>并不止于此！</p>
<p>相比于 <code>require.js</code>，<code>SystemJS</code> 的 <code>System.import(&#39;module/name&#39;)</code> 方式允许你更为“懒”地加载模块，这意味着你无需每次都加载一大堆的 <code>bundle</code>，用户只需要为他能看见的页面开销带宽。</p>
<p>另外，正因为 <code>SystemJS</code> 是面向 <code>whatwg/loader</code> 规范实践的，因此它是面向未来的模块依赖方式。</p>
<blockquote>
<p>抱歉，这个的 demo 我也没玩明白，就不误导大家了。希望有明白的大佬可以帮忙完善下demo。</p>
</blockquote>
<h2 id="六、ESM"><a href="#六、ESM" class="headerlink" title="六、ESM"></a>六、ESM</h2><blockquote>
<p>ECMAScript modules, 也叫 ESM, Javascript 模块化官方标准格式。</p>
</blockquote>
<h3 id="6-1-打包分析"><a href="#6-1-打包分析" class="headerlink" title="6.1 打包分析"></a>6.1 打包分析</h3><p>在 <code>ESM</code> 被提出来之前，JavaScript 一直没有真正意义上的模块（module）体系。</p>
<p>它的规范是通过 <code>export</code> 命令显式指定输出的代码，再通过 <code>import</code> 命令输入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="comment">// 导出命令</span></span><br><span class="line"><span class="keyword">export</span> &#123; zap &#125;;</span><br></pre></td></tr></table></figure>

<p>这也是我们日常开发中最为熟悉的写法。</p>
<p>因此，<code>esm</code> 格式打出来的包，可读性确实非常棒:<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71c81b32140d4853b83d8ab6ff3bb764~tplv-k3u1fbpfcp-zoom-1.image" alt="esm"></p>
<p>和阅读我们平时所写的业务代码完全没有区别。（<code>rollup</code> 依然没忘记做 <code>tree-shaking</code>）</p>
<h3 id="6-2-如何运行"><a href="#6-2-如何运行" class="headerlink" title="6.2 如何运行"></a>6.2 如何运行</h3><blockquote>
<p>祝贺你，是这个时代的前端开发。</p>
</blockquote>
<p>部分现代浏览器已经开始实装 <code>&lt;script type=&quot;module&gt;</code> 了，因此在浏览器上直接使用 <code>esm</code> 已成为现实。</p>
<p>但运行起来扔需要做一些前置步骤。</p>
<ol>
<li>在js-modules目录下起一个本地静态服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在js-modules目录下起一个本地静态服务</span></span><br><span class="line"><span class="built_in">cd</span> js-modules &amp;&amp; http-server</span><br></pre></td></tr></table></figure>

<ol>
<li>把 <code>esm/bundle.js</code> 文件的第一行修改为：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> repeat <span class="keyword">from</span> <span class="string">&#x27;../../node_modules/lodash-es/repeat.js&#x27;</span>;</span><br><span class="line"><span class="comment">// 因为默认的lodash并不是输出的 esm 格式，因此为了demo我们需要做一些特殊处理</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在浏览器打开页面(假设端口是8080)，则打开：<a href="http://127.0.0.1:8080/out/esm/index.html">http://127.0.0.1:8080/out/esm/index.html</a></li>
</ol>
<p>这样一来，代码就能成功运行，控制台就可以成功打印 <code>42</code> 和 <code>42个1</code> 了。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/598c41396bcf4fc0a31c3bb3df7398d3~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p>
<h2 id="总结：分别适合在什么场景使用？"><a href="#总结：分别适合在什么场景使用？" class="headerlink" title="总结：分别适合在什么场景使用？"></a>总结：分别适合在什么场景使用？</h2><ul>
<li><strong>IIFE:</strong> 适合部分场景作为SDK进行使用，尤其是需要把自己挂到 <code>window</code> 上的场景。</li>
<li><strong>CommonJS:</strong> 仅node.js使用的库。</li>
<li><strong>AMD:</strong> 只需要在浏览器端使用的场景。</li>
<li><strong>UMD:</strong> 既可能在浏览器端也可能在node.js里使用的场景。</li>
<li><strong>SystemJs:</strong> 和UMD类似。目前较出名的 <code>Angular</code> 用的就是它。</li>
<li><strong>ESM:</strong> 1. 还会被引用、二次编译的场景（如组件库等）；2.浏览器调试场景如 <code>vite.js</code>的开发时。3.对浏览器兼容性非常宽松的场景。</li>
</ul>
<p><a href="https://bbs.huaweicloud.com/blogs/324355">原文地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端进阶 精选20道面试题</title>
    <url>//2410320999/</url>
    <content><![CDATA[<h2 id="1-new-的实现原理"><a href="#1-new-的实现原理" class="headerlink" title="1. new 的实现原理"></a>1. new 的实现原理</h2><span id="more"></span>

<ol>
<li>新建一个空对象  let newObj &#x3D; {}</li>
<li>修改对象的原型: 把新对象的 <code>__proto__</code> 指向构造函数的 <code>prototype</code> 属性</li>
<li>改变 this 指向，并执行</li>
<li>返回对象里边的内容原来构造函数里边的内容<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 取第一个参数，第一参娄就是构造函数</span></span><br><span class="line">  <span class="keyword">let</span> [<span class="title class_">Constructor</span>, ...args] = [...<span class="variable language_">arguments</span>];</span><br><span class="line">  obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">  <span class="keyword">return</span> result === <span class="string">&#x27;object&#x27;</span> ? result : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-如何正确判断一-this-指向"><a href="#2-如何正确判断一-this-指向" class="headerlink" title="2. 如何正确判断一 this 指向"></a>2. 如何正确判断一 this 指向</h2><p>分析好上下文：<strong>谁调用指向谁</strong></p>
<p>分四种情况：new, 显示，隐式，默认</p>
<p>参考这里： <a href="/3915840815.html">this指向</a></p>
<h2 id="3-深拷贝和浅拷贝的区别是什么？-实现一个深拷贝"><a href="#3-深拷贝和浅拷贝的区别是什么？-实现一个深拷贝" class="headerlink" title="3. 深拷贝和浅拷贝的区别是什么？ 实现一个深拷贝"></a>3. 深拷贝和浅拷贝的区别是什么？ 实现一个深拷贝</h2><p>浅拷贝一般指用来拷贝栈内存上的东西，而深拷贝一般是指用来拷贝堆内存上的东西</p>
<p>这是我个人的理解， 为啥这么说呢 ？ </p>
<p>浅拷贝：创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p>
<p>深拷贝：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象</p>
<p>之前有文章介绍过基本类型是存在栈内存上的，而引用类型来说，对象的属性是保存在栈内存中的，属性对应的值是保存在堆内存中的, 同时，栈内存上也保存着该属性的值所在的堆内存的地址。</p>
<p>所以我们可以这样去理解，浅拷贝是栈内存上的拷贝，而深拷贝是堆内存上的拷贝.</p>
<p>首先我们要明月一个前提：</p>
<p><strong>只有对象里嵌套对象的情况下,才会根据需求讨论,我们要深拷贝还是浅拷贝。</strong></p>
<p><strong>浅拷贝实现：</strong></p>
<ol>
<li><code>Oject.assign()</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ahui = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">city</span>: [<span class="string">&quot;泰国&quot;</span>,<span class="string">&quot;新加坡&quot;</span>,<span class="string">&quot;印度尼西亚&quot;</span>],</span><br><span class="line">  <span class="attr">sayname</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">saycity</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">city</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let angeli = Object.assign(&#123;&#125;, ahui) // 这样实现深拷贝</span></span><br><span class="line"><span class="keyword">let</span> angeli = <span class="title class_">Object</span>.<span class="title function_">assign</span>(ahui, &#123;&#125;) <span class="comment">// 这样实现浅拷贝</span></span><br><span class="line"></span><br><span class="line">angeli.<span class="property">name</span> = <span class="string">&quot;angeli&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">sayname</span>()) <span class="comment">// angeli</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="title function_">sayname</span>()) <span class="comment">// angeli</span></span><br><span class="line"></span><br><span class="line">angeli.<span class="property">city</span> = [<span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;娄底&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">saycity</span>()) <span class="comment">// [&quot;深圳&quot;,&quot;娄底&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="title function_">saycity</span>()) <span class="comment">// [&quot;深圳&quot;,&quot;娄底&quot;]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。<strong>它将返回目标对象。</strong></p>
<p>关于 <code>Object.assign()</code>这个方法是深拷贝还是浅拷贝的时候，是分情况的。</p>
<p>假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。也就是说，如果对象的属性值为简单类型（如<code>string</code>， <code>number</code>），通过<code>Object.assign(&#123;&#125;,srcObj);</code>得到的新对象为深拷贝；如果属性值为对象或其它引用类型，那对于这个对象而言其实是浅拷贝的。</p>
<p><strong>深拷贝实现</strong></p>
<ol>
<li>可以使用各种第三方的库， 我常用 <a href="https://www.lodashjs.com/docs/lodash.cloneDeep">lodash 的 cloneDeep</a></li>
<li>通过判断加递归实现深拷贝</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tempObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 意思就是__proto__上面的属性,我不拷贝</span></span><br><span class="line">      <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key))  &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          tempObj[key] = <span class="title function_">cloneDeep</span>(obj[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tempObj[key] = obj[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tempObj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ahui = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">city</span>: [<span class="string">&quot;泰国&quot;</span>,<span class="string">&quot;新加坡&quot;</span>,<span class="string">&quot;印度尼西亚&quot;</span>],</span><br><span class="line">  <span class="attr">sayname</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">saycity</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">city</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> angeli = <span class="title function_">cloneDeep</span>(ahui) <span class="comment">// 这样实现深拷贝</span></span><br><span class="line"></span><br><span class="line">angeli.<span class="property">name</span> = <span class="string">&quot;angeli&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">sayname</span>()) <span class="comment">// ahui</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="title function_">sayname</span>()) <span class="comment">// angeli</span></span><br><span class="line"></span><br><span class="line">angeli.<span class="property">city</span> = [<span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;娄底&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ahui.<span class="title function_">saycity</span>()) <span class="comment">// [&quot;泰国&quot;,&quot;新加坡&quot;,&quot;印度尼西亚&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="title function_">saycity</span>()) <span class="comment">// [&quot;深圳&quot;,&quot;娄底&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-call-x2F-apply的实现原理是什么？"><a href="#4-call-x2F-apply的实现原理是什么？" class="headerlink" title="4. call&#x2F;apply的实现原理是什么？"></a>4. call&#x2F;apply的实现原理是什么？</h2><p><code>call</code> 跟 <code>apply</code> 的功能是相同的，都是 改变 <code>this</code> 的执行，并立马执行函数。区别在于传参方式不同：</p>
<blockquote>
<p><code>func.call(thisArg,arg1,arg2,...)</code>：第一个参数是 <code>this</code> 指向的对象，其它参数依次传入。<br><code>func.apply(thisArg,[argsArray])</code>：第一个参数是 <code>this</code> 指向的对象，第二个参数是数组或类数组。</p>
</blockquote>
<p><strong><code>call</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先使用call 试一下</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayname</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">sayname</span>()) <span class="comment">// person</span></span><br><span class="line"><span class="keyword">let</span> ahui = &#123; <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">sayname</span>.<span class="title function_">call</span>(ahui)) <span class="comment">// ahui</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下边我们自己实现一个 call</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">imitateCall</span> = <span class="keyword">function</span>(<span class="params">context = <span class="variable language_">window</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 这里的 this， 是指原来对象里的方法， 比如下边的 person.sayname</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span> </span><br><span class="line">  <span class="comment">// slice(start, end) 方法可从已有的数组中返回选定的元素。</span></span><br><span class="line">  <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 执行调用的函数， 比如下边的 sayname</span></span><br><span class="line">  <span class="keyword">let</span> result = context.<span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="comment">// 删除函数调用，要不然会改变 context</span></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="comment">// 返回执行结果</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">sayname</span>.<span class="title function_">imitateCall</span>(ahui)) <span class="comment">// ahui</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再试一下有参数的例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Boy</span> = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayInfo</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`my name is: <span class="subst">$&#123;name&#125;</span>, my age: <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">angeli = <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;angeli&quot;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="title function_">sayInfo</span>(<span class="string">&quot;angeli&quot;</span>, <span class="number">18</span>)) <span class="comment">// 1 my name is: angeli, my age: 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> huihui = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="property">sayInfo</span>.<span class="title function_">call</span>(huihui, <span class="string">&quot;huihui&quot;</span>, <span class="number">28</span>)) <span class="comment">// 2 my name is: huihui, my age: 28</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(angeli.<span class="property">sayInfo</span>.<span class="title function_">imitateCall</span>(huihui, <span class="string">&quot;pengpeng&quot;</span>, <span class="number">38</span>)) <span class="comment">// 3 &quot;my name is: pengpeng, my age: 38&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-柯里化函数实现"><a href="#5-柯里化函数实现" class="headerlink" title="5. 柯里化函数实现"></a>5. 柯里化函数实现</h2><p>函数柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个东西的作用就是利用闭包函数的特性把每次执行之后的参数者保存好，再依次放入数组中</span></span><br><span class="line">  <span class="keyword">var</span> _adder = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _args.<span class="title function_">push</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> _adder;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 js 中，每次打印的时候，都会调用 toString 函数，所以，重写这里的 toSting 等函数执行完就会进行打印的时候， 就会调用里边的求和函数</span></span><br><span class="line">  <span class="comment">// reduce 方法的参数为函数，且不可以少； array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span></span><br><span class="line">  _adder.<span class="property">toString</span> = <span class="function">() =&gt;</span> _args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个 add 函数返回的是一个函数，这点很重要，因为 add() 后面还其它的(), 这个意思就是执行函数的意思</span></span><br><span class="line">  <span class="keyword">return</span> _adder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6-如何让-a-1-amp-amp-a-2-amp-amp-a-3-的值为-true"><a href="#6-如何让-a-1-amp-amp-a-2-amp-amp-a-3-的值为-true" class="headerlink" title="6. 如何让 (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 的值为 true"></a>6. 如何让 <code>(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)</code> 的值为 true</h2><p><strong>&#x3D;&#x3D; 运算符会进行隐式转换</strong></p>
<p><strong>Object</strong></p>
<p>&#x3D;&#x3D;操作符会尝试通过方法valueOf和toString将对象转换为其原始值（一个字符串或数字类型的值）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="attr">i</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// toString: () =&gt; a.i ++,</span></span><br><span class="line">  <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> a.<span class="property">i</span> ++,</span><br><span class="line">&#125;</span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>Array</strong><br>对于数组对象，toString 方法返回一个字符串，该字符串由数组中的每个元素的 toString() 返回值调用 join() 方法连接（由逗号隔开）组成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.<span class="property">join</span> = a.<span class="property">shift</span></span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>Symbol</strong><br>Symbol对象被转为原始类型的值时，会调用 toPrimitive 方法，返回该对象对应的原始类型值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>]: (<span class="function"><span class="params">i</span> =&gt;</span> <span class="function">() =&gt;</span> i++)(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>Proxy</strong><br>利用数据支持 Proxy&#x2F;Object.definedProperty</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">i</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">i</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="7-什么是-BFC-？-BFC-的布局规则是什么？如何创建-BFC-？"><a href="#7-什么是-BFC-？-BFC-的布局规则是什么？如何创建-BFC-？" class="headerlink" title="7. 什么是 BFC ？ BFC 的布局规则是什么？如何创建 BFC ？"></a>7. 什么是 BFC ？ BFC 的布局规则是什么？如何创建 BFC ？</h2><p>Box 是 CSS 布局的对象和基本单位，页面是由若干个Box组成的。</p>
<p>元素的类型 和 display 属性，决定了这个 Box 的类型。不同类型的 Box 会参与不同的 Formatting Context。</p>
<p>Formatting Context 是页面的一块渲染区域，并且有一套渲染规则，决定了其子元素将如何定位，以及和其它元素的关系和相互作用。</p>
<p>Formatting Context 有 BFC (Block formatting context)，IFC (Inline formatting context)，FFC (Flex formatting context) 和 GFC (Grid formatting context)。FFC 和 GFC 为 CC3 中新增。</p>
<p><strong>BFC 布局规则</strong></p>
<ol>
<li>BFC内，盒子依次垂直排列。</li>
<li>BFC内，两个盒子的垂直距离由 margin 属性决定。属于同一个BFC的两个相邻Box的margin会发生重叠【符合合并原则的margin合并后是使用大的margin】</li>
<li>BFC内，每个盒子的左外边缘接触内部盒子的左边缘（对于从右到左的格式，右边缘接触）。即使在存在浮动的情况下也是如此。除非创建新的BFC。</li>
<li>BFC的区域不会与float box重叠。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算BFC的高度时，浮动元素也参与计算。</li>
</ol>
<p><strong>怎样建仓 BFC</strong></p>
<ol>
<li>根元素</li>
<li>浮动元素（float 属性不为 none）</li>
<li>position 为 absolute 或 fixed</li>
<li>overflow 不为 visible 的块元素</li>
<li>display 为 inline-block, table-cell, table-caption</li>
</ol>
<p><strong>BFC 的应用</strong></p>
<ol>
<li>防止 margin 重叠 (同一个BFC内的两个两个相邻Box的 margin 会发生重叠，触发生成两个BFC，即不会重叠)</li>
<li>清除内部浮动 (创建一个新的 BFC，因为根据 BFC 的规则，计算 BFC 的高度时，浮动元素也参与计算)</li>
<li>自适应多栏布局 (BFC的区域不会与float box重叠。因此，可以触发生成一个新的BFC)</li>
</ol>
<h2 id="8-异步加载JS脚本的方式有哪些"><a href="#8-异步加载JS脚本的方式有哪些" class="headerlink" title="8. 异步加载JS脚本的方式有哪些"></a>8. 异步加载JS脚本的方式有哪些</h2><ol>
<li><p><code>&lt;script&gt;</code> 标签中增加 <code>async(html5)</code> 或者 <code>defer(html4)</code> 属性,脚本就会异步加载</p>
<blockquote>
<p>defer 和 async 的区别：</p>
<ol>
<li>defer 要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），在window.onload 之前执行；</li>
<li>async 一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。</li>
<li>如果有多个 defer 脚本，会按照它们在页面出现的顺序加载</li>
<li>多个 async 脚本不能保证加载顺序</li>
</ol>
</blockquote>
</li>
<li><p>动态创建 <code>script</code> 标签</p>
<blockquote>
<p>动态创建的 <code>script</code> ，设置 <code>src</code> 并不会开始下载，而是要添加到文档中，JS文件才会开始下载。</p>
</blockquote>
</li>
<li><p>XHR 异步加载JS</p>
</li>
</ol>
<h2 id="9-ES5有几种方式可以实现继承？分别有哪些优缺点？"><a href="#9-ES5有几种方式可以实现继承？分别有哪些优缺点？" class="headerlink" title="9. ES5有几种方式可以实现继承？分别有哪些优缺点？"></a>9. ES5有几种方式可以实现继承？分别有哪些优缺点？</h2><p><strong>1. 原型链继承</strong></p>
<p><strong>原型链实现继承的思想</strong>：利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>
<p><strong>原型链的基本概念</strong>：当一个原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个指向另一个原型的指针。同时，另一个原型中也包含着一个指向另一个构造函数的指针。如果另一个原型是另一个类型的实例，此时实例和原型就构成了原型链</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">citys</span> = [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;sub&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line">instance1.<span class="property">citys</span>.<span class="title function_">push</span>(<span class="string">&#x27;阿斯加德&#x27;</span>); </span><br><span class="line"><span class="comment">// instance1.citys = [&#x27;阿斯加德&#x27;];</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;, &quot;阿斯加德&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;, &quot;阿斯加德&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>原型链继承存在的问题</strong>：</p>
<ol>
<li>包含引用类型的原型属性会被所有实例共享，这会导致对一个实例的修改会影响到另一个实例。在通过原型来实现继承时，原型实际上会变成另一个类型的实例。原先的实例属性就变成了现在的原型属性</li>
<li>在创建了类型的实例时，不能向超类型的构造函数中传递参数</li>
</ol>
<blockquote>
<p>上边代码中， 当 <code>instance1.citys = [&#39;阿斯加德&#39;];</code> 时会有一个完全不同的效果， 查看详情： <a href="/3012898819.html">js 原型链继承问题拓展</a></p>
</blockquote>
<p><strong>2. 借用构造函数继承</strong></p>
<p>在子类型构造函数的内容调用超类型构造函数。</p>
<blockquote>
<p>函数只不过是在特定环境中执行代码的对象，因此通过使用apply()和call()方法可以在新创建的对象上执行构造函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;ahui&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">name</span>, instance.<span class="property">age</span>); <span class="comment">// ahui 18</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<blockquote>
<ol>
<li>可以向超类传递参数</li>
<li>解决了原型中包含引用类型值被所有实例共享的问题</li>
</ol>
</blockquote>
<p>缺点：</p>
<blockquote>
<ol>
<li>方法都在构造函数中定义，函数复用无从谈起，另外超类型原型中定义的方法对于子类型而言都是不可见的。</li>
</ol>
</blockquote>
<p><strong>3. 组合继承（原型链 + 借用构造函数）</strong></p>
<p>使用原型链实现对原型属性的方法的继承，通过借用构造函数来实现对实例属性的继承，既通过在原型上定义方法来实现了函数复用，又保证了每个实例都有自己的属性。</p>
<blockquote>
<p>面向对象实例属性和原型属性判别方法 hasOwnProperty(); 如果为true就是原型属性 否则就是实例属性。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> =  name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给超类型添加一个实例属性</span></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过借用构造函数继承实例属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过原型链继承原型属性</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;ahui&quot;</span>, <span class="number">18</span>)</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">instance1.<span class="title function_">sayAge</span>() <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>) <span class="comment">// [&quot;pink&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;angelee&quot;</span>, <span class="number">28</span>)</span><br><span class="line">instance2.<span class="title function_">sayAge</span>() <span class="comment">// 28</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>) <span class="comment">//  [&quot;pink&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br><span class="line"><span class="comment">// colors 是实例属性，通过借用构造函数实现的继承， 所以instance2不会受影响</span></span><br></pre></td></tr></table></figure>
<p>缺点：</p>
<blockquote>
<p>无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。</p>
</blockquote>
<p>优点：</p>
<blockquote>
<ol>
<li>可以向超类传递参数</li>
<li>每个实例都有自己的属性</li>
<li>实现函数复用</li>
</ol>
</blockquote>
<p><strong>原型式继承</strong></p>
<p>非常简单的一种继承方式：通过<code>Object.create()</code>方法实现原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象(可以覆盖原型对象上的同名属性)，在传入一个参数的情况下， <code>Object.create()</code> 和 <code>object()</code> 方法的行为相同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span>,</span><br><span class="line">  <span class="attr">citys</span>: [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;深圳&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&quot;angeli&quot;</span>;</span><br><span class="line">person1.<span class="property">citys</span>.<span class="title function_">push</span>(<span class="string">&#x27;阿斯加德&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;, &quot;阿斯加德&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line">person2.<span class="property">name</span> = <span class="string">&quot;penghui&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">citys</span>) <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;深圳&quot;, &quot;阿斯加德&quot;]</span></span><br></pre></td></tr></table></figure>
<p>在没有必要创建构造函数，仅让一个对象与另一个对象保持相似的情况下，原型式继承是可以胜任的。</p>
<p>缺点：</p>
<blockquote>
<p>同原型链实现继承一样，包含引用类型值的属性会被所有实例共享。</p>
</blockquote>
<p><strong>寄生式继承</strong></p>
<p>寄生式继承是与原型式继承紧密相关的一种思路。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部已某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAnotherObject</span>(<span class="params">original</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(original);</span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ahui&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="title function_">createAnotherObject</span>(person)</span><br><span class="line"></span><br><span class="line">person2.<span class="title function_">sayHi</span>() <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<p><strong>寄生组合式继承</strong></p>
<p>所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。基本思路：</p>
<p>　　不必为了指定子类型的原型而调用超类型的构造函数，我们需要的仅是超类型原型的一个副本，本质上就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型</p>
<p>寄生组合式继承的基本模式如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(subperType.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建对象</span></span><br><span class="line">  prototype.<span class="property">constructor</span> = subType; <span class="comment">// 增强对象</span></span><br><span class="line">  subType.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">citys</span> = [<span class="string">&quot;北京&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">SubType</span>, <span class="title class_">SuperType</span>)</span><br></pre></td></tr></table></figure>
<p>只调用了一次超类构造函数，效率更高。避免在 <code>SuberType.prototype</code> 上面创建不必要的、多余的属性，与其同时，原型链还能保持不变。</p>
<p>因此寄生组合继承是引用类型最理性的继承范式。</p>
<h2 id="10-隐藏页面中的某个元素的方法有哪些？"><a href="#10-隐藏页面中的某个元素的方法有哪些？" class="headerlink" title="10. 隐藏页面中的某个元素的方法有哪些？"></a>10. 隐藏页面中的某个元素的方法有哪些？</h2><p>完全隐藏： 元素从渲染树中消失，不占据空间。<br>视觉上的隐藏：屏幕中不可见，占据空间。<br>语义上的隐藏：读屏软件不可见，但正常占据空间。</p>
<p><strong>完全隐藏：</strong></p>
<ol>
<li><code>display: none;</code></li>
<li>hidden: <code>&lt;div hidden&gt;&lt;/div&gt;</code></li>
</ol>
<p><strong>视觉上的隐藏：</strong></p>
<ol>
<li>postion</li>
<li>transform</li>
<li>width, height</li>
<li>opacity</li>
<li>visibility</li>
<li>z-index</li>
<li>clip-path: <code>clip-path: polygon(0 0, 0 0, 0 0, 0 0）</code></li>
</ol>
<p><strong>语义上的隐藏</strong><br>aria-hidden: <code>&lt;div aria-hidden = &quot;true&quot;&gt;&lt;/div&gt;</code></p>
<h2 id="11-let、const、var-的区别有哪些？"><a href="#11-let、const、var-的区别有哪些？" class="headerlink" title="11. let、const、var 的区别有哪些？"></a>11. let、const、var 的区别有哪些？</h2><table>
<thead>
<tr>
<th>声明方式</th>
<th>变量提升</th>
<th>暂时性死区</th>
<th>重复声明</th>
<th>块作用域有效</th>
</tr>
</thead>
<tbody><tr>
<td>var</td>
<td>会</td>
<td>不存在</td>
<td>允许</td>
<td>不是</td>
</tr>
<tr>
<td>let</td>
<td>不会</td>
<td>存在</td>
<td>不允许</td>
<td>是</td>
</tr>
<tr>
<td>Const</td>
<td>不会</td>
<td>存在</td>
<td>不允许</td>
<td>是</td>
</tr>
</tbody></table>
<p>这里有一个非常重要的点即是：在JS中，复杂数据类型，存储在栈中的是堆内存的地址，存在栈中的这个地址是不变的，但是存在堆中的值是可以变得。</p>
<h2 id="12-说一说你对JS执行上下文栈和作用域链的理解"><a href="#12-说一说你对JS执行上下文栈和作用域链的理解" class="headerlink" title="12. 说一说你对JS执行上下文栈和作用域链的理解"></a>12. 说一说你对JS执行上下文栈和作用域链的理解</h2><p><strong>执行上下文</strong></p>
<p>执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。分为<strong>全局执行上下文</strong> 跟 <strong>函数执行上下文</strong></p>
<p><strong>作用域</strong></p>
<p>作用域负责收集和维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</p>
<p>作用域有两种工作模型：词法作用域和动态作用域，JS采用的是词法作用域工作模型，词法作用域意味着作用域是由书写代码时变量和函数声明的位置决定的。</p>
<p>作用域分为：</p>
<ol>
<li>全局作用域</li>
<li>函数作用域</li>
<li>块级作用域</li>
</ol>
<p><strong>JS执行上下文栈（执行栈）</strong></p>
<p>执行栈，也叫做调用栈，具有 LIFO (后进先出) 结构，用于存储在代码执行期间创建的所有执行上下文。</p>
<p>规则：</p>
<blockquote>
<p>首次运行JavaScript代码的时候,会创建一个全局执行的上下文并Push到当前的执行栈中，每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push当前执行栈的栈顶。<br>当栈顶的函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文的控制权将移动到当前执行栈的下一个执行上下文。</p>
</blockquote>
<p><strong>作用域链</strong></p>
<p>作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链。</p>
<h2 id="13-防抖函数的作用是什么？请实现一个防抖函数"><a href="#13-防抖函数的作用是什么？请实现一个防抖函数" class="headerlink" title="13. 防抖函数的作用是什么？请实现一个防抖函数"></a>13. 防抖函数的作用是什么？请实现一个防抖函数</h2><p> 防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次(理论上不会被调用，因为触了间隔一直小于wait， 这里的一次应该是触发停止的时候)，而节流的 情况会每隔一定时间（参数wait）调用函数。</p>
<p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时，事件处理函数不执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(timeout !== <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(fn, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">debounce</span>(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的现象是如果你鼠标一直在滚动，那么处理函数就一直不执行，滚动停止1秒后执行。<br>当持续触发scroll事件时，事件处理函数handle只在停止滚动1000毫秒之后才会调用一次，也就是说在持续触发scroll事件的过程中，事件处理函数handle一直没有执行。</p>
</blockquote>
<h2 id="14-节流函数的作用是什么？有哪些应用场景，请实现一个节流函数"><a href="#14-节流函数的作用是什么？有哪些应用场景，请实现一个节流函数" class="headerlink" title="14. 节流函数的作用是什么？有哪些应用场景，请实现一个节流函数"></a>14. 节流函数的作用是什么？有哪些应用场景，请实现一个节流函数</h2><p>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</p>
<blockquote>
<p>节流函数的作用是规定一个单位时间，在这个单位时间内最多只能触发一次函数执行，如果这个单位时间内多次触发函数，只能有一次生效。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节流throttle代码（定时器）：</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="keyword">function</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>区别： 函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p>
</blockquote>
<h2 id="15-什么是闭包？闭包的作用是什么？"><a href="#15-什么是闭包？闭包的作用是什么？" class="headerlink" title="15. 什么是闭包？闭包的作用是什么？"></a>15. 什么是闭包？闭包的作用是什么？</h2><h2 id="16-实现-Promise-all-方法"><a href="#16-实现-Promise-all-方法" class="headerlink" title="16. 实现 Promise.all 方法"></a>16. 实现 Promise.all 方法</h2><p>闭包的定义</p>
<p>《JavaScript高级程序设计》:</p>
<blockquote>
<p>闭包是指有权访问另一个函数作用域中的变量的函数</p>
</blockquote>
<p>《JavaScript权威指南》：</p>
<p>从技术的角度讲，所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。</p>
<p>《你不知道的JavaScript》</p>
<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p>
<h2 id="17-请实现一个-flattenDeep-函数，把嵌套的数组扁平化"><a href="#17-请实现一个-flattenDeep-函数，把嵌套的数组扁平化" class="headerlink" title="17. 请实现一个 flattenDeep 函数，把嵌套的数组扁平化"></a>17. 请实现一个 flattenDeep 函数，把嵌套的数组扁平化</h2><h2 id="18-请实现一个-uniq-函数，实现数组去重"><a href="#18-请实现一个-uniq-函数，实现数组去重" class="headerlink" title="18. 请实现一个 uniq 函数，实现数组去重"></a>18. 请实现一个 uniq 函数，实现数组去重</h2><h2 id="19-可迭代对象有哪些特点"><a href="#19-可迭代对象有哪些特点" class="headerlink" title="19. 可迭代对象有哪些特点"></a>19. 可迭代对象有哪些特点</h2><h2 id="20-JSONP-的原理是什么？"><a href="#20-JSONP-的原理是什么？" class="headerlink" title="20. JSONP 的原理是什么？"></a>20. JSONP 的原理是什么？</h2><p>参考地址： </p>
<ol start="0">
<li><a href="https://mp.weixin.qq.com/s/JIgaDqPzF9Nyt4HWXCuh9Q">原文地址</a></li>
<li><a href="https://www.imooc.com/article/67538">js 基本类型与引用类型的区别</a></li>
<li><a href="https://segmentfault.com/a/1190000012828382">一篇文章彻底说清JS的深拷贝&#x2F;浅拷贝</a></li>
<li><a href="https://www.jianshu.com/p/1b212581a8d5">Object.assign 是浅拷贝还是深拷贝</a></li>
<li><a href="https://www.jianshu.com/p/2975c25e4d71">详解JS函数柯里化</a></li>
<li><a href="https://www.jianshu.com/p/a74223e37e3b">如何让 (a &#x3D;&#x3D; 1 &amp;&amp; a &#x3D;&#x3D; 2 &amp;&amp; a &#x3D;&#x3D; 3) 的值为true？</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">关于 Proxy </a></li>
</ol>
]]></content>
      <categories>
        <category>前端进阶</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>d3</title>
    <url>//4288208203/</url>
    <content><![CDATA[<h3 id="如何打造更稳健的前端业务模块代码组织形式"><a href="#如何打造更稳健的前端业务模块代码组织形式" class="headerlink" title="如何打造更稳健的前端业务模块代码组织形式"></a>如何打造更稳健的前端业务模块代码组织形式</h3><h3 id="文章出处：如何打造更稳健的前端业务模块代码组织形式"><a href="#文章出处：如何打造更稳健的前端业务模块代码组织形式" class="headerlink" title="文章出处：如何打造更稳健的前端业务模块代码组织形式"></a>文章出处：<a href="https://cloud.tencent.com/developer/article/1833272">如何打造更稳健的前端业务模块代码组织形式</a></h3><p>业务系统和一般的应用有非常大的不同，一般的应用以提供给公司&#x2F;企业外的用户（消费者、普通玩家）提供服务，以完成2C的销售目的，而业务系统一般是2B或者自身消费的模式，完成的是自身业务的管理目标。所以，应用侧重服务，业务系统侧重管理。两者的不同，导致我们对项目开发中，代码的组织方式会有差别。2C应用要满足大量用户在使用时的舒适性，因此要提高项目中有关性能、用户体验、效果等方面的要求，以吸引用户付费。但业务系统则稍有差别，虽然系统的使用体验也很重要，但是不是占最重要的部分，业务系统最重要的部分，是必须保证用户看到的数据、流程等，必须与真实的业务、业务流程一致，否则会带来自身利益的损失，因此，在稳健性、安全性等方面要求更高。</p>
<p>本文主要站在稳健性这个角度，试图阐述，在业务系统中，如何去安排或组织我们的（前端）代码，才能保证符合业务系统特征要求，且有利于长期可持续维护下去。由于谈系统过大，那么，本文只立足于一个业务模块来进行阐述。</p>
<h2 id="什么是业务模块？"><a href="#什么是业务模块？" class="headerlink" title="什么是业务模块？"></a>什么是业务模块？</h2><p>首先，什么是业务系统？在这之前，又必须回答什么是业务？业务（Business）专指商业活动，是实现企业生产到利益回收的一个环节，它的总和，构成了该企业盈利活动的整个流程。一般而言，我们所指的业务是企业商业活动中的一个部分，有的甚至小到一个环节，例如“结算”这个环节。业务系统则是辅助这些商业活动的计算机在线系统，以信息化的形式管理和决策企业的商业活动（理论上没有业务系统企业也能运转，但信息化社会没有业务系统会让企业寸步难行）。</p>
<p>大部分情况下，业务系统会尽可能多的囊括企业的业务环节，其目标是将企业的所有商业管理在线化，完成除必须在线下完成的实体业务之外的所有管理活动。而且，通过业务系统的数据积累，可以让企业基于已有数据进行深入决策，比只有线下管理的竞争对手高出多个维度。企业的管理者和员工使用业务系统，参与到企业的各个业务环节，参与形式各有不同，根据员工的角色来决定，比如有的员工不接触系统界面，只通过工卡完成各项流程的录入，有的员工则需要完成在线申请或审批，有的员工需要使用复杂的第三方工具完成系统录入等等。</p>
<p>业务模块，是以业务系统的建设者（领域专家、系统工程师等）的角度看待业务系统时，将庞大的业务系统，按照某个业务活动的边界，进行划分的某个单元。但是技术上，一般一个模块还是粒度比较大的单元。一般而言，业务模块囊括了系统关于该业务的所有内容，且和其他业务有明显的界限，理论上，可以在脱离了其他业务模块的情况下独立运行。</p>
<p>有了以上的认知，我们就知道，我们需要掌握企业在某个业务中，不同的参与者都是如何工作的。在该业务模块没有上线到业务系统中时，没人能明确的告诉你这个业务模块应该长什么样子，你需要走访业务的参与成员，了解他们实际是怎么工作的，然后再思考，如果要将这些工作迁移到线上，应该关注哪些方面，是用户的操作形式？是界面的友好风格？是信息的准确？但是应该注意一点，如果业务系统致使工作效率降低，那么说明设计该系统的人没有真正掌握企业商业活动的核心要点。</p>
<h2 id="DDD领域驱动设计"><a href="#DDD领域驱动设计" class="headerlink" title="DDD领域驱动设计"></a>DDD领域驱动设计</h2><p>DDD（Domain-Driven Design）是帮助工程师，应对复杂业务系统设计和开发的思想武器和方法论。它指导了我们如何去和领域专家（熟悉业务的负责人）进行沟通，如何和他们找到一门共通语言，并基于该语言构建一套关于领域知识的图谱，并且是按照我们做系统设计的思路构建这套图谱。</p>
<p>建模是DDD的核心方法论，你需要去区分一个业务中的各个概念，为不同的概念建立不同类型的模型，并且找到它们之间的关系，通过建模，建立起我们编程的基础工程，后续所有的开发，都是在这些模型的基础上完成的。</p>
<h2 id="前后端有别"><a href="#前后端有别" class="headerlink" title="前后端有别"></a>前后端有别</h2><p>自从前后端分离流行之后，DDD从某些技术层面上已经过时了。在传统系统开发中，系统大部分技术分布在后端即底层的基础建设上，用于<a href="https://cloud.tencent.com/product/xiaowei?from=10680">人机交互</a>的表现层所占份额很小，甚至只是后端系统中输出的那么末梢节点，是花费时间最少的部分。而现代系统开发前后端分离之后，一套系统需要依赖前后端两个团队完成，这导致原本可以在排除其他业务模块之后可以独立运行的业务模块，现在不可能存在，因为现在的架构模式，导致前端代码一次性囊括所有模块，而后端代码模块间也具有较高的耦合，已经不可能回到以前一个模块的代码可以完全自治的模式下了。</p>
<p>基于新的架构，前端和后端对待一个业务模块的态度有了很大的不同。对于后端而言，模块相对来说还比较清晰，沿用旧的设计思路，模块的各个功能也能保持一定的高内聚。甚至，由于将视图层丢出去，后端甚至不需要考虑视图层的问题，只需要保证业务的数据准确和业务的流转准确即可。对于视图层，后端只需要一股脑将每一个功能所需要的数据（VO）以JSON的形式提供Restful接口即可。</p>
<p>对于前端而言，其实经历了多个阶段。起初，前端作为页面的处理方，主要是提供js脚本，完成一些特定的后端无法完成的交互效果，例如一些建议的滑动下拉效果，一些悬浮效果等，由于这些效果需要js编写，而后端开发人员不熟悉，就不得不由前端人员完成。之后，随着ajax技术兴起，前端路由技术的出现，页面交互效果开始变得丰富，无刷新的效果成为web应用的主流形式，使得后端人员参与前端工作的可能性越来越低，前端逐渐从作为后端末梢环节的地位独立出来，通过ajax或其他http交互方式，完成与后端的分离。</p>
<p>现在，我们的核心问题是：前端怎么对待业务模块？</p>
<p>一种成熟的方式是将业务模块组件化，这里的组件是具有高内聚设计的业务组件。2017年我在Morningstar工作的时候，就已经在采用这种方案。和现在的react、vue组件不同，当时我们基于backbone作为框架开发组件，一个组件基于一些数据点完成一个具体的业务（基金数据分析）。这个组件在交付时，需要同时交付前端和后端代码到不同的平台中，作为对应产品的一部分。组件的形式是一种不错的形式，包括我后面要推荐的方案，本质上也是交付组件。</p>
<p>但是，组件不是唯一的业务模块交付形式。我在业务中还使用angularjs作为框架开发应用，一般情况下，我们会根据路由来划分模块，一个模块拥有相同的路由根地址，模块内的各个功能或处理节点都是该路由的子路由。但是，它的模板、controller、service、样式文件被放在不同的目录下管理，虽然在前端的运行效率变高了，但是对于业务模块而言却变得高耦合低内聚。可能angular的开发团队意识到这个问题，angular2之后，也就是新的基于typescript的angular框架不在以这种模式对待业务模块，新的框架下，一个module的相关代码被聚合在一起，并且形式上以组件的形式导出，可以说实现了业务的高内聚，业务间的低耦合。</p>
<h2 id="稳健的前端业务模块形式"><a href="#稳健的前端业务模块形式" class="headerlink" title="稳健的前端业务模块形式"></a>稳健的前端业务模块形式</h2><p>Angular的module组织形式，我认为是比较优秀的组织形式。除了代码本身的组织形式之外，我们还要去看业务模块在设计上的特征，是否有利于为我们提供一定的灵活性，可为将来实现长期可持续迭代更新创造条件。</p>
<p>那么，怎么样设计业务模块呢？我提倡一种分层的理念。将业务模块分为数据层、表现层和逻辑层。这也是angular尝试践行的，它首先提供了可在编译时实现抽象的模板；其次提供了依赖注入的服务层为模块提供视图之外的其他能力，我们可以在服务层做很多事情，比如建立模型，但是它没有提供这方面的指导（，所以在其他文章中，我们不认为angular是完整的MVC框架，因为它在M层无所作为）；最后，它内置了基于rxjs的流式数据（状态）管理，基于管道的处理方式，可以让交互和状态的流动可以自由组合，使用起来非常灵活。但是，正如我提到的，它没有提供有关分层理念的更深入的指导，它提供了各种工具，让你自己选择是否使用，以及如何使用这些工具来编写出可长期维护的代码，完全由你的设计或架构能力决定。</p>
<p>而我则希望提供用于编写出明确分层概念的范式，就像多年前我们写后端服务时，需要进行分层管理一样，我希望在前端践行DDD的理念。但同时又有别于后端的DDD，前端不需要永久存储数据，每一次刷新浏览器，我们都可以通过api接口拿到需要的数据，而且从api请求数据和从<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>查询数据也有一定的差别。我们要构建具有DDD通行理念的，带有前端特色的建模体系。</p>
<h2 id="前端建模"><a href="#前端建模" class="headerlink" title="前端建模"></a>前端建模</h2><p>如果你使用vue组件，你会有一种为视图撰写模型的感觉，即ViewModel，它一定指向视图层（界面与用户交互）。但如我在多个场合提到的一样，vue组件是纯视图层的要件，如果你把有关业务的代码，写在vue组件中，你的代码将会是业务逻辑和视图逻辑混杂在一起的代码，你将无法在后来的维护中区分和把握到底要改业务逻辑还是改交互逻辑。实际上，这种操作是很多初级前端的惯用手法，因为大部分初级前端的编程习惯，都是随着意识流，按线性的思维写代码。而真正有经验的工程师，一定会在开始写代码之前先思考将要写作的代码，哪些是用于定义业务对象的，哪些是用于控制数据流的，哪些是为了完成界面渲染的，哪些是为了完成用户交互的等等。而这些思考，用一种思想来概括就是“分层思想”或者叫“Layered Architecture”。</p>
<p>有了分层思想之后，开发者才不会认为抽象出业务模型是一件麻烦的事。是的，很多初级前端觉得自己写的代码非常舒服，并且认为前端建模或把一些不属于视图层的东西提炼出去，是一件增加复杂度，使代码难读难维护的事。而实际上，由于他们只关注当下快速实现，而不用考虑可持续维护的问题，所以认为自己的实现是最优解。但往往有些系统，根本不应该让一个经验并不丰富且自以为是的初级前端来写，而应该由经验丰富的工程师来完成。两者之间的差距，会使得系统后续的发展呈现截然不同的效果。但讽刺的是，经验不足的开发者进入这样的项目组之后，反而认为自己写的粗糙的代码应该推广开替代已经成熟的体系，因为他觉得自己的代码可以一口气读完，是好代码。然而，现实是，当他们2个月之后回头看自己的代码，发现根本无法改动，或者要实现新功能非常困难，因为之前写的代码是线性的过程式代码，稍有调整，就需要把这条线重新切断再想办法连起来。所有的一切，都会在实践中被检验出来。分层开发，势在必行。</p>
<p>前端业务模型分为两类：一类是用于展示的模型，一类是用于数据提交（表单）的模型。后者在复杂度上会比前者高出一个等级。</p>
<p>你可能会有疑问，不都是业务模型么，怎么还区分用于展示的和提交的？这可能是前端的特殊之处。后端应用，提交数据到数据库时，具有特定的约束，但是在输出到前端时却没有约束，因此，后端把大部分工作都投入在对数据库有写入动作的业务逻辑上，而丢给前端的数据，基本上不需要按照视图层的逻辑建模，只要一股脑把数据丢给前端即可。但是前端则不同，视图层具有复杂的交互逻辑，而这些交互逻辑依赖业务对象的特征，比如当这个业务对象处于什么样的一个状态时，才能点击某个按钮触发一个流转业务。因此，在展示&#x2F;交互这个层面，前端也需要建模。而提交数据就更不用说了，前端业务表单本身就是极为复杂的一种场景，不建立模型，根本无法对一个表单所要表达的业务对象完成清晰的创建或更新处理。</p>
<h2 id="如何建模？"><a href="#如何建模？" class="headerlink" title="如何建模？"></a>如何建模？</h2><p>讲了那么多，那么到底应该如何实施前端建模呢？作为工程师，我们必须掌握一定的方法论，在理论上对我们的设计有一定的自信，才能确保我们的建模方式是对的。DDD为我们提供了建模的方法论，它提供了多个方案（Scheme），比如Entity, Value Object, Service, Modules, Aggregate, Factory, Repository等等，这些都是用来构造模型的方案。</p>
<p>这么多方案，实际上本质要解决两个问题：</p>
<ul>
<li>核心</li>
<li>边界</li>
</ul>
<p>我们要对业务进行建模，首先要抓住该业务的核心是什么。例如银行转账这个业务，它的核心是什么？是转账的金额，还是账号？它的边界又是什么？例如在转账这个业务中，我是否需要去把两边账号的消费记录拉出来看看？这些，都是我们要在建模的时候解决的问题。DDD告诉我们的方法论，是不要自己闭门造车，不要从开发人员的角度去设计一个系统，而是要找领域专家（对该业务的实操了如指掌的人）进行了解，建立自己对该业务的知识体系，并且和领域专家一起敲定有关这个业务各个细节的模型体系。</p>
<p>回到我们前端。我们实际上要找到这个业务中，存在那些对象，收集到所有对象之后，去一个一个的观察它们，如果它是业务逻辑中的关键对象，就要使用Entity的方案，对它进行细致的深入的描述，如果它是一个次要的或者说固定不变的或者一次性用完的对象，那么就可以使用Value Object的方案（也就是一个普通的对象）。有了这些对象之后，还需要有一个东西把它们聚合在一起，这时我们可以使用Aggreate的方案。在这些对象之间，还可能出现一些动作（动词，非静态的），此时我们可以使用Service和Factory的方案。我们还需要和服务端交互，拉取数据，填充到模型中，形成更丰富的细节，此时我们可以采用Repository的方案。</p>
<p>不要被这么多的名词吓到，本质上，放到前端的语境下，你就是需要去创建一些类，并处理好这些类在真实被使用时，它们之间的约束逻辑等等。</p>
<h2 id="建模实践"><a href="#建模实践" class="headerlink" title="建模实践"></a>建模实践</h2><p>既然本质上 是去建立类，那么接下来我们就来看一看如何利用前端的工具js来完成模型的建立。在这之前，我们不得不承认，js不是一门能像java一样写出健壮的系统的语言。它有自己的语法特征，而这些语法特征导致我们在完成建模时，需要采取一些非常手段。比如我，就是利用class的static属性来完成模型上元数据的定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">default</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> type = <span class="string">&#x27;numeric&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Amount</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">default</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">static</span> type = <span class="string">&#x27;number&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransferModel</span> &#123;</span><br><span class="line">  id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">from</span> = <span class="title class_">Account</span></span><br><span class="line">  <span class="keyword">static</span> to = <span class="title class_">Account</span></span><br><span class="line">  <span class="keyword">static</span> amount = <span class="title class_">Amount</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码仅仅是我用来说明建模的一个思路，我没有在生产环境用过这样的代码。首先，我们定义了两个类：Account账户, Amount金额。这两个类具有类似的结构，因为它们是用来描述这个对象应该具备的一些特征，比如Account这个对象应该是一个数字字符串，而Amount应该是一个数字。其次，Transfer是一个包含了三个字段的对象，每个字段都对应一个建好模的对象。我们在使用时，主要是去使用Transfer实例化出来的对象，这个对象应该具备3个字段，且每个字段应该具备哪些规则（约束）都是提前规定好的。</p>
<p>上面是我们对转账这个业务中的对象进行建模。实际上，我们并没有完成转账这个业务，我们需要把数据发送给api，以真正完成转账。所以，我们要在对象之外，建立一个服务，用于完成这个业务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TransferService</span> &#123;</span><br><span class="line">  <span class="title function_">submitTransfer</span>(<span class="params">id, data</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getTransfer</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这也非常容易理解，我们通过两个方法来完成和API接口的交互，从而使得这个业务完成前后端对接，使它在整个系统层面生效。同时，我们还提供了一个接口getTransfer，它将用于在用户查看自己的转账记录的时候，还原数据。</p>
<p>但上面这些还不够，我们需要有一个东西，把它们串联起来，它们才能真正工作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TransferController</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> model = <span class="title class_">TransferModel</span></span><br><span class="line">  <span class="keyword">static</span> service = <span class="title class_">TransferService</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">getTransfer</span>(id)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span>.<span class="title function_">setData</span>(id, data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">model</span>.<span class="title function_">getData</span>()</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">submitTransfer</span>(<span class="variable language_">this</span>.<span class="property">model</span>.<span class="property">id</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，我们就模型和服务串起来了。我们可以从这三块代码中，大致看出关于转账这个业务的实际逻辑。但是，我们忽略了另外一个东西，就是我们现在还没有界面，我们还没有提供给用户怎么进行操作后完成这个转账。因此，我们还需要补全这个部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TransferView</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  controller = <span class="keyword">new</span> <span class="title class_">TransferController</span>()</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">controller</span>.<span class="title function_">init</span>(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.controller.submit()&#125;&gt;transfer<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，我们就将视图和模型最终串了起来。也实现了我们最初关于分层的想法。通过分层架构（Layered Architecture），我们的代码被以不同层的不同理念进行组织。有关模型的东西，全都且只在模型层处理，我们不需要考虑外部将会如何使用它，理论上可以表述为“内存实体不需要考虑外层环境”的Clean Architecture，因此，我们只需要考虑，我们的建模是否符合真实业务的需要。这样的代码组织，将颠覆我们传统前端开发的一些经验，然而，这种颠覆显得没有什么惊喜，它看上去复杂度增加了，我们反问一句自己，我们是为了分层而分层，还是为了这样分层写出的代码，将有助于我们区分代码块功能，以利于我们的项目在两年三年的持续迭代维护中，有比较清晰的代码组织，从而让我们的维护更加有效？</p>
<h2 id="提炼关系表"><a href="#提炼关系表" class="headerlink" title="提炼关系表"></a>提炼关系表</h2><p>关系表是指在某个业务逻辑中，涉及多个业务对象，它们之间的存在不同情况下的不同联系，所最终组成的一个Object对象。这样说过于抽象，我们用实际的案例来说明问题。</p>
<p>在上述转账系统中，存在着这样的内在逻辑，当用户X信用等级为1时，他不能向客户类型为A类的用户转账，因为可能存在信用风险。此时，实际上，我们要构建一张用于表达信用、客户类型和转账权限之间的关系表，在我的设计里，转账权限是结果，因此，它是值，而信用、客户类型是条件，因此，产生的表可以按如下写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="attr">A</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">B</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="attr">A</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">B</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的关系表表示了如下关系：信用为1级的用户，不能向A类用户转账，但可以向B类用户转账；信用为2级的用户，可以向A和B类用户转账。</p>
<p>一般来讲，关系表会非常繁琐，因为它要枚举大部分可能性（一个技巧是，不需要列出false的情况，只需要列出true的情况的关系即可），所以感觉节点会很多。但是，它的用处却非常大，你可以使用它避免一大堆的if…else。比如上面这个场景。我们有两种选择，一种是将这个关系写在模型中，另外一种是写在控制器中。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Credit</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">default</span> = <span class="number">1</span></span><br><span class="line">  <span class="keyword">static</span> type = <span class="title function_">enumerate</span>([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stratum</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">default</span> = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> type = <span class="title function_">enumerate</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountModel</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> credit = <span class="title class_">Credit</span></span><br><span class="line">  <span class="keyword">static</span> stratum = <span class="title class_">Stratum</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">canTransfer</span>(<span class="params">toAccount</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">credit</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;B&#x27;</span>].<span class="title function_">includes</span>(toAccount.<span class="property">stratum</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransferModel</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">from</span> = <span class="title class_">AccountModel</span></span><br><span class="line">  <span class="keyword">static</span> to = <span class="title class_">AccountModel</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">transfer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">from</span>.<span class="title function_">canTrasfer</span>(<span class="variable language_">this</span>.<span class="property">to</span>)) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你看，我们在canTransfer方法中通过if…else来进行判断，看上去也是可以的，但是，这里有一个问题是，这段代码无法让我们洞悉业务的详细细节，它像是一段无法被看透的程序，而不是一段业务的描述。接下来我们用关系表来改造它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">canTransfer</span>(<span class="params">toAccount</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> relationship[<span class="variable language_">this</span>.<span class="property">credit</span>]?.[toAccount.<span class="property">stratum</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多么简单的一句话，而这里的relationship就是我们上面我们列举的关系表。关系表是静态的，不仅程序的运行性能会更好，同时，我们阅读关系表（需要增加对键的含义注释）来掌握业务中都有哪些情况，我们熟知了业务，才能在将来的调整时，将关系表中的true改为false即可。</p>
<h3 id="基于React的DDD框架"><a href="#基于React的DDD框架" class="headerlink" title="基于React的DDD框架"></a>基于React的DDD框架</h3><p>但以上仅仅是一个思路，要让它工作起来，还有非常多的工作要做。幸运的是，我已经帮你做了这项工作，我发布了开源的 tyshemo（<a href="https://github.com/tangshuang/tyshemo%EF%BC%89%E6%A8%A1%E5%BC%8F%E5%BA%93%E5%92%8C">https://github.com/tangshuang/tyshemo）模式库和</a> nautil（<a href="https://nautil.js.org/%EF%BC%89%E6%A1%86%E6%9E%B6%EF%BC%8Ctyshemo">https://nautil.js.org/）框架，tyshemo</a> 帮助你完成核心的模型层，nautil 则是基于 tyshemo 提供了完整的 service 和 controller 建模，以及提炼了业务交互的相关编程范式，你可以使用它完成DDD思路的整个链路的实践，同时，又不失去基于react进行开发的乐趣。你可以在这里（<a href="https://github.com/tangshuang/nautil-cli/tree/master/lib/templates/src/app/modules/home%EF%BC%89%E7%9C%8B%E5%88%B0%E4%B8%80%E4%BB%BD%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E3%80%82">https://github.com/tangshuang/nautil-cli/tree/master/lib/templates/src/app/modules/home）看到一份完整的代码示例。</a></p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-2226939/rjlywuaz7f.png?imageView2/2/w/1620" alt="img"></p>
<p>面对一个业务模块，我们会把和它相关的所有代码文件放在一个目录下进行管理（除一些需要公用的资源除外）。我们首先要对业务进行建模，如果是简单的一两个模型，我们只需要建立一个.model.js来完成，而如果是一个比较复杂的体系，我们可以创建一个.model文件夹，放置所有相关模型文件，比如上图示例中，我们可以创建home.model文件夹来管理。建模的同时，我们就会在必要的时候，为模块创建service，规则也是一样。完成建模之后，我们需要撰写控制器controller，在一个controller内部，你需要引入model和service，nautil的Controller会自动帮你实例化它们，并且做好观察。</p>
<p>除了把model和service串联起来，controller还有什么用呢？你还可以在controller内建立基于模型的交互，我称之为“无视图的交互模型”。因为对于前端应用来讲，业务除了数据逻辑之外，往往还有交互逻辑，比如“点击这个按钮之后，弹出一个对话框询问用户是否确认转账，如果用户点确认，那么执行转账”，这段交互描述里面，没有确切的告诉你弹出框应该长什么样子，用什么颜色，字体多大等等，它只描述了有关业务的交互部分，这个部分与布局和样式无关，是纯粹的描述和业务相关的交互效果。得益于react的抽象能力，我们可以直接在controller中，使用jsx完成纯交互的部分，并以组件的形式作为controller的接口提供给外部使用。这样，有关业务的一切逻辑，我们就通过controller串联model和service，在一个模块内，脱离布局，完成了。完成controller之后，我们才开始布局开发，布局开发也就是react组件的日常开发，由于我们在controller中导出了交互组件，而这些交互组件已经涵盖了大部分业务逻辑，所以，我们可以做到布局组件和业务无关，是纯粹的布局和样式。</p>
<p>基于这样的设计，我们在后续的开发中，还可以加入一些特殊的逻辑，例如，我们一个业务模块，可能在PC端也可能在手机端使用，那么，此时，我们只需要重写布局组件，而无需再写业务逻辑相关的代码。更多的思想，需要你更深入的了解nautil，以及尝试使用它作为主力开发工具之后，慢慢体会。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文虽然标题是谈如何打造前端的模块代码，但本质上，详细的阐述了我关于DDD的思想的理解，以及自己在DDD的思想基础上构建的一套代码管理范式，并且以前端框架的形式组织起来。我相信，如果你也是在编写复杂的业务系统，并且遇到一些瓶颈的话，一定能从本文中有所收获。当然，由于前端的特殊性，我们不能照搬DDD，需要有所变通。我写框架，也只是一种探索，并不代表它是唯一的一种形态。随着产业互联网时代的到来，前端逐渐从大众型交互应用，转向企业型业务系统应用，这是大势所趋，也是所谓“互联网下半场”前端立足之本。本文抛砖引玉，相信站在前端的角度去看待复杂业务（专有领域）的研究会越来越多。究会越来越多。</p>
]]></content>
  </entry>
</search>
